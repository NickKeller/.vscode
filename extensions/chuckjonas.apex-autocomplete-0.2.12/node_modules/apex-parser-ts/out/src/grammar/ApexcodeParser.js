// Generated from /Users/jonas/Documents/code/apex-parser-ts/src/grammar/Apexcode.g4 by ANTLR 4.6-SNAPSHOT
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const FailedPredicateException_1 = require("antlr4ts/FailedPredicateException");
const Decorators_1 = require("antlr4ts/Decorators");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const Decorators_2 = require("antlr4ts/Decorators");
const Parser_1 = require("antlr4ts/Parser");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const RuleVersion_1 = require("antlr4ts/RuleVersion");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class ApexcodeParser extends Parser_1.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(ApexcodeParser._ATN, this);
    }
    get vocabulary() {
        return ApexcodeParser.VOCABULARY;
    }
    get grammarFileName() { return "Apexcode.g4"; }
    get ruleNames() { return ApexcodeParser.ruleNames; }
    get serializedATN() { return ApexcodeParser._serializedATN; }
    compilationUnit() {
        let _localctx = new CompilationUnitContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, ApexcodeParser.RULE_compilationUnit);
        let _la;
        try {
            this.state = 161;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.T__0:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 152;
                        this.match(ApexcodeParser.T__0);
                        this.state = 153;
                        this.match(ApexcodeParser.EOF);
                    }
                    break;
                case ApexcodeParser.EOF:
                case ApexcodeParser.T__1:
                case ApexcodeParser.T__8:
                case ApexcodeParser.ABSTRACT:
                case ApexcodeParser.CLASS:
                case ApexcodeParser.ENUM:
                case ApexcodeParser.INTERFACE:
                case ApexcodeParser.PRIVATE:
                case ApexcodeParser.PUBLIC:
                case ApexcodeParser.VIRTUAL:
                case ApexcodeParser.GLOBAL:
                case ApexcodeParser.TRIGGER_KEYWORD:
                case ApexcodeParser.WEBSERVICE:
                case ApexcodeParser.WITHOUT_SHARING:
                case ApexcodeParser.WITH_SHARING:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 157;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexcodeParser.T__1 || _la === ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.CLASS - 50)) | (1 << (ApexcodeParser.ENUM - 50)) | (1 << (ApexcodeParser.INTERFACE - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.TRIGGER_KEYWORD - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 93)) | (1 << (ApexcodeParser.WITH_SHARING - 93)))) !== 0)) {
                            {
                                {
                                    this.state = 154;
                                    this.typeDeclaration();
                                }
                            }
                            this.state = 159;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 160;
                        this.match(ApexcodeParser.EOF);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    typeDeclaration() {
        let _localctx = new TypeDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, ApexcodeParser.RULE_typeDeclaration);
        let _la;
        try {
            this.state = 180;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 4, this._ctx)) {
                case 1:
                    _localctx = new TriggerDefContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 163;
                        this.triggerDeclaration();
                    }
                    break;
                case 2:
                    _localctx = new ClassDefContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 167;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 93)) | (1 << (ApexcodeParser.WITH_SHARING - 93)))) !== 0)) {
                            {
                                {
                                    this.state = 164;
                                    this.classOrInterfaceModifier();
                                }
                            }
                            this.state = 169;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 170;
                        this.classDeclaration();
                    }
                    break;
                case 3:
                    _localctx = new InterfaceDefContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 174;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 93)) | (1 << (ApexcodeParser.WITH_SHARING - 93)))) !== 0)) {
                            {
                                {
                                    this.state = 171;
                                    this.classOrInterfaceModifier();
                                }
                            }
                            this.state = 176;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 177;
                        this.interfaceDeclaration();
                    }
                    break;
                case 4:
                    _localctx = new EnumDefContext(_localctx);
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 178;
                        this.enumDeclaration();
                    }
                    break;
                case 5:
                    _localctx = new EmptyDefContext(_localctx);
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 179;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classOrInterfaceModifier() {
        let _localctx = new ClassOrInterfaceModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, ApexcodeParser.RULE_classOrInterfaceModifier);
        try {
            this.state = 185;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.T__8:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 182;
                        this.annotation();
                    }
                    break;
                case ApexcodeParser.ABSTRACT:
                case ApexcodeParser.PRIVATE:
                case ApexcodeParser.PUBLIC:
                case ApexcodeParser.VIRTUAL:
                case ApexcodeParser.GLOBAL:
                case ApexcodeParser.WEBSERVICE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 183;
                        this.classOrInterfaceVisibilityModifier();
                    }
                    break;
                case ApexcodeParser.WITHOUT_SHARING:
                case ApexcodeParser.WITH_SHARING:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 184;
                        this.classSharingModifier();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classOrInterfaceVisibilityModifier() {
        let _localctx = new ClassOrInterfaceVisibilityModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, ApexcodeParser.RULE_classOrInterfaceVisibilityModifier);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 187;
                _la = this._input.LA(1);
                if (!(((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || _la === ApexcodeParser.GLOBAL || _la === ApexcodeParser.WEBSERVICE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classSharingModifier() {
        let _localctx = new ClassSharingModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, ApexcodeParser.RULE_classSharingModifier);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 189;
                _la = this._input.LA(1);
                if (!(_la === ApexcodeParser.WITHOUT_SHARING || _la === ApexcodeParser.WITH_SHARING)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classDeclaration() {
        let _localctx = new ClassDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, ApexcodeParser.RULE_classDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 191;
                this.match(ApexcodeParser.CLASS);
                this.state = 192;
                this.className();
                this.state = 194;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.EXTENDS) {
                    {
                        this.state = 193;
                        this.extendsDeclaration();
                    }
                }
                this.state = 197;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.IMPLEMENTS) {
                    {
                        this.state = 196;
                        this.implementsDeclaration();
                    }
                }
                this.state = 199;
                this.match(ApexcodeParser.T__2);
                this.state = 200;
                this.classBody();
                this.state = 201;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    className() {
        let _localctx = new ClassNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, ApexcodeParser.RULE_className);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 203;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    extendsDeclaration() {
        let _localctx = new ExtendsDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, ApexcodeParser.RULE_extendsDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 205;
                this.match(ApexcodeParser.EXTENDS);
                this.state = 206;
                this.dataType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    implementsDeclaration() {
        let _localctx = new ImplementsDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, ApexcodeParser.RULE_implementsDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 208;
                this.match(ApexcodeParser.IMPLEMENTS);
                this.state = 209;
                this.dataType();
                this.state = 214;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 210;
                            this.match(ApexcodeParser.T__4);
                            this.state = 211;
                            this.dataType();
                        }
                    }
                    this.state = 216;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classBody() {
        let _localctx = new ClassBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, ApexcodeParser.RULE_classBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 222;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__1) | (1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.ABSTRACT - 49)) | (1 << (ApexcodeParser.CLASS - 49)) | (1 << (ApexcodeParser.ENUM - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.INTERFACE - 49)) | (1 << (ApexcodeParser.OVERRIDE - 49)) | (1 << (ApexcodeParser.PRIVATE - 49)) | (1 << (ApexcodeParser.PROTECTED - 49)) | (1 << (ApexcodeParser.PUBLIC - 49)) | (1 << (ApexcodeParser.STATIC - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VIRTUAL - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)) | (1 << (ApexcodeParser.BREAK - 49)) | (1 << (ApexcodeParser.CONTINUE - 49)) | (1 << (ApexcodeParser.DO - 49)) | (1 << (ApexcodeParser.FOR - 49)) | (1 << (ApexcodeParser.IF - 49)) | (1 << (ApexcodeParser.RETURN - 49)) | (1 << (ApexcodeParser.THROW - 49)) | (1 << (ApexcodeParser.TRY - 49)))) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (ApexcodeParser.WHILE - 83)) | (1 << (ApexcodeParser.DB_DELETE - 83)) | (1 << (ApexcodeParser.DB_INSERT - 83)) | (1 << (ApexcodeParser.DB_MERGE - 83)) | (1 << (ApexcodeParser.DB_UNDELETE - 83)) | (1 << (ApexcodeParser.DB_UPDATE - 83)) | (1 << (ApexcodeParser.DB_UPSERT - 83)) | (1 << (ApexcodeParser.GLOBAL - 83)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 83)) | (1 << (ApexcodeParser.TRIGGER_KEYWORD - 83)) | (1 << (ApexcodeParser.TESTMETHOD - 83)) | (1 << (ApexcodeParser.WEBSERVICE - 83)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 83)) | (1 << (ApexcodeParser.WITH_SHARING - 83)) | (1 << (ApexcodeParser.StringLiteral - 83)) | (1 << (ApexcodeParser.SoqlLiteral - 83)) | (1 << (ApexcodeParser.SoslLiteral - 83)) | (1 << (ApexcodeParser.IntegerLiteral - 83)) | (1 << (ApexcodeParser.FloatingPointLiteral - 83)) | (1 << (ApexcodeParser.Identifier - 83)))) !== 0)) {
                    {
                        this.state = 220;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {
                            case 1:
                                {
                                    this.state = 217;
                                    this.staticCodeBlock();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 218;
                                    this.classBodyMember();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 219;
                                    this.blockStatement();
                                }
                                break;
                        }
                    }
                    this.state = 224;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classBodyMember() {
        let _localctx = new ClassBodyMemberContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, ApexcodeParser.RULE_classBodyMember);
        try {
            this.state = 231;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 225;
                        this.enumDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 226;
                        this.classConstructor();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 227;
                        this.classMethod();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 228;
                        this.classVariable();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 229;
                        this.classProperty();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 230;
                        this.typeDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classConstructor() {
        let _localctx = new ClassConstructorContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, ApexcodeParser.RULE_classConstructor);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 237;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__8 || ((((_la - 60)) & ~0x1F) === 0 && ((1 << (_la - 60)) & ((1 << (ApexcodeParser.OVERRIDE - 60)) | (1 << (ApexcodeParser.PRIVATE - 60)) | (1 << (ApexcodeParser.PROTECTED - 60)) | (1 << (ApexcodeParser.PUBLIC - 60)) | (1 << (ApexcodeParser.VIRTUAL - 60)))) !== 0) || _la === ApexcodeParser.GLOBAL) {
                    {
                        this.state = 235;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case ApexcodeParser.T__8:
                                {
                                    this.state = 233;
                                    this.annotation();
                                }
                                break;
                            case ApexcodeParser.OVERRIDE:
                            case ApexcodeParser.PRIVATE:
                            case ApexcodeParser.PROTECTED:
                            case ApexcodeParser.PUBLIC:
                            case ApexcodeParser.VIRTUAL:
                            case ApexcodeParser.GLOBAL:
                                {
                                    this.state = 234;
                                    this.classConstructorModifier();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 239;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 240;
                this.qualifiedName();
                this.state = 241;
                this.match(ApexcodeParser.T__5);
                this.state = 243;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.FINAL || _la === ApexcodeParser.VOID || _la === ApexcodeParser.Identifier) {
                    {
                        this.state = 242;
                        this.methodParameters();
                    }
                }
                this.state = 245;
                this.match(ApexcodeParser.T__6);
                this.state = 246;
                this.methodBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classConstructorModifier() {
        let _localctx = new ClassConstructorModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, ApexcodeParser.RULE_classConstructorModifier);
        let _la;
        try {
            this.state = 251;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.PRIVATE:
                case ApexcodeParser.PROTECTED:
                case ApexcodeParser.PUBLIC:
                case ApexcodeParser.GLOBAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 248;
                        _la = this._input.LA(1);
                        if (!(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la === ApexcodeParser.GLOBAL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case ApexcodeParser.OVERRIDE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 249;
                        this.match(ApexcodeParser.OVERRIDE);
                    }
                    break;
                case ApexcodeParser.VIRTUAL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 250;
                        this.match(ApexcodeParser.VIRTUAL);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    interfaceDeclaration() {
        let _localctx = new InterfaceDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, ApexcodeParser.RULE_interfaceDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 253;
                this.match(ApexcodeParser.INTERFACE);
                this.state = 254;
                this.interfaceName();
                this.state = 256;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.EXTENDS) {
                    {
                        this.state = 255;
                        this.extendsDeclaration();
                    }
                }
                this.state = 258;
                this.match(ApexcodeParser.T__2);
                this.state = 259;
                this.interfaceBody();
                this.state = 260;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    interfaceName() {
        let _localctx = new InterfaceNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, ApexcodeParser.RULE_interfaceName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 262;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    interfaceBody() {
        let _localctx = new InterfaceBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, ApexcodeParser.RULE_interfaceBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 269;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.OVERRIDE - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PROTECTED - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.STATIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)) | (1 << (ApexcodeParser.VOID - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.TESTMETHOD - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.Identifier - 93)))) !== 0)) {
                    {
                        {
                            this.state = 264;
                            this.methodHeader();
                            this.state = 265;
                            this.match(ApexcodeParser.T__1);
                        }
                    }
                    this.state = 271;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    triggerDeclaration() {
        let _localctx = new TriggerDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, ApexcodeParser.RULE_triggerDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 272;
                this.match(ApexcodeParser.TRIGGER_KEYWORD);
                this.state = 273;
                this.triggerName();
                this.state = 274;
                this.match(ApexcodeParser.TRIGGER_ON_KEYWORD);
                this.state = 275;
                this.triggerSObjectType();
                this.state = 276;
                this.match(ApexcodeParser.T__5);
                this.state = 277;
                this.match(ApexcodeParser.TRIGGER_EVENT);
                this.state = 282;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 278;
                            this.match(ApexcodeParser.T__4);
                            this.state = 279;
                            this.match(ApexcodeParser.TRIGGER_EVENT);
                        }
                    }
                    this.state = 284;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 285;
                this.match(ApexcodeParser.T__6);
                this.state = 286;
                this.match(ApexcodeParser.T__2);
                this.state = 287;
                this.classBody();
                this.state = 288;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    triggerName() {
        let _localctx = new TriggerNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, ApexcodeParser.RULE_triggerName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 290;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    triggerSObjectType() {
        let _localctx = new TriggerSObjectTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, ApexcodeParser.RULE_triggerSObjectType);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 292;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classVariable() {
        let _localctx = new ClassVariableContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, ApexcodeParser.RULE_classVariable);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 298;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__8 || ((((_la - 55)) & ~0x1F) === 0 && ((1 << (_la - 55)) & ((1 << (ApexcodeParser.FINAL - 55)) | (1 << (ApexcodeParser.PRIVATE - 55)) | (1 << (ApexcodeParser.PROTECTED - 55)) | (1 << (ApexcodeParser.PUBLIC - 55)) | (1 << (ApexcodeParser.STATIC - 55)) | (1 << (ApexcodeParser.TRANSIENT - 55)))) !== 0) || _la === ApexcodeParser.GLOBAL || _la === ApexcodeParser.WEBSERVICE) {
                    {
                        this.state = 296;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case ApexcodeParser.T__8:
                                {
                                    this.state = 294;
                                    this.annotation();
                                }
                                break;
                            case ApexcodeParser.FINAL:
                            case ApexcodeParser.PRIVATE:
                            case ApexcodeParser.PROTECTED:
                            case ApexcodeParser.PUBLIC:
                            case ApexcodeParser.STATIC:
                            case ApexcodeParser.TRANSIENT:
                            case ApexcodeParser.GLOBAL:
                            case ApexcodeParser.WEBSERVICE:
                                {
                                    this.state = 295;
                                    this.classVariableModifier();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 300;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 301;
                this.dataType();
                this.state = 302;
                this.variableName();
                this.state = 305;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.T__7) {
                    {
                        this.state = 303;
                        this.match(ApexcodeParser.T__7);
                        this.state = 304;
                        this.expression(0);
                    }
                }
                this.state = 315;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 307;
                            this.match(ApexcodeParser.T__4);
                            this.state = 308;
                            this.variableName();
                            this.state = 311;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === ApexcodeParser.T__7) {
                                {
                                    this.state = 309;
                                    this.match(ApexcodeParser.T__7);
                                    this.state = 310;
                                    this.expression(0);
                                }
                            }
                        }
                    }
                    this.state = 317;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 318;
                this.match(ApexcodeParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classVariableModifier() {
        let _localctx = new ClassVariableModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, ApexcodeParser.RULE_classVariableModifier);
        let _la;
        try {
            this.state = 325;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.PRIVATE:
                case ApexcodeParser.PROTECTED:
                case ApexcodeParser.PUBLIC:
                case ApexcodeParser.GLOBAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 320;
                        _la = this._input.LA(1);
                        if (!(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la === ApexcodeParser.GLOBAL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case ApexcodeParser.FINAL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 321;
                        this.match(ApexcodeParser.FINAL);
                    }
                    break;
                case ApexcodeParser.STATIC:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 322;
                        this.match(ApexcodeParser.STATIC);
                    }
                    break;
                case ApexcodeParser.TRANSIENT:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 323;
                        this.match(ApexcodeParser.TRANSIENT);
                    }
                    break;
                case ApexcodeParser.WEBSERVICE:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 324;
                        this.match(ApexcodeParser.WEBSERVICE);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    variableName() {
        let _localctx = new VariableNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, ApexcodeParser.RULE_variableName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 327;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classMethod() {
        let _localctx = new ClassMethodContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, ApexcodeParser.RULE_classMethod);
        try {
            this.state = 335;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 25, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 329;
                        this.methodHeader();
                        this.state = 330;
                        this.methodBody();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 332;
                        this.methodHeader();
                        this.state = 333;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    methodParameters() {
        let _localctx = new MethodParametersContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, ApexcodeParser.RULE_methodParameters);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 337;
                this.methodParameter();
                this.state = 342;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 338;
                            this.match(ApexcodeParser.T__4);
                            this.state = 339;
                            this.methodParameter();
                        }
                    }
                    this.state = 344;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    methodParameter() {
        let _localctx = new MethodParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, ApexcodeParser.RULE_methodParameter);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 346;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.FINAL) {
                    {
                        this.state = 345;
                        this.match(ApexcodeParser.FINAL);
                    }
                }
                this.state = 348;
                this.dataType();
                this.state = 349;
                this.methodParameterName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    methodParameterName() {
        let _localctx = new MethodParameterNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, ApexcodeParser.RULE_methodParameterName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 351;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    methodHeader() {
        let _localctx = new MethodHeaderContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, ApexcodeParser.RULE_methodHeader);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 357;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.OVERRIDE - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PROTECTED - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.STATIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.TESTMETHOD - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)))) !== 0)) {
                    {
                        this.state = 355;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case ApexcodeParser.T__8:
                                {
                                    this.state = 353;
                                    this.annotation();
                                }
                                break;
                            case ApexcodeParser.ABSTRACT:
                            case ApexcodeParser.OVERRIDE:
                            case ApexcodeParser.PRIVATE:
                            case ApexcodeParser.PROTECTED:
                            case ApexcodeParser.PUBLIC:
                            case ApexcodeParser.STATIC:
                            case ApexcodeParser.VIRTUAL:
                            case ApexcodeParser.GLOBAL:
                            case ApexcodeParser.TESTMETHOD:
                            case ApexcodeParser.WEBSERVICE:
                                {
                                    this.state = 354;
                                    this.methodHeaderModifier();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 359;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 360;
                this.dataType();
                this.state = 361;
                this.methodName();
                this.state = 362;
                this.match(ApexcodeParser.T__5);
                this.state = 364;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.FINAL || _la === ApexcodeParser.VOID || _la === ApexcodeParser.Identifier) {
                    {
                        this.state = 363;
                        this.methodParameters();
                    }
                }
                this.state = 366;
                this.match(ApexcodeParser.T__6);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    methodHeaderModifier() {
        let _localctx = new MethodHeaderModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, ApexcodeParser.RULE_methodHeaderModifier);
        let _la;
        try {
            this.state = 375;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.PRIVATE:
                case ApexcodeParser.PROTECTED:
                case ApexcodeParser.PUBLIC:
                case ApexcodeParser.GLOBAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 368;
                        _la = this._input.LA(1);
                        if (!(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la === ApexcodeParser.GLOBAL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case ApexcodeParser.OVERRIDE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 369;
                        this.match(ApexcodeParser.OVERRIDE);
                    }
                    break;
                case ApexcodeParser.ABSTRACT:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 370;
                        this.match(ApexcodeParser.ABSTRACT);
                    }
                    break;
                case ApexcodeParser.VIRTUAL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 371;
                        this.match(ApexcodeParser.VIRTUAL);
                    }
                    break;
                case ApexcodeParser.STATIC:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 372;
                        this.match(ApexcodeParser.STATIC);
                    }
                    break;
                case ApexcodeParser.TESTMETHOD:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 373;
                        this.match(ApexcodeParser.TESTMETHOD);
                    }
                    break;
                case ApexcodeParser.WEBSERVICE:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 374;
                        this.match(ApexcodeParser.WEBSERVICE);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    methodName() {
        let _localctx = new MethodNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, ApexcodeParser.RULE_methodName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 377;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    methodBody() {
        let _localctx = new MethodBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, ApexcodeParser.RULE_methodBody);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 379;
                this.codeBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classProperty() {
        let _localctx = new ClassPropertyContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, ApexcodeParser.RULE_classProperty);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 385;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__8 || ((((_la - 55)) & ~0x1F) === 0 && ((1 << (_la - 55)) & ((1 << (ApexcodeParser.FINAL - 55)) | (1 << (ApexcodeParser.PRIVATE - 55)) | (1 << (ApexcodeParser.PROTECTED - 55)) | (1 << (ApexcodeParser.PUBLIC - 55)) | (1 << (ApexcodeParser.STATIC - 55)) | (1 << (ApexcodeParser.TRANSIENT - 55)))) !== 0) || _la === ApexcodeParser.GLOBAL) {
                    {
                        this.state = 383;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case ApexcodeParser.T__8:
                                {
                                    this.state = 381;
                                    this.annotation();
                                }
                                break;
                            case ApexcodeParser.FINAL:
                            case ApexcodeParser.PRIVATE:
                            case ApexcodeParser.PROTECTED:
                            case ApexcodeParser.PUBLIC:
                            case ApexcodeParser.STATIC:
                            case ApexcodeParser.TRANSIENT:
                            case ApexcodeParser.GLOBAL:
                                {
                                    this.state = 382;
                                    this.propertyModifier();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 387;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 388;
                this.dataType();
                this.state = 389;
                this.propertyName();
                this.state = 390;
                this.match(ApexcodeParser.T__2);
                this.state = 393;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 393;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {
                            case 1:
                                {
                                    this.state = 391;
                                    this.propertyGet();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 392;
                                    this.propertySet();
                                }
                                break;
                        }
                    }
                    this.state = 395;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)) | (1 << (ApexcodeParser.STATIC - 61)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.GET_EMPTY - 93)) | (1 << (ApexcodeParser.GET_OPEN_CURLY - 93)) | (1 << (ApexcodeParser.SET_EMPTY - 93)) | (1 << (ApexcodeParser.SET_OPEN_CURLY - 93)))) !== 0));
                this.state = 397;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    propertyModifier() {
        let _localctx = new PropertyModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, ApexcodeParser.RULE_propertyModifier);
        let _la;
        try {
            this.state = 403;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.PRIVATE:
                case ApexcodeParser.PROTECTED:
                case ApexcodeParser.PUBLIC:
                case ApexcodeParser.GLOBAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 399;
                        _la = this._input.LA(1);
                        if (!(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la === ApexcodeParser.GLOBAL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case ApexcodeParser.FINAL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 400;
                        this.match(ApexcodeParser.FINAL);
                    }
                    break;
                case ApexcodeParser.STATIC:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 401;
                        this.match(ApexcodeParser.STATIC);
                    }
                    break;
                case ApexcodeParser.TRANSIENT:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 402;
                        this.match(ApexcodeParser.TRANSIENT);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    propertyName() {
        let _localctx = new PropertyNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, ApexcodeParser.RULE_propertyName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 405;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    propertyGet() {
        let _localctx = new PropertyGetContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, ApexcodeParser.RULE_propertyGet);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 410;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)) | (1 << (ApexcodeParser.STATIC - 61)))) !== 0) || _la === ApexcodeParser.GLOBAL) {
                    {
                        {
                            this.state = 407;
                            this.propertyGetSetModifier();
                        }
                    }
                    this.state = 412;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 422;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexcodeParser.GET_EMPTY:
                        {
                            this.state = 413;
                            this.match(ApexcodeParser.GET_EMPTY);
                        }
                        break;
                    case ApexcodeParser.GET_OPEN_CURLY:
                        {
                            this.state = 414;
                            this.match(ApexcodeParser.GET_OPEN_CURLY);
                            this.state = 418;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__1) | (1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)) | (1 << (ApexcodeParser.BREAK - 49)) | (1 << (ApexcodeParser.CONTINUE - 49)) | (1 << (ApexcodeParser.DO - 49)) | (1 << (ApexcodeParser.FOR - 49)) | (1 << (ApexcodeParser.IF - 49)) | (1 << (ApexcodeParser.RETURN - 49)) | (1 << (ApexcodeParser.THROW - 49)) | (1 << (ApexcodeParser.TRY - 49)))) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (ApexcodeParser.WHILE - 83)) | (1 << (ApexcodeParser.DB_DELETE - 83)) | (1 << (ApexcodeParser.DB_INSERT - 83)) | (1 << (ApexcodeParser.DB_MERGE - 83)) | (1 << (ApexcodeParser.DB_UNDELETE - 83)) | (1 << (ApexcodeParser.DB_UPDATE - 83)) | (1 << (ApexcodeParser.DB_UPSERT - 83)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 83)) | (1 << (ApexcodeParser.StringLiteral - 83)) | (1 << (ApexcodeParser.SoqlLiteral - 83)) | (1 << (ApexcodeParser.SoslLiteral - 83)) | (1 << (ApexcodeParser.IntegerLiteral - 83)) | (1 << (ApexcodeParser.FloatingPointLiteral - 83)) | (1 << (ApexcodeParser.Identifier - 83)))) !== 0)) {
                                {
                                    {
                                        this.state = 415;
                                        this.blockStatement();
                                    }
                                }
                                this.state = 420;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 421;
                            this.match(ApexcodeParser.T__3);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    propertySet() {
        let _localctx = new PropertySetContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, ApexcodeParser.RULE_propertySet);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 427;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)) | (1 << (ApexcodeParser.STATIC - 61)))) !== 0) || _la === ApexcodeParser.GLOBAL) {
                    {
                        {
                            this.state = 424;
                            this.propertyGetSetModifier();
                        }
                    }
                    this.state = 429;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 439;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexcodeParser.SET_EMPTY:
                        {
                            this.state = 430;
                            this.match(ApexcodeParser.SET_EMPTY);
                        }
                        break;
                    case ApexcodeParser.SET_OPEN_CURLY:
                        {
                            this.state = 431;
                            this.match(ApexcodeParser.SET_OPEN_CURLY);
                            this.state = 435;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__1) | (1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)) | (1 << (ApexcodeParser.BREAK - 49)) | (1 << (ApexcodeParser.CONTINUE - 49)) | (1 << (ApexcodeParser.DO - 49)) | (1 << (ApexcodeParser.FOR - 49)) | (1 << (ApexcodeParser.IF - 49)) | (1 << (ApexcodeParser.RETURN - 49)) | (1 << (ApexcodeParser.THROW - 49)) | (1 << (ApexcodeParser.TRY - 49)))) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (ApexcodeParser.WHILE - 83)) | (1 << (ApexcodeParser.DB_DELETE - 83)) | (1 << (ApexcodeParser.DB_INSERT - 83)) | (1 << (ApexcodeParser.DB_MERGE - 83)) | (1 << (ApexcodeParser.DB_UNDELETE - 83)) | (1 << (ApexcodeParser.DB_UPDATE - 83)) | (1 << (ApexcodeParser.DB_UPSERT - 83)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 83)) | (1 << (ApexcodeParser.StringLiteral - 83)) | (1 << (ApexcodeParser.SoqlLiteral - 83)) | (1 << (ApexcodeParser.SoslLiteral - 83)) | (1 << (ApexcodeParser.IntegerLiteral - 83)) | (1 << (ApexcodeParser.FloatingPointLiteral - 83)) | (1 << (ApexcodeParser.Identifier - 83)))) !== 0)) {
                                {
                                    {
                                        this.state = 432;
                                        this.blockStatement();
                                    }
                                }
                                this.state = 437;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 438;
                            this.match(ApexcodeParser.T__3);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    propertyGetSetModifier() {
        let _localctx = new PropertyGetSetModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, ApexcodeParser.RULE_propertyGetSetModifier);
        let _la;
        try {
            this.state = 443;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.PRIVATE:
                case ApexcodeParser.PROTECTED:
                case ApexcodeParser.PUBLIC:
                case ApexcodeParser.GLOBAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 441;
                        _la = this._input.LA(1);
                        if (!(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la === ApexcodeParser.GLOBAL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case ApexcodeParser.STATIC:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 442;
                        this.match(ApexcodeParser.STATIC);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    enumDeclaration() {
        let _localctx = new EnumDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, ApexcodeParser.RULE_enumDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 93)) | (1 << (ApexcodeParser.WITH_SHARING - 93)))) !== 0)) {
                    {
                        {
                            this.state = 445;
                            this.classOrInterfaceModifier();
                        }
                    }
                    this.state = 450;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 451;
                this.match(ApexcodeParser.ENUM);
                this.state = 452;
                this.enumName();
                this.state = 453;
                this.match(ApexcodeParser.T__2);
                this.state = 455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.Identifier) {
                    {
                        this.state = 454;
                        this.enumConstants();
                    }
                }
                this.state = 457;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    enumName() {
        let _localctx = new EnumNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, ApexcodeParser.RULE_enumName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 459;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    enumConstants() {
        let _localctx = new EnumConstantsContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, ApexcodeParser.RULE_enumConstants);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 461;
                this.enumConstant();
                this.state = 466;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 462;
                            this.match(ApexcodeParser.T__4);
                            this.state = 463;
                            this.enumConstant();
                        }
                    }
                    this.state = 468;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    enumConstant() {
        let _localctx = new EnumConstantContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, ApexcodeParser.RULE_enumConstant);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 469;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    annotation() {
        let _localctx = new AnnotationContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, ApexcodeParser.RULE_annotation);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 471;
                this.match(ApexcodeParser.T__8);
                this.state = 472;
                this.annotationName();
                this.state = 479;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.T__5) {
                    {
                        this.state = 473;
                        this.match(ApexcodeParser.T__5);
                        this.state = 476;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {
                            case 1:
                                {
                                    this.state = 474;
                                    this.annotationElementValuePairs();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 475;
                                    this.annotationElementValue();
                                }
                                break;
                        }
                        this.state = 478;
                        this.match(ApexcodeParser.T__6);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    annotationName() {
        let _localctx = new AnnotationNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, ApexcodeParser.RULE_annotationName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 481;
                this.match(ApexcodeParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    annotationElementValuePairs() {
        let _localctx = new AnnotationElementValuePairsContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, ApexcodeParser.RULE_annotationElementValuePairs);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 483;
                this.annotationElementValuePair();
                this.state = 487;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.Identifier) {
                    {
                        {
                            this.state = 484;
                            this.annotationElementValuePair();
                        }
                    }
                    this.state = 489;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    annotationElementValuePair() {
        let _localctx = new AnnotationElementValuePairContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, ApexcodeParser.RULE_annotationElementValuePair);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 490;
                this.match(ApexcodeParser.Identifier);
                this.state = 491;
                this.match(ApexcodeParser.T__7);
                this.state = 492;
                this.annotationElementValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    annotationElementValue() {
        let _localctx = new AnnotationElementValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, ApexcodeParser.RULE_annotationElementValue);
        try {
            this.state = 496;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.T__5:
                case ApexcodeParser.T__12:
                case ApexcodeParser.T__13:
                case ApexcodeParser.T__14:
                case ApexcodeParser.T__15:
                case ApexcodeParser.T__16:
                case ApexcodeParser.BooleanLiteral:
                case ApexcodeParser.NULL:
                case ApexcodeParser.SUPER:
                case ApexcodeParser.THIS:
                case ApexcodeParser.VOID:
                case ApexcodeParser.NEW:
                case ApexcodeParser.StringLiteral:
                case ApexcodeParser.SoqlLiteral:
                case ApexcodeParser.SoslLiteral:
                case ApexcodeParser.IntegerLiteral:
                case ApexcodeParser.FloatingPointLiteral:
                case ApexcodeParser.Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 494;
                        this.expression(0);
                    }
                    break;
                case ApexcodeParser.T__8:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 495;
                        this.annotation();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    expression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new ExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 90;
        this.enterRecursionRule(_localctx, 90, ApexcodeParser.RULE_expression, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 518;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 51, this._ctx)) {
                    case 1:
                        {
                            _localctx = new PrimaryExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 499;
                            this.primary();
                        }
                        break;
                    case 2:
                        {
                            _localctx = new CreatorExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 500;
                            this.match(ApexcodeParser.NEW);
                            this.state = 501;
                            this.creator();
                        }
                        break;
                    case 3:
                        {
                            _localctx = new TypeCastComplexExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 502;
                            this.match(ApexcodeParser.T__5);
                            this.state = 503;
                            this.typeArguments();
                            this.state = 504;
                            this.match(ApexcodeParser.T__6);
                            this.state = 505;
                            this.expression(19);
                        }
                        break;
                    case 4:
                        {
                            _localctx = new PreIncrementExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 507;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === ApexcodeParser.T__12 || _la === ApexcodeParser.T__13)) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 508;
                            this.expression(17);
                        }
                        break;
                    case 5:
                        {
                            _localctx = new UnaryExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 509;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === ApexcodeParser.T__14 || _la === ApexcodeParser.T__15)) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 510;
                            this.expression(16);
                        }
                        break;
                    case 6:
                        {
                            _localctx = new UnaryInequalityExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 511;
                            _localctx._op = this.match(ApexcodeParser.T__16);
                            this.state = 512;
                            this.expression(15);
                        }
                        break;
                    case 7:
                        {
                            _localctx = new TypeCastSimpleExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 513;
                            this.match(ApexcodeParser.T__5);
                            this.state = 514;
                            this.dataType();
                            this.state = 515;
                            this.match(ApexcodeParser.T__6);
                            this.state = 516;
                            this.expression(2);
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 601;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null)
                            this.triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            this.state = 599;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 57, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new ExprDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 520;
                                        if (!(this.precpred(this._ctx, 23)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                                        this.state = 521;
                                        this.match(ApexcodeParser.T__9);
                                        this.state = 522;
                                        this.expression(24);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new InfixMulExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 523;
                                        if (!(this.precpred(this._ctx, 14)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                                        this.state = 524;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__18) | (1 << ApexcodeParser.T__19))) !== 0))) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 525;
                                        this.expression(15);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new InfixAddExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 526;
                                        if (!(this.precpred(this._ctx, 13)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                                        this.state = 527;
                                        _la = this._input.LA(1);
                                        if (!(_la === ApexcodeParser.T__14 || _la === ApexcodeParser.T__15)) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 528;
                                        this.expression(14);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new InfixShiftExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 529;
                                        if (!(this.precpred(this._ctx, 12)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                                        this.state = 537;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 52, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 530;
                                                    this.match(ApexcodeParser.T__20);
                                                    this.state = 531;
                                                    this.match(ApexcodeParser.T__20);
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.state = 532;
                                                    this.match(ApexcodeParser.T__21);
                                                    this.state = 533;
                                                    this.match(ApexcodeParser.T__21);
                                                    this.state = 534;
                                                    this.match(ApexcodeParser.T__21);
                                                }
                                                break;
                                            case 3:
                                                {
                                                    this.state = 535;
                                                    this.match(ApexcodeParser.T__21);
                                                    this.state = 536;
                                                    this.match(ApexcodeParser.T__21);
                                                }
                                                break;
                                        }
                                        this.state = 539;
                                        this.expression(13);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new ComparisonExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 540;
                                        if (!(this.precpred(this._ctx, 11)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                                        this.state = 553;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 55, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 541;
                                                    this.match(ApexcodeParser.T__20);
                                                    this.state = 543;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                    if (_la === ApexcodeParser.WS) {
                                                        {
                                                            this.state = 542;
                                                            this.match(ApexcodeParser.WS);
                                                        }
                                                    }
                                                    this.state = 545;
                                                    this.match(ApexcodeParser.T__7);
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.state = 546;
                                                    this.match(ApexcodeParser.T__21);
                                                    this.state = 548;
                                                    this._errHandler.sync(this);
                                                    _la = this._input.LA(1);
                                                    if (_la === ApexcodeParser.WS) {
                                                        {
                                                            this.state = 547;
                                                            this.match(ApexcodeParser.WS);
                                                        }
                                                    }
                                                    this.state = 550;
                                                    this.match(ApexcodeParser.T__7);
                                                }
                                                break;
                                            case 3:
                                                {
                                                    this.state = 551;
                                                    this.match(ApexcodeParser.T__21);
                                                }
                                                break;
                                            case 4:
                                                {
                                                    this.state = 552;
                                                    this.match(ApexcodeParser.T__20);
                                                }
                                                break;
                                        }
                                        this.state = 555;
                                        this.expression(12);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new InfixEqualityExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 556;
                                        if (!(this.precpred(this._ctx, 9)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                                        this.state = 557;
                                        _la = this._input.LA(1);
                                        if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__22) | (1 << ApexcodeParser.T__23) | (1 << ApexcodeParser.T__24) | (1 << ApexcodeParser.T__25))) !== 0))) {
                                            this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 558;
                                        this.expression(10);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new BitwiseAndExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 559;
                                        if (!(this.precpred(this._ctx, 8)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                                        this.state = 560;
                                        this.match(ApexcodeParser.T__26);
                                        this.state = 561;
                                        this.expression(9);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new BitwiseXorExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 562;
                                        if (!(this.precpred(this._ctx, 7)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                                        this.state = 563;
                                        this.match(ApexcodeParser.T__27);
                                        this.state = 564;
                                        this.expression(8);
                                    }
                                    break;
                                case 9:
                                    {
                                        _localctx = new BitwiseOrExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 565;
                                        if (!(this.precpred(this._ctx, 6)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                                        this.state = 566;
                                        this.match(ApexcodeParser.T__28);
                                        this.state = 567;
                                        this.expression(7);
                                    }
                                    break;
                                case 10:
                                    {
                                        _localctx = new InfixAndExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 568;
                                        if (!(this.precpred(this._ctx, 5)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                                        this.state = 569;
                                        this.match(ApexcodeParser.T__29);
                                        this.state = 570;
                                        this.expression(6);
                                    }
                                    break;
                                case 11:
                                    {
                                        _localctx = new InfixOrExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 571;
                                        if (!(this.precpred(this._ctx, 4)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                                        this.state = 572;
                                        this.match(ApexcodeParser.T__30);
                                        this.state = 573;
                                        this.expression(5);
                                    }
                                    break;
                                case 12:
                                    {
                                        _localctx = new TernaryExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 574;
                                        if (!(this.precpred(this._ctx, 3)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                        this.state = 575;
                                        this.match(ApexcodeParser.T__31);
                                        this.state = 576;
                                        this.expression(0);
                                        this.state = 577;
                                        this.match(ApexcodeParser.T__32);
                                        this.state = 578;
                                        this.expression(4);
                                    }
                                    break;
                                case 13:
                                    {
                                        _localctx = new AssignmentExprContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 580;
                                        if (!(this.precpred(this._ctx, 1)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                        this.state = 581;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === ApexcodeParser.T__7 || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexcodeParser.T__33 - 34)) | (1 << (ApexcodeParser.T__34 - 34)) | (1 << (ApexcodeParser.T__35 - 34)) | (1 << (ApexcodeParser.T__36 - 34)) | (1 << (ApexcodeParser.T__37 - 34)) | (1 << (ApexcodeParser.T__38 - 34)) | (1 << (ApexcodeParser.T__39 - 34)) | (1 << (ApexcodeParser.T__40 - 34)) | (1 << (ApexcodeParser.T__41 - 34)) | (1 << (ApexcodeParser.T__42 - 34)))) !== 0))) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 582;
                                        _localctx._right = this.expression(1);
                                    }
                                    break;
                                case 14:
                                    {
                                        _localctx = new MethodCallExprContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._func = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 583;
                                        if (!(this.precpred(this._ctx, 22)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                                        this.state = 584;
                                        this.match(ApexcodeParser.T__5);
                                        this.state = 586;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                                            {
                                                this.state = 585;
                                                this.expressionList();
                                            }
                                        }
                                        this.state = 588;
                                        this.match(ApexcodeParser.T__6);
                                    }
                                    break;
                                case 15:
                                    {
                                        _localctx = new ArrayIndexExprContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._arr = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 589;
                                        if (!(this.precpred(this._ctx, 21)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                                        this.state = 590;
                                        this.match(ApexcodeParser.T__10);
                                        this.state = 591;
                                        this.expression(0);
                                        this.state = 592;
                                        this.match(ApexcodeParser.T__11);
                                    }
                                    break;
                                case 16:
                                    {
                                        _localctx = new PostIncrementExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 594;
                                        if (!(this.precpred(this._ctx, 18)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                                        this.state = 595;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === ApexcodeParser.T__12 || _la === ApexcodeParser.T__13)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                                case 17:
                                    {
                                        _localctx = new InstanceOfExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
                                        this.state = 596;
                                        if (!(this.precpred(this._ctx, 10)))
                                            throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                                        this.state = 597;
                                        this.match(ApexcodeParser.INSTANCE_OF);
                                        this.state = 598;
                                        this.dataType();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 603;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    primary() {
        let _localctx = new PrimaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, ApexcodeParser.RULE_primary);
        try {
            this.state = 613;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 59, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 604;
                        this.parExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 605;
                        this.match(ApexcodeParser.THIS);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 606;
                        this.match(ApexcodeParser.SUPER);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 607;
                        this.literal();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 608;
                        this.match(ApexcodeParser.Identifier);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 609;
                        this.dataType();
                        this.state = 610;
                        this.match(ApexcodeParser.T__9);
                        this.state = 611;
                        this.match(ApexcodeParser.CLASS);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    parExpression() {
        let _localctx = new ParExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, ApexcodeParser.RULE_parExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 615;
                this.match(ApexcodeParser.T__5);
                this.state = 616;
                this.expression(0);
                this.state = 617;
                this.match(ApexcodeParser.T__6);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    expressionList() {
        let _localctx = new ExpressionListContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, ApexcodeParser.RULE_expressionList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 619;
                this.expression(0);
                this.state = 624;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 620;
                            this.match(ApexcodeParser.T__4);
                            this.state = 621;
                            this.expression(0);
                        }
                    }
                    this.state = 626;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    runas_expression() {
        let _localctx = new Runas_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, ApexcodeParser.RULE_runas_expression);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 627;
                this.match(ApexcodeParser.SYSTEM_RUNAS);
                this.state = 628;
                this.match(ApexcodeParser.T__5);
                this.state = 630;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                    {
                        this.state = 629;
                        this.expressionList();
                    }
                }
                this.state = 632;
                this.match(ApexcodeParser.T__6);
                this.state = 633;
                this.codeBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    db_shortcut_expression() {
        let _localctx = new Db_shortcut_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, ApexcodeParser.RULE_db_shortcut_expression);
        let _la;
        try {
            this.state = 645;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 62, this._ctx)) {
                case 1:
                    _localctx = new DbShortcutMergeContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 635;
                        this.match(ApexcodeParser.DB_MERGE);
                        this.state = 636;
                        this.expression(0);
                        this.state = 637;
                        this.expression(0);
                    }
                    break;
                case 2:
                    _localctx = new DbShortcutTwoOpContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 639;
                        this.match(ApexcodeParser.DB_UPSERT);
                        this.state = 640;
                        this.expression(0);
                        this.state = 641;
                        this.expression(0);
                    }
                    break;
                case 3:
                    _localctx = new DbShortcutOneOpContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 643;
                        _la = this._input.LA(1);
                        if (!(((((_la - 86)) & ~0x1F) === 0 && ((1 << (_la - 86)) & ((1 << (ApexcodeParser.DB_DELETE - 86)) | (1 << (ApexcodeParser.DB_INSERT - 86)) | (1 << (ApexcodeParser.DB_UNDELETE - 86)) | (1 << (ApexcodeParser.DB_UPDATE - 86)) | (1 << (ApexcodeParser.DB_UPSERT - 86)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 644;
                        this.expression(0);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    creator() {
        let _localctx = new CreatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, ApexcodeParser.RULE_creator);
        try {
            this.state = 661;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 64, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 647;
                        this.dataType();
                        this.state = 648;
                        this.match(ApexcodeParser.T__5);
                        this.state = 649;
                        this.match(ApexcodeParser.T__6);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 651;
                        this.dataType();
                        this.state = 652;
                        this.parExpression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 654;
                        this.dataType();
                        this.state = 659;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 63, this._ctx)) {
                            case 1:
                                {
                                    this.state = 655;
                                    this.classCreatorRest();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 656;
                                    this.arrayCreatorRest();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 657;
                                    this.mapCreatorRest();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 658;
                                    this.setCreatorRest();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    typeArguments() {
        let _localctx = new TypeArgumentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, ApexcodeParser.RULE_typeArguments);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 663;
                this.match(ApexcodeParser.T__20);
                this.state = 664;
                this.dataType();
                this.state = 669;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 665;
                            this.match(ApexcodeParser.T__4);
                            this.state = 666;
                            this.dataType();
                        }
                    }
                    this.state = 671;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 672;
                this.match(ApexcodeParser.T__21);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    arrayCreatorRest() {
        let _localctx = new ArrayCreatorRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, ApexcodeParser.RULE_arrayCreatorRest);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 674;
                this.match(ApexcodeParser.T__10);
                this.state = 702;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case ApexcodeParser.T__11:
                        {
                            this.state = 675;
                            this.match(ApexcodeParser.T__11);
                            this.state = 680;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === ApexcodeParser.T__10) {
                                {
                                    {
                                        this.state = 676;
                                        this.match(ApexcodeParser.T__10);
                                        this.state = 677;
                                        this.match(ApexcodeParser.T__11);
                                    }
                                }
                                this.state = 682;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 683;
                            this.arrayInitializer();
                        }
                        break;
                    case ApexcodeParser.T__5:
                    case ApexcodeParser.T__12:
                    case ApexcodeParser.T__13:
                    case ApexcodeParser.T__14:
                    case ApexcodeParser.T__15:
                    case ApexcodeParser.T__16:
                    case ApexcodeParser.BooleanLiteral:
                    case ApexcodeParser.NULL:
                    case ApexcodeParser.SUPER:
                    case ApexcodeParser.THIS:
                    case ApexcodeParser.VOID:
                    case ApexcodeParser.NEW:
                    case ApexcodeParser.StringLiteral:
                    case ApexcodeParser.SoqlLiteral:
                    case ApexcodeParser.SoslLiteral:
                    case ApexcodeParser.IntegerLiteral:
                    case ApexcodeParser.FloatingPointLiteral:
                    case ApexcodeParser.Identifier:
                        {
                            this.state = 684;
                            this.expression(0);
                            this.state = 685;
                            this.match(ApexcodeParser.T__11);
                            this.state = 692;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 686;
                                            this.match(ApexcodeParser.T__10);
                                            this.state = 687;
                                            this.expression(0);
                                            this.state = 688;
                                            this.match(ApexcodeParser.T__11);
                                        }
                                    }
                                }
                                this.state = 694;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
                            }
                            this.state = 699;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 695;
                                            this.match(ApexcodeParser.T__10);
                                            this.state = 696;
                                            this.match(ApexcodeParser.T__11);
                                        }
                                    }
                                }
                                this.state = 701;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    mapCreatorRest() {
        let _localctx = new MapCreatorRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, ApexcodeParser.RULE_mapCreatorRest);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 704;
                this.match(ApexcodeParser.T__2);
                this.state = 729;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                    {
                        this.state = 707;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 70, this._ctx)) {
                            case 1:
                                {
                                    this.state = 705;
                                    this.literal();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 706;
                                    this.expression(0);
                                }
                                break;
                        }
                        this.state = 709;
                        this.match(ApexcodeParser.T__43);
                        this.state = 712;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 71, this._ctx)) {
                            case 1:
                                {
                                    this.state = 710;
                                    this.literal();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 711;
                                    this.expression(0);
                                }
                                break;
                        }
                        this.state = 726;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === ApexcodeParser.T__4) {
                            {
                                {
                                    this.state = 714;
                                    this.match(ApexcodeParser.T__4);
                                    this.state = 717;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 72, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 715;
                                                this.literal();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 716;
                                                this.expression(0);
                                            }
                                            break;
                                    }
                                    this.state = 719;
                                    this.match(ApexcodeParser.T__43);
                                    this.state = 722;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 73, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 720;
                                                this.literal();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 721;
                                                this.expression(0);
                                            }
                                            break;
                                    }
                                }
                            }
                            this.state = 728;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
                this.state = 731;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    setCreatorRest() {
        let _localctx = new SetCreatorRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, ApexcodeParser.RULE_setCreatorRest);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 733;
                this.match(ApexcodeParser.T__2);
                this.state = 736;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 76, this._ctx)) {
                    case 1:
                        {
                            this.state = 734;
                            this.literal();
                        }
                        break;
                    case 2:
                        {
                            this.state = 735;
                            this.expression(0);
                        }
                        break;
                }
                this.state = 745;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 738;
                            this.match(ApexcodeParser.T__4);
                            this.state = 741;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 77, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 739;
                                        this.literal();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 740;
                                        this.expression(0);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 747;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 748;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    classCreatorRest() {
        let _localctx = new ClassCreatorRestContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, ApexcodeParser.RULE_classCreatorRest);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 750;
                this.arguments();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    variableInitializer() {
        let _localctx = new VariableInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, ApexcodeParser.RULE_variableInitializer);
        try {
            this.state = 754;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.T__2:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 752;
                        this.arrayInitializer();
                    }
                    break;
                case ApexcodeParser.T__5:
                case ApexcodeParser.T__12:
                case ApexcodeParser.T__13:
                case ApexcodeParser.T__14:
                case ApexcodeParser.T__15:
                case ApexcodeParser.T__16:
                case ApexcodeParser.BooleanLiteral:
                case ApexcodeParser.NULL:
                case ApexcodeParser.SUPER:
                case ApexcodeParser.THIS:
                case ApexcodeParser.VOID:
                case ApexcodeParser.NEW:
                case ApexcodeParser.StringLiteral:
                case ApexcodeParser.SoqlLiteral:
                case ApexcodeParser.SoslLiteral:
                case ApexcodeParser.IntegerLiteral:
                case ApexcodeParser.FloatingPointLiteral:
                case ApexcodeParser.Identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 753;
                        this.expression(0);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    arrayInitializer() {
        let _localctx = new ArrayInitializerContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, ApexcodeParser.RULE_arrayInitializer);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 756;
                this.match(ApexcodeParser.T__2);
                this.state = 768;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                    {
                        this.state = 757;
                        this.variableInitializer();
                        this.state = 762;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 758;
                                        this.match(ApexcodeParser.T__4);
                                        this.state = 759;
                                        this.variableInitializer();
                                    }
                                }
                            }
                            this.state = 764;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
                        }
                        this.state = 766;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ApexcodeParser.T__4) {
                            {
                                this.state = 765;
                                this.match(ApexcodeParser.T__4);
                            }
                        }
                    }
                }
                this.state = 770;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    arguments() {
        let _localctx = new ArgumentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, ApexcodeParser.RULE_arguments);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 772;
                this.match(ApexcodeParser.T__5);
                this.state = 774;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                    {
                        this.state = 773;
                        this.expressionList();
                    }
                }
                this.state = 776;
                this.match(ApexcodeParser.T__6);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    codeBlock() {
        let _localctx = new CodeBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, ApexcodeParser.RULE_codeBlock);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 778;
                this.match(ApexcodeParser.T__2);
                this.state = 782;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__1) | (1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)) | (1 << (ApexcodeParser.BREAK - 49)) | (1 << (ApexcodeParser.CONTINUE - 49)) | (1 << (ApexcodeParser.DO - 49)) | (1 << (ApexcodeParser.FOR - 49)) | (1 << (ApexcodeParser.IF - 49)) | (1 << (ApexcodeParser.RETURN - 49)) | (1 << (ApexcodeParser.THROW - 49)) | (1 << (ApexcodeParser.TRY - 49)))) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (ApexcodeParser.WHILE - 83)) | (1 << (ApexcodeParser.DB_DELETE - 83)) | (1 << (ApexcodeParser.DB_INSERT - 83)) | (1 << (ApexcodeParser.DB_MERGE - 83)) | (1 << (ApexcodeParser.DB_UNDELETE - 83)) | (1 << (ApexcodeParser.DB_UPDATE - 83)) | (1 << (ApexcodeParser.DB_UPSERT - 83)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 83)) | (1 << (ApexcodeParser.StringLiteral - 83)) | (1 << (ApexcodeParser.SoqlLiteral - 83)) | (1 << (ApexcodeParser.SoslLiteral - 83)) | (1 << (ApexcodeParser.IntegerLiteral - 83)) | (1 << (ApexcodeParser.FloatingPointLiteral - 83)) | (1 << (ApexcodeParser.Identifier - 83)))) !== 0)) {
                    {
                        {
                            this.state = 779;
                            this.blockStatement();
                        }
                    }
                    this.state = 784;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 785;
                this.match(ApexcodeParser.T__3);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    staticCodeBlock() {
        let _localctx = new StaticCodeBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, ApexcodeParser.RULE_staticCodeBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 787;
                this.match(ApexcodeParser.STATIC);
                this.state = 788;
                this.codeBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    localVariableDeclaration() {
        let _localctx = new LocalVariableDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, ApexcodeParser.RULE_localVariableDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 793;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.FINAL || _la === ApexcodeParser.TRANSIENT) {
                    {
                        {
                            this.state = 790;
                            this.localVariableModifier();
                        }
                    }
                    this.state = 795;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 796;
                this.dataType();
                this.state = 797;
                this.variableName();
                this.state = 800;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ApexcodeParser.T__7) {
                    {
                        this.state = 798;
                        this.match(ApexcodeParser.T__7);
                        this.state = 799;
                        this.expression(0);
                    }
                }
                this.state = 810;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__4) {
                    {
                        {
                            this.state = 802;
                            this.match(ApexcodeParser.T__4);
                            this.state = 803;
                            this.variableName();
                            this.state = 806;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === ApexcodeParser.T__7) {
                                {
                                    this.state = 804;
                                    this.match(ApexcodeParser.T__7);
                                    this.state = 805;
                                    this.expression(0);
                                }
                            }
                        }
                    }
                    this.state = 812;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    localVariableModifier() {
        let _localctx = new LocalVariableModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, ApexcodeParser.RULE_localVariableModifier);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 813;
                _la = this._input.LA(1);
                if (!(_la === ApexcodeParser.FINAL || _la === ApexcodeParser.TRANSIENT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    blockStatement() {
        let _localctx = new BlockStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, ApexcodeParser.RULE_blockStatement);
        try {
            this.state = 819;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 89, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 815;
                        this.localVariableDeclaration();
                        this.state = 816;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 818;
                        this.statement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    qualifiedName() {
        let _localctx = new QualifiedNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, ApexcodeParser.RULE_qualifiedName);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 821;
                this.match(ApexcodeParser.Identifier);
                this.state = 826;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 822;
                                this.match(ApexcodeParser.T__9);
                                this.state = 823;
                                this.match(ApexcodeParser.Identifier);
                            }
                        }
                    }
                    this.state = 828;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    forControl() {
        let _localctx = new ForControlContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, ApexcodeParser.RULE_forControl);
        let _la;
        try {
            this.state = 841;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 94, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 829;
                        this.enhancedForControl();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 831;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                            {
                                this.state = 830;
                                this.forInit();
                            }
                        }
                        this.state = 833;
                        this.match(ApexcodeParser.T__1);
                        this.state = 835;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                            {
                                this.state = 834;
                                this.expression(0);
                            }
                        }
                        this.state = 837;
                        this.match(ApexcodeParser.T__1);
                        this.state = 839;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                            {
                                this.state = 838;
                                this.forUpdate();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    forInit() {
        let _localctx = new ForInitContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, ApexcodeParser.RULE_forInit);
        try {
            this.state = 845;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 95, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 843;
                        this.localVariableDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 844;
                        this.expressionList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    enhancedForControl() {
        let _localctx = new EnhancedForControlContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, ApexcodeParser.RULE_enhancedForControl);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 847;
                this.dataType();
                this.state = 848;
                this.variableName();
                this.state = 849;
                this.match(ApexcodeParser.T__32);
                this.state = 850;
                this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    forUpdate() {
        let _localctx = new ForUpdateContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, ApexcodeParser.RULE_forUpdate);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 852;
                this.expressionList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    catchClause() {
        let _localctx = new CatchClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, ApexcodeParser.RULE_catchClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 854;
                this.match(ApexcodeParser.CATCH);
                this.state = 855;
                this.match(ApexcodeParser.T__5);
                this.state = 856;
                this.catchType();
                this.state = 857;
                this.variableName();
                this.state = 858;
                this.match(ApexcodeParser.T__6);
                this.state = 859;
                this.codeBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    catchType() {
        let _localctx = new CatchTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, ApexcodeParser.RULE_catchType);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 861;
                this.qualifiedName();
                this.state = 866;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ApexcodeParser.T__28) {
                    {
                        {
                            this.state = 862;
                            this.match(ApexcodeParser.T__28);
                            this.state = 863;
                            this.qualifiedName();
                        }
                    }
                    this.state = 868;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    finallyBlock() {
        let _localctx = new FinallyBlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, ApexcodeParser.RULE_finallyBlock);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 869;
                this.match(ApexcodeParser.FINALLY);
                this.state = 870;
                this.codeBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    statement() {
        let _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, ApexcodeParser.RULE_statement);
        let _la;
        try {
            this.state = 930;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.T__2:
                    _localctx = new BlockStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 872;
                        this.codeBlock();
                    }
                    break;
                case ApexcodeParser.BREAK:
                    _localctx = new BreakStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 873;
                        this.match(ApexcodeParser.BREAK);
                        this.state = 874;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                case ApexcodeParser.CONTINUE:
                    _localctx = new ContinueStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 875;
                        this.match(ApexcodeParser.CONTINUE);
                        this.state = 876;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                case ApexcodeParser.DO:
                    _localctx = new DoWhileStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 877;
                        this.match(ApexcodeParser.DO);
                        this.state = 878;
                        this.statement();
                        this.state = 879;
                        this.match(ApexcodeParser.WHILE);
                        this.state = 880;
                        this.parExpression();
                        this.state = 881;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                case ApexcodeParser.FOR:
                    _localctx = new ForStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 883;
                        this.match(ApexcodeParser.FOR);
                        this.state = 884;
                        this.match(ApexcodeParser.T__5);
                        this.state = 885;
                        this.forControl();
                        this.state = 886;
                        this.match(ApexcodeParser.T__6);
                        this.state = 887;
                        this.statement();
                    }
                    break;
                case ApexcodeParser.IF:
                    _localctx = new IfElseStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 889;
                        this.match(ApexcodeParser.IF);
                        this.state = 890;
                        this.parExpression();
                        this.state = 891;
                        this.statement();
                        this.state = 894;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 97, this._ctx)) {
                            case 1:
                                {
                                    this.state = 892;
                                    this.match(ApexcodeParser.ELSE);
                                    this.state = 893;
                                    this.statement();
                                }
                                break;
                        }
                    }
                    break;
                case ApexcodeParser.RETURN:
                    _localctx = new ReturnStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 896;
                        this.match(ApexcodeParser.RETURN);
                        this.state = 898;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
                            {
                                this.state = 897;
                                this.expression(0);
                            }
                        }
                        this.state = 900;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                case ApexcodeParser.THROW:
                    _localctx = new ThrowStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 901;
                        this.match(ApexcodeParser.THROW);
                        this.state = 902;
                        this.expression(0);
                        this.state = 903;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                case ApexcodeParser.TRY:
                    _localctx = new TryCatchFinallyStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 905;
                        this.match(ApexcodeParser.TRY);
                        this.state = 906;
                        this.codeBlock();
                        this.state = 916;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case ApexcodeParser.CATCH:
                                {
                                    this.state = 908;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        {
                                            {
                                                this.state = 907;
                                                this.catchClause();
                                            }
                                        }
                                        this.state = 910;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === ApexcodeParser.CATCH);
                                    this.state = 913;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === ApexcodeParser.FINALLY) {
                                        {
                                            this.state = 912;
                                            this.finallyBlock();
                                        }
                                    }
                                }
                                break;
                            case ApexcodeParser.FINALLY:
                                {
                                    this.state = 915;
                                    this.finallyBlock();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    break;
                case ApexcodeParser.WHILE:
                    _localctx = new WhileStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 918;
                        this.match(ApexcodeParser.WHILE);
                        this.state = 919;
                        this.parExpression();
                        this.state = 920;
                        this.statement();
                    }
                    break;
                case ApexcodeParser.T__1:
                    _localctx = new EmptyStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 922;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                case ApexcodeParser.SYSTEM_RUNAS:
                    _localctx = new RunAsStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 923;
                        this.runas_expression();
                    }
                    break;
                case ApexcodeParser.DB_DELETE:
                case ApexcodeParser.DB_INSERT:
                case ApexcodeParser.DB_MERGE:
                case ApexcodeParser.DB_UNDELETE:
                case ApexcodeParser.DB_UPDATE:
                case ApexcodeParser.DB_UPSERT:
                    _localctx = new DbShortcutStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 924;
                        this.db_shortcut_expression();
                        this.state = 925;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                case ApexcodeParser.T__5:
                case ApexcodeParser.T__12:
                case ApexcodeParser.T__13:
                case ApexcodeParser.T__14:
                case ApexcodeParser.T__15:
                case ApexcodeParser.T__16:
                case ApexcodeParser.BooleanLiteral:
                case ApexcodeParser.NULL:
                case ApexcodeParser.SUPER:
                case ApexcodeParser.THIS:
                case ApexcodeParser.VOID:
                case ApexcodeParser.NEW:
                case ApexcodeParser.StringLiteral:
                case ApexcodeParser.SoqlLiteral:
                case ApexcodeParser.SoslLiteral:
                case ApexcodeParser.IntegerLiteral:
                case ApexcodeParser.FloatingPointLiteral:
                case ApexcodeParser.Identifier:
                    _localctx = new ExpressionStmtContext(_localctx);
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 927;
                        this.expression(0);
                        this.state = 928;
                        this.match(ApexcodeParser.T__1);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    literal() {
        let _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, ApexcodeParser.RULE_literal);
        try {
            this.state = 939;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ApexcodeParser.IntegerLiteral:
                    _localctx = new IntLiteralContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 932;
                        this.match(ApexcodeParser.IntegerLiteral);
                    }
                    break;
                case ApexcodeParser.FloatingPointLiteral:
                    _localctx = new FpLiteralContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 933;
                        this.match(ApexcodeParser.FloatingPointLiteral);
                    }
                    break;
                case ApexcodeParser.StringLiteral:
                    _localctx = new StrLiteralContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 934;
                        this.match(ApexcodeParser.StringLiteral);
                    }
                    break;
                case ApexcodeParser.BooleanLiteral:
                    _localctx = new BoolLiteralContext(_localctx);
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 935;
                        this.match(ApexcodeParser.BooleanLiteral);
                    }
                    break;
                case ApexcodeParser.NULL:
                    _localctx = new NullLiteralContext(_localctx);
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 936;
                        this.match(ApexcodeParser.NULL);
                    }
                    break;
                case ApexcodeParser.SoslLiteral:
                    _localctx = new SoslLiteralContext(_localctx);
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 937;
                        this.match(ApexcodeParser.SoslLiteral);
                    }
                    break;
                case ApexcodeParser.SoqlLiteral:
                    _localctx = new SoqlLiteralContext(_localctx);
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 938;
                        this.match(ApexcodeParser.SoqlLiteral);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    dataType() {
        let _localctx = new DataTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, ApexcodeParser.RULE_dataType);
        try {
            this.state = 950;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 105, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 941;
                        this.match(ApexcodeParser.VOID);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 942;
                        _localctx._arrayType = this.qualifiedName();
                        this.state = 943;
                        this.match(ApexcodeParser.T__10);
                        this.state = 944;
                        this.match(ApexcodeParser.T__11);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 946;
                        this.qualifiedName();
                        this.state = 948;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 104, this._ctx)) {
                            case 1:
                                {
                                    this.state = 947;
                                    this.typeArguments();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 45:
                return this.expression_sempred(_localctx, predIndex);
        }
        return true;
    }
    expression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 23);
            case 1:
                return this.precpred(this._ctx, 14);
            case 2:
                return this.precpred(this._ctx, 13);
            case 3:
                return this.precpred(this._ctx, 12);
            case 4:
                return this.precpred(this._ctx, 11);
            case 5:
                return this.precpred(this._ctx, 9);
            case 6:
                return this.precpred(this._ctx, 8);
            case 7:
                return this.precpred(this._ctx, 7);
            case 8:
                return this.precpred(this._ctx, 6);
            case 9:
                return this.precpred(this._ctx, 5);
            case 10:
                return this.precpred(this._ctx, 4);
            case 11:
                return this.precpred(this._ctx, 3);
            case 12:
                return this.precpred(this._ctx, 1);
            case 13:
                return this.precpred(this._ctx, 22);
            case 14:
                return this.precpred(this._ctx, 21);
            case 15:
                return this.precpred(this._ctx, 18);
            case 16:
                return this.precpred(this._ctx, 10);
        }
        return true;
    }
    static get _ATN() {
        if (!ApexcodeParser.__ATN) {
            ApexcodeParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(ApexcodeParser._serializedATN));
        }
        return ApexcodeParser.__ATN;
    }
}
ApexcodeParser.T__0 = 1;
ApexcodeParser.T__1 = 2;
ApexcodeParser.T__2 = 3;
ApexcodeParser.T__3 = 4;
ApexcodeParser.T__4 = 5;
ApexcodeParser.T__5 = 6;
ApexcodeParser.T__6 = 7;
ApexcodeParser.T__7 = 8;
ApexcodeParser.T__8 = 9;
ApexcodeParser.T__9 = 10;
ApexcodeParser.T__10 = 11;
ApexcodeParser.T__11 = 12;
ApexcodeParser.T__12 = 13;
ApexcodeParser.T__13 = 14;
ApexcodeParser.T__14 = 15;
ApexcodeParser.T__15 = 16;
ApexcodeParser.T__16 = 17;
ApexcodeParser.T__17 = 18;
ApexcodeParser.T__18 = 19;
ApexcodeParser.T__19 = 20;
ApexcodeParser.T__20 = 21;
ApexcodeParser.T__21 = 22;
ApexcodeParser.T__22 = 23;
ApexcodeParser.T__23 = 24;
ApexcodeParser.T__24 = 25;
ApexcodeParser.T__25 = 26;
ApexcodeParser.T__26 = 27;
ApexcodeParser.T__27 = 28;
ApexcodeParser.T__28 = 29;
ApexcodeParser.T__29 = 30;
ApexcodeParser.T__30 = 31;
ApexcodeParser.T__31 = 32;
ApexcodeParser.T__32 = 33;
ApexcodeParser.T__33 = 34;
ApexcodeParser.T__34 = 35;
ApexcodeParser.T__35 = 36;
ApexcodeParser.T__36 = 37;
ApexcodeParser.T__37 = 38;
ApexcodeParser.T__38 = 39;
ApexcodeParser.T__39 = 40;
ApexcodeParser.T__40 = 41;
ApexcodeParser.T__41 = 42;
ApexcodeParser.T__42 = 43;
ApexcodeParser.T__43 = 44;
ApexcodeParser.APEXDOC_COMMENT = 45;
ApexcodeParser.COMMENT = 46;
ApexcodeParser.LINE_COMMENT = 47;
ApexcodeParser.WS = 48;
ApexcodeParser.BooleanLiteral = 49;
ApexcodeParser.ABSTRACT = 50;
ApexcodeParser.CLASS = 51;
ApexcodeParser.ENUM = 52;
ApexcodeParser.EXTENDS = 53;
ApexcodeParser.FALSE = 54;
ApexcodeParser.FINAL = 55;
ApexcodeParser.NULL = 56;
ApexcodeParser.IMPLEMENTS = 57;
ApexcodeParser.INSTANCE_OF = 58;
ApexcodeParser.INTERFACE = 59;
ApexcodeParser.OVERRIDE = 60;
ApexcodeParser.PRIVATE = 61;
ApexcodeParser.PROTECTED = 62;
ApexcodeParser.PUBLIC = 63;
ApexcodeParser.STATIC = 64;
ApexcodeParser.SUPER = 65;
ApexcodeParser.THIS = 66;
ApexcodeParser.TRANSIENT = 67;
ApexcodeParser.TRUE = 68;
ApexcodeParser.VIRTUAL = 69;
ApexcodeParser.VOID = 70;
ApexcodeParser.NEW = 71;
ApexcodeParser.BREAK = 72;
ApexcodeParser.CONTINUE = 73;
ApexcodeParser.DO = 74;
ApexcodeParser.ELSE = 75;
ApexcodeParser.FOR = 76;
ApexcodeParser.IF = 77;
ApexcodeParser.RETURN = 78;
ApexcodeParser.THROW = 79;
ApexcodeParser.TRY = 80;
ApexcodeParser.CATCH = 81;
ApexcodeParser.FINALLY = 82;
ApexcodeParser.WHILE = 83;
ApexcodeParser.BRACKET_THEN_FIND = 84;
ApexcodeParser.BRACKET_THEN_SELECT = 85;
ApexcodeParser.DB_DELETE = 86;
ApexcodeParser.DB_INSERT = 87;
ApexcodeParser.DB_MERGE = 88;
ApexcodeParser.DB_UNDELETE = 89;
ApexcodeParser.DB_UPDATE = 90;
ApexcodeParser.DB_UPSERT = 91;
ApexcodeParser.TRIGGER_EVENT = 92;
ApexcodeParser.GLOBAL = 93;
ApexcodeParser.SYSTEM_RUNAS = 94;
ApexcodeParser.TRIGGER_KEYWORD = 95;
ApexcodeParser.TRIGGER_ON_KEYWORD = 96;
ApexcodeParser.TESTMETHOD = 97;
ApexcodeParser.WEBSERVICE = 98;
ApexcodeParser.WITHOUT_SHARING = 99;
ApexcodeParser.WITH_SHARING = 100;
ApexcodeParser.GET_EMPTY = 101;
ApexcodeParser.GET_OPEN_CURLY = 102;
ApexcodeParser.SET_EMPTY = 103;
ApexcodeParser.SET_OPEN_CURLY = 104;
ApexcodeParser.StringLiteral = 105;
ApexcodeParser.SoqlLiteral = 106;
ApexcodeParser.SoslLiteral = 107;
ApexcodeParser.IntegerLiteral = 108;
ApexcodeParser.FloatingPointLiteral = 109;
ApexcodeParser.Identifier = 110;
ApexcodeParser.RULE_compilationUnit = 0;
ApexcodeParser.RULE_typeDeclaration = 1;
ApexcodeParser.RULE_classOrInterfaceModifier = 2;
ApexcodeParser.RULE_classOrInterfaceVisibilityModifier = 3;
ApexcodeParser.RULE_classSharingModifier = 4;
ApexcodeParser.RULE_classDeclaration = 5;
ApexcodeParser.RULE_className = 6;
ApexcodeParser.RULE_extendsDeclaration = 7;
ApexcodeParser.RULE_implementsDeclaration = 8;
ApexcodeParser.RULE_classBody = 9;
ApexcodeParser.RULE_classBodyMember = 10;
ApexcodeParser.RULE_classConstructor = 11;
ApexcodeParser.RULE_classConstructorModifier = 12;
ApexcodeParser.RULE_interfaceDeclaration = 13;
ApexcodeParser.RULE_interfaceName = 14;
ApexcodeParser.RULE_interfaceBody = 15;
ApexcodeParser.RULE_triggerDeclaration = 16;
ApexcodeParser.RULE_triggerName = 17;
ApexcodeParser.RULE_triggerSObjectType = 18;
ApexcodeParser.RULE_classVariable = 19;
ApexcodeParser.RULE_classVariableModifier = 20;
ApexcodeParser.RULE_variableName = 21;
ApexcodeParser.RULE_classMethod = 22;
ApexcodeParser.RULE_methodParameters = 23;
ApexcodeParser.RULE_methodParameter = 24;
ApexcodeParser.RULE_methodParameterName = 25;
ApexcodeParser.RULE_methodHeader = 26;
ApexcodeParser.RULE_methodHeaderModifier = 27;
ApexcodeParser.RULE_methodName = 28;
ApexcodeParser.RULE_methodBody = 29;
ApexcodeParser.RULE_classProperty = 30;
ApexcodeParser.RULE_propertyModifier = 31;
ApexcodeParser.RULE_propertyName = 32;
ApexcodeParser.RULE_propertyGet = 33;
ApexcodeParser.RULE_propertySet = 34;
ApexcodeParser.RULE_propertyGetSetModifier = 35;
ApexcodeParser.RULE_enumDeclaration = 36;
ApexcodeParser.RULE_enumName = 37;
ApexcodeParser.RULE_enumConstants = 38;
ApexcodeParser.RULE_enumConstant = 39;
ApexcodeParser.RULE_annotation = 40;
ApexcodeParser.RULE_annotationName = 41;
ApexcodeParser.RULE_annotationElementValuePairs = 42;
ApexcodeParser.RULE_annotationElementValuePair = 43;
ApexcodeParser.RULE_annotationElementValue = 44;
ApexcodeParser.RULE_expression = 45;
ApexcodeParser.RULE_primary = 46;
ApexcodeParser.RULE_parExpression = 47;
ApexcodeParser.RULE_expressionList = 48;
ApexcodeParser.RULE_runas_expression = 49;
ApexcodeParser.RULE_db_shortcut_expression = 50;
ApexcodeParser.RULE_creator = 51;
ApexcodeParser.RULE_typeArguments = 52;
ApexcodeParser.RULE_arrayCreatorRest = 53;
ApexcodeParser.RULE_mapCreatorRest = 54;
ApexcodeParser.RULE_setCreatorRest = 55;
ApexcodeParser.RULE_classCreatorRest = 56;
ApexcodeParser.RULE_variableInitializer = 57;
ApexcodeParser.RULE_arrayInitializer = 58;
ApexcodeParser.RULE_arguments = 59;
ApexcodeParser.RULE_codeBlock = 60;
ApexcodeParser.RULE_staticCodeBlock = 61;
ApexcodeParser.RULE_localVariableDeclaration = 62;
ApexcodeParser.RULE_localVariableModifier = 63;
ApexcodeParser.RULE_blockStatement = 64;
ApexcodeParser.RULE_qualifiedName = 65;
ApexcodeParser.RULE_forControl = 66;
ApexcodeParser.RULE_forInit = 67;
ApexcodeParser.RULE_enhancedForControl = 68;
ApexcodeParser.RULE_forUpdate = 69;
ApexcodeParser.RULE_catchClause = 70;
ApexcodeParser.RULE_catchType = 71;
ApexcodeParser.RULE_finallyBlock = 72;
ApexcodeParser.RULE_statement = 73;
ApexcodeParser.RULE_literal = 74;
ApexcodeParser.RULE_dataType = 75;
ApexcodeParser.ruleNames = [
    "compilationUnit", "typeDeclaration", "classOrInterfaceModifier", "classOrInterfaceVisibilityModifier",
    "classSharingModifier", "classDeclaration", "className", "extendsDeclaration",
    "implementsDeclaration", "classBody", "classBodyMember", "classConstructor",
    "classConstructorModifier", "interfaceDeclaration", "interfaceName", "interfaceBody",
    "triggerDeclaration", "triggerName", "triggerSObjectType", "classVariable",
    "classVariableModifier", "variableName", "classMethod", "methodParameters",
    "methodParameter", "methodParameterName", "methodHeader", "methodHeaderModifier",
    "methodName", "methodBody", "classProperty", "propertyModifier", "propertyName",
    "propertyGet", "propertySet", "propertyGetSetModifier", "enumDeclaration",
    "enumName", "enumConstants", "enumConstant", "annotation", "annotationName",
    "annotationElementValuePairs", "annotationElementValuePair", "annotationElementValue",
    "expression", "primary", "parExpression", "expressionList", "runas_expression",
    "db_shortcut_expression", "creator", "typeArguments", "arrayCreatorRest",
    "mapCreatorRest", "setCreatorRest", "classCreatorRest", "variableInitializer",
    "arrayInitializer", "arguments", "codeBlock", "staticCodeBlock", "localVariableDeclaration",
    "localVariableModifier", "blockStatement", "qualifiedName", "forControl",
    "forInit", "enhancedForControl", "forUpdate", "catchClause", "catchType",
    "finallyBlock", "statement", "literal", "dataType"
];
ApexcodeParser._LITERAL_NAMES = [
    undefined, "'(hidden)'", "';'", "'{'", "'}'", "','", "'('", "')'", "'='",
    "'@'", "'.'", "'['", "']'", "'++'", "'--'", "'+'", "'-'", "'!'", "'*'",
    "'/'", "'%'", "'<'", "'>'", "'==='", "'=='", "'!='", "'<>'", "'&'", "'^'",
    "'|'", "'&&'", "'||'", "'?'", "':'", "'+='", "'-='", "'*='", "'/='", "'&='",
    "'|='", "'^='", "'>>='", "'>>>='", "'<<='", "'=>'"
];
ApexcodeParser._SYMBOLIC_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "APEXDOC_COMMENT", "COMMENT", "LINE_COMMENT",
    "WS", "BooleanLiteral", "ABSTRACT", "CLASS", "ENUM", "EXTENDS", "FALSE",
    "FINAL", "NULL", "IMPLEMENTS", "INSTANCE_OF", "INTERFACE", "OVERRIDE",
    "PRIVATE", "PROTECTED", "PUBLIC", "STATIC", "SUPER", "THIS", "TRANSIENT",
    "TRUE", "VIRTUAL", "VOID", "NEW", "BREAK", "CONTINUE", "DO", "ELSE", "FOR",
    "IF", "RETURN", "THROW", "TRY", "CATCH", "FINALLY", "WHILE", "BRACKET_THEN_FIND",
    "BRACKET_THEN_SELECT", "DB_DELETE", "DB_INSERT", "DB_MERGE", "DB_UNDELETE",
    "DB_UPDATE", "DB_UPSERT", "TRIGGER_EVENT", "GLOBAL", "SYSTEM_RUNAS", "TRIGGER_KEYWORD",
    "TRIGGER_ON_KEYWORD", "TESTMETHOD", "WEBSERVICE", "WITHOUT_SHARING", "WITH_SHARING",
    "GET_EMPTY", "GET_OPEN_CURLY", "SET_EMPTY", "SET_OPEN_CURLY", "StringLiteral",
    "SoqlLiteral", "SoslLiteral", "IntegerLiteral", "FloatingPointLiteral",
    "Identifier"
];
ApexcodeParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(ApexcodeParser._LITERAL_NAMES, ApexcodeParser._SYMBOLIC_NAMES, []);
ApexcodeParser._serializedATNSegments = 2;
ApexcodeParser._serializedATNSegment0 = "\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x03p\u03BB\x04\x02" +
    "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
    "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
    "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
    "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04" +
    "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x04" +
    "\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#" +
    "\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+" +
    "\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044" +
    "\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x03\x02\x03" +
    "\x02\x03\x02\x07\x02\x9E\n\x02\f\x02\x0E\x02\xA1\v\x02\x03\x02\x05\x02" +
    "\xA4\n\x02\x03\x03\x03\x03\x07\x03\xA8\n\x03\f\x03\x0E\x03\xAB\v\x03\x03" +
    "\x03\x03\x03\x07\x03\xAF\n\x03\f\x03\x0E\x03\xB2\v\x03\x03\x03\x03\x03" +
    "\x03\x03\x05\x03\xB7\n\x03\x03\x04\x03\x04\x03\x04\x05\x04\xBC\n\x04\x03" +
    "\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x05\x07\xC5\n\x07" +
    "\x03\x07\x05\x07\xC8\n\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b" +
    "\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x07\n\xD7\n\n\f\n\x0E\n\xDA" +
    "\v\n\x03\v\x03\v\x03\v\x07\v\xDF\n\v\f\v\x0E\v\xE2\v\v\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x05\f\xEA\n\f\x03\r\x03\r\x07\r\xEE\n\r\f\r\x0E\r" +
    "\xF1\v\r\x03\r\x03\r\x03\r\x05\r\xF6\n\r\x03\r\x03\r\x03\r\x03\x0E\x03" +
    "\x0E\x03\x0E\x05\x0E\xFE\n\x0E\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u0103\n" +
    "\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
    "\x11\x07\x11\u010E\n\x11\f\x11\x0E\x11\u0111\v\x11\x03\x12\x03\x12\x03" +
    "\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\u011B\n\x12\f\x12" +
    "\x0E\x12\u011E\v\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03" +
    "\x13\x03\x14\x03\x14\x03\x15\x03\x15\x07\x15\u012B\n\x15\f\x15\x0E\x15" +
    "\u012E\v\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\u0134\n\x15\x03\x15" +
    "\x03\x15\x03\x15\x03\x15\x05\x15\u013A\n\x15\x07\x15\u013C\n\x15\f\x15" +
    "\x0E\x15\u013F\v\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
    "\x16\x05\x16\u0148\n\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18" +
    "\x03\x18\x03\x18\x05\x18\u0152\n\x18\x03\x19\x03\x19\x03\x19\x07\x19\u0157" +
    "\n\x19\f\x19\x0E\x19\u015A\v\x19\x03\x1A\x05\x1A\u015D\n\x1A\x03\x1A\x03" +
    "\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x07\x1C\u0166\n\x1C\f\x1C" +
    "\x0E\x1C\u0169\v\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u016F\n\x1C" +
    "\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
    "\x05\x1D\u017A\n\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x07 \u0182" +
    "\n \f \x0E \u0185\v \x03 \x03 \x03 \x03 \x03 \x06 \u018C\n \r \x0E \u018D" +
    "\x03 \x03 \x03!\x03!\x03!\x03!\x05!\u0196\n!\x03\"\x03\"\x03#\x07#\u019B" +
    "\n#\f#\x0E#\u019E\v#\x03#\x03#\x03#\x07#\u01A3\n#\f#\x0E#\u01A6\v#\x03" +
    "#\x05#\u01A9\n#\x03$\x07$\u01AC\n$\f$\x0E$\u01AF\v$\x03$\x03$\x03$\x07" +
    "$\u01B4\n$\f$\x0E$\u01B7\v$\x03$\x05$\u01BA\n$\x03%\x03%\x05%\u01BE\n" +
    "%\x03&\x07&\u01C1\n&\f&\x0E&\u01C4\v&\x03&\x03&\x03&\x03&\x05&\u01CA\n" +
    "&\x03&\x03&\x03\'\x03\'\x03(\x03(\x03(\x07(\u01D3\n(\f(\x0E(\u01D6\v(" +
    "\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x05*\u01DF\n*\x03*\x05*\u01E2\n*\x03" +
    "+\x03+\x03,\x03,\x07,\u01E8\n,\f,\x0E,\u01EB\v,\x03-\x03-\x03-\x03-\x03" +
    ".\x03.\x05.\u01F3\n.\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03" +
    "/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x05/\u0209\n/\x03" +
    "/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03" +
    "/\x03/\x03/\x05/\u021C\n/\x03/\x03/\x03/\x03/\x05/\u0222\n/\x03/\x03/" +
    "\x03/\x05/\u0227\n/\x03/\x03/\x03/\x05/\u022C\n/\x03/\x03/\x03/\x03/\x03" +
    "/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03" +
    "/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x05/\u024D" +
    "\n/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x07/\u025A" +
    "\n/\f/\x0E/\u025D\v/\x030\x030\x030\x030\x030\x030\x030\x030\x030\x05" +
    "0\u0268\n0\x031\x031\x031\x031\x032\x032\x032\x072\u0271\n2\f2\x0E2\u0274" +
    "\v2\x033\x033\x033\x053\u0279\n3\x033\x033\x033\x034\x034\x034\x034\x03" +
    "4\x034\x034\x034\x034\x034\x054\u0288\n4\x035\x035\x035\x035\x035\x03" +
    "5\x035\x035\x035\x035\x035\x035\x055\u0296\n5\x055\u0298\n5\x036\x036" +
    "\x036\x036\x076\u029E\n6\f6\x0E6\u02A1\v6\x036\x036\x037\x037\x037\x03" +
    "7\x077\u02A9\n7\f7\x0E7\u02AC\v7\x037\x037\x037\x037\x037\x037\x037\x07" +
    "7\u02B5\n7\f7\x0E7\u02B8\v7\x037\x037\x077\u02BC\n7\f7\x0E7\u02BF\v7\x05" +
    "7\u02C1\n7\x038\x038\x038\x058\u02C6\n8\x038\x038\x038\x058\u02CB\n8\x03" +
    "8\x038\x038\x058\u02D0\n8\x038\x038\x038\x058\u02D5\n8\x078\u02D7\n8\f" +
    "8\x0E8\u02DA\v8\x058\u02DC\n8\x038\x038\x039\x039\x039\x059\u02E3\n9\x03" +
    "9\x039\x039\x059\u02E8\n9\x079\u02EA\n9\f9\x0E9\u02ED\v9\x039\x039\x03" +
    ":\x03:\x03;\x03;\x05;\u02F5\n;\x03<\x03<\x03<\x03<\x07<\u02FB\n<\f<\x0E" +
    "<\u02FE\v<\x03<\x05<\u0301\n<\x05<\u0303\n<\x03<\x03<\x03=\x03=\x05=\u0309" +
    "\n=\x03=\x03=\x03>\x03>\x07>\u030F\n>\f>\x0E>\u0312\v>\x03>\x03>\x03?" +
    "\x03?\x03?\x03@\x07@\u031A\n@\f@\x0E@\u031D\v@\x03@\x03@\x03@\x03@\x05" +
    "@\u0323\n@\x03@\x03@\x03@\x03@\x05@\u0329\n@\x07@\u032B\n@\f@\x0E@\u032E" +
    "\v@\x03A\x03A\x03B\x03B\x03B\x03B\x05B\u0336\nB\x03C\x03C\x03C\x07C\u033B" +
    "\nC\fC\x0EC\u033E\vC\x03D\x03D\x05D\u0342\nD\x03D\x03D\x05D\u0346\nD\x03" +
    "D\x03D\x05D\u034A\nD\x05D\u034C\nD\x03E\x03E\x05E\u0350\nE\x03F\x03F\x03" +
    "F\x03F\x03F\x03G\x03G\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03I\x03I\x03" +
    "I\x07I\u0363\nI\fI\x0EI\u0366\vI\x03J\x03J\x03J\x03K\x03K\x03K\x03K\x03" +
    "K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03" +
    "K\x03K\x03K\x03K\x05K\u0381\nK\x03K\x03K\x05K\u0385\nK\x03K\x03K\x03K" +
    "\x03K\x03K\x03K\x03K\x03K\x06K\u038F\nK\rK\x0EK\u0390\x03K\x05K\u0394" +
    "\nK\x03K\x05K\u0397\nK\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03" +
    "K\x03K\x03K\x05K\u03A5\nK\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x05L\u03AE" +
    "\nL\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x05M\u03B7\nM\x05M\u03B9\nM\x03" +
    "M\x02\x02\x03\\N\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10" +
    "\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02" +
    "$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02" +
    "@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02" +
    "\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02" +
    "x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C" +
    "\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x02\f\b\x0244??A" +
    "AGG__dd\x03\x02ef\x04\x02?A__\x03\x02\x0F\x10\x03\x02\x11\x12\x03\x02" +
    "\x14\x16\x03\x02\x19\x1C\x04\x02\n\n$-\x04\x02XY[]\x04\x0299EE\u041E\x02" +
    "\xA3\x03\x02\x02\x02\x04\xB6\x03\x02\x02\x02\x06\xBB\x03\x02\x02\x02\b" +
    "\xBD\x03\x02\x02\x02\n\xBF\x03\x02\x02\x02\f\xC1\x03\x02\x02\x02\x0E\xCD" +
    "\x03\x02\x02\x02\x10\xCF\x03\x02\x02\x02\x12\xD2\x03\x02\x02\x02\x14\xE0" +
    "\x03\x02\x02\x02\x16\xE9\x03\x02\x02\x02\x18\xEF\x03\x02\x02\x02\x1A\xFD" +
    "\x03\x02\x02\x02\x1C\xFF\x03\x02\x02\x02\x1E\u0108\x03\x02\x02\x02 \u010F" +
    "\x03\x02\x02\x02\"\u0112\x03\x02\x02\x02$\u0124\x03\x02\x02\x02&\u0126" +
    "\x03\x02\x02\x02(\u012C\x03\x02\x02\x02*\u0147\x03\x02\x02\x02,\u0149" +
    "\x03\x02\x02\x02.\u0151\x03\x02\x02\x020\u0153\x03\x02\x02\x022\u015C" +
    "\x03\x02\x02\x024\u0161\x03\x02\x02\x026\u0167\x03\x02\x02\x028\u0179" +
    "\x03\x02\x02\x02:\u017B\x03\x02\x02\x02<\u017D\x03\x02\x02\x02>\u0183" +
    "\x03\x02\x02\x02@\u0195\x03\x02\x02\x02B\u0197\x03\x02\x02\x02D\u019C" +
    "\x03\x02\x02\x02F\u01AD\x03\x02\x02\x02H\u01BD\x03\x02\x02\x02J\u01C2" +
    "\x03\x02\x02\x02L\u01CD\x03\x02\x02\x02N\u01CF\x03\x02\x02\x02P\u01D7" +
    "\x03\x02\x02\x02R\u01D9\x03\x02\x02\x02T\u01E3\x03\x02\x02\x02V\u01E5" +
    "\x03\x02\x02\x02X\u01EC\x03\x02\x02\x02Z\u01F2\x03\x02\x02\x02\\\u0208" +
    "\x03\x02\x02\x02^\u0267\x03\x02\x02\x02`\u0269\x03\x02\x02\x02b\u026D" +
    "\x03\x02\x02\x02d\u0275\x03\x02\x02\x02f\u0287\x03\x02\x02\x02h\u0297" +
    "\x03\x02\x02\x02j\u0299\x03\x02\x02\x02l\u02A4\x03\x02\x02\x02n\u02C2" +
    "\x03\x02\x02\x02p\u02DF\x03\x02\x02\x02r\u02F0\x03\x02\x02\x02t\u02F4" +
    "\x03\x02\x02\x02v\u02F6\x03\x02\x02\x02x\u0306\x03\x02\x02\x02z\u030C" +
    "\x03\x02\x02\x02|\u0315\x03\x02\x02\x02~\u031B\x03\x02\x02\x02\x80\u032F" +
    "\x03\x02\x02\x02\x82\u0335\x03\x02\x02\x02\x84\u0337\x03\x02\x02\x02\x86" +
    "\u034B\x03\x02\x02\x02\x88\u034F\x03\x02\x02\x02\x8A\u0351\x03\x02\x02" +
    "\x02\x8C\u0356\x03\x02\x02\x02\x8E\u0358\x03\x02\x02\x02\x90\u035F\x03" +
    "\x02\x02\x02\x92\u0367\x03\x02\x02\x02\x94\u03A4\x03\x02\x02\x02\x96\u03AD" +
    "\x03\x02\x02\x02\x98\u03B8\x03\x02\x02\x02\x9A\x9B\x07\x03\x02\x02\x9B" +
    "\xA4\x07\x02\x02\x03\x9C\x9E\x05\x04\x03\x02\x9D\x9C\x03\x02\x02\x02\x9E" +
    "\xA1\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0" +
    "\xA2\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xA4\x07\x02\x02\x03\xA3" +
    "\x9A\x03\x02\x02\x02\xA3\x9F\x03\x02\x02\x02\xA4\x03\x03\x02\x02\x02\xA5" +
    "\xB7\x05\"\x12\x02\xA6\xA8\x05\x06\x04\x02\xA7\xA6\x03\x02\x02\x02\xA8" +
    "\xAB\x03\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA" +
    "\xAC\x03\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAC\xB7\x05\f\x07\x02\xAD" +
    "\xAF\x05\x06\x04\x02\xAE\xAD\x03\x02\x02\x02\xAF\xB2\x03\x02\x02\x02\xB0" +
    "\xAE\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1\xB3\x03\x02\x02\x02\xB2" +
    "\xB0\x03\x02\x02\x02\xB3\xB7\x05\x1C\x0F\x02\xB4\xB7\x05J&\x02\xB5\xB7" +
    "\x07\x04\x02\x02\xB6\xA5\x03\x02\x02\x02\xB6\xA9\x03\x02\x02\x02\xB6\xB0" +
    "\x03\x02\x02\x02\xB6\xB4\x03\x02\x02\x02\xB6\xB5\x03\x02\x02\x02\xB7\x05" +
    "\x03\x02\x02\x02\xB8\xBC\x05R*\x02\xB9\xBC\x05\b\x05\x02\xBA\xBC\x05\n" +
    "\x06\x02\xBB\xB8\x03\x02\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBA\x03\x02" +
    "\x02\x02\xBC\x07\x03\x02\x02\x02\xBD\xBE\t\x02\x02\x02\xBE\t\x03\x02\x02" +
    "\x02\xBF\xC0\t\x03\x02\x02\xC0\v\x03\x02\x02\x02\xC1\xC2\x075\x02\x02" +
    "\xC2\xC4\x05\x0E\b\x02\xC3\xC5\x05\x10\t\x02\xC4\xC3\x03\x02\x02\x02\xC4" +
    "\xC5\x03\x02\x02\x02\xC5\xC7\x03\x02\x02\x02\xC6\xC8\x05\x12\n\x02\xC7" +
    "\xC6\x03\x02\x02\x02\xC7\xC8\x03\x02\x02\x02\xC8\xC9\x03\x02\x02\x02\xC9" +
    "\xCA\x07\x05\x02\x02\xCA\xCB\x05\x14\v\x02\xCB\xCC\x07\x06\x02\x02\xCC" +
    "\r\x03\x02\x02\x02\xCD\xCE\x07p\x02\x02\xCE\x0F\x03\x02\x02\x02\xCF\xD0" +
    "\x077\x02\x02\xD0\xD1\x05\x98M\x02\xD1\x11\x03\x02\x02\x02\xD2\xD3\x07" +
    ";\x02\x02\xD3\xD8\x05\x98M\x02\xD4\xD5\x07\x07\x02\x02\xD5\xD7\x05\x98" +
    "M\x02\xD6\xD4\x03\x02\x02\x02\xD7\xDA\x03\x02\x02\x02\xD8\xD6\x03\x02" +
    "\x02\x02\xD8\xD9\x03\x02\x02\x02\xD9\x13\x03\x02\x02\x02\xDA\xD8\x03\x02" +
    "\x02\x02\xDB\xDF\x05|?\x02\xDC\xDF\x05\x16\f\x02\xDD\xDF\x05\x82B\x02" +
    "\xDE\xDB\x03\x02\x02\x02\xDE\xDC\x03\x02\x02\x02\xDE\xDD\x03\x02\x02\x02" +
    "\xDF\xE2\x03\x02\x02\x02\xE0\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02\x02\x02" +
    "\xE1\x15\x03\x02\x02\x02\xE2\xE0\x03\x02\x02\x02\xE3\xEA\x05J&\x02\xE4" +
    "\xEA\x05\x18\r\x02\xE5\xEA\x05.\x18\x02\xE6\xEA\x05(\x15\x02\xE7\xEA\x05" +
    "> \x02\xE8\xEA\x05\x04\x03\x02\xE9\xE3\x03\x02\x02\x02\xE9\xE4\x03\x02" +
    "\x02\x02\xE9\xE5\x03\x02\x02\x02\xE9\xE6\x03\x02\x02\x02\xE9\xE7\x03\x02" +
    "\x02\x02\xE9\xE8\x03\x02\x02\x02\xEA\x17\x03\x02\x02\x02\xEB\xEE\x05R" +
    "*\x02\xEC\xEE\x05\x1A\x0E\x02\xED\xEB\x03\x02\x02\x02\xED\xEC\x03\x02" +
    "\x02\x02\xEE\xF1\x03\x02\x02\x02\xEF\xED\x03\x02\x02\x02\xEF\xF0\x03\x02" +
    "\x02\x02\xF0\xF2\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF2\xF3\x05\x84" +
    "C\x02\xF3\xF5\x07\b\x02\x02\xF4\xF6\x050\x19\x02\xF5\xF4\x03\x02\x02\x02" +
    "\xF5\xF6\x03\x02\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7\xF8\x07\t\x02\x02" +
    "\xF8\xF9\x05<\x1F\x02\xF9\x19\x03\x02\x02\x02\xFA\xFE\t\x04\x02\x02\xFB" +
    "\xFE\x07>\x02\x02\xFC\xFE\x07G\x02\x02\xFD\xFA\x03\x02\x02\x02\xFD\xFB" +
    "\x03\x02\x02\x02\xFD\xFC\x03\x02\x02\x02\xFE\x1B\x03\x02\x02\x02\xFF\u0100" +
    "\x07=\x02\x02\u0100\u0102\x05\x1E\x10\x02\u0101\u0103\x05\x10\t\x02\u0102" +
    "\u0101\x03\x02\x02\x02\u0102\u0103\x03\x02\x02\x02\u0103\u0104\x03\x02" +
    "\x02\x02\u0104\u0105\x07\x05\x02\x02\u0105\u0106\x05 \x11\x02\u0106\u0107" +
    "\x07\x06\x02\x02\u0107\x1D\x03\x02\x02\x02\u0108\u0109\x07p\x02\x02\u0109" +
    "\x1F\x03\x02\x02\x02\u010A\u010B\x056\x1C\x02\u010B\u010C\x07\x04\x02" +
    "\x02\u010C\u010E\x03\x02\x02\x02\u010D\u010A\x03\x02\x02\x02\u010E\u0111" +
    "\x03\x02\x02\x02\u010F\u010D\x03\x02\x02\x02\u010F\u0110\x03\x02\x02\x02" +
    "\u0110!\x03\x02\x02\x02\u0111\u010F\x03\x02\x02\x02\u0112\u0113\x07a\x02" +
    "\x02\u0113\u0114\x05$\x13\x02\u0114\u0115\x07b\x02\x02\u0115\u0116\x05" +
    "&\x14\x02\u0116\u0117\x07\b\x02\x02\u0117\u011C\x07^\x02\x02\u0118\u0119" +
    "\x07\x07\x02\x02\u0119\u011B\x07^\x02\x02\u011A\u0118\x03\x02\x02\x02" +
    "\u011B\u011E\x03\x02\x02\x02\u011C\u011A\x03\x02\x02\x02\u011C\u011D\x03" +
    "\x02\x02\x02\u011D\u011F\x03\x02\x02\x02\u011E\u011C\x03\x02\x02\x02\u011F" +
    "\u0120\x07\t\x02\x02\u0120\u0121\x07\x05\x02\x02\u0121\u0122\x05\x14\v" +
    "\x02\u0122\u0123\x07\x06\x02\x02\u0123#\x03\x02\x02\x02\u0124\u0125\x07" +
    "p\x02\x02\u0125%\x03\x02\x02\x02\u0126\u0127\x07p\x02\x02\u0127\'\x03" +
    "\x02\x02\x02\u0128\u012B\x05R*\x02\u0129\u012B\x05*\x16\x02\u012A\u0128" +
    "\x03\x02\x02\x02\u012A\u0129\x03\x02\x02\x02\u012B\u012E\x03\x02\x02\x02" +
    "\u012C\u012A\x03\x02\x02\x02\u012C\u012D\x03\x02\x02\x02\u012D\u012F\x03" +
    "\x02\x02\x02\u012E\u012C\x03\x02\x02\x02\u012F\u0130\x05\x98M\x02\u0130" +
    "\u0133\x05,\x17\x02\u0131\u0132\x07\n\x02\x02\u0132\u0134\x05\\/\x02\u0133" +
    "\u0131\x03\x02\x02\x02\u0133\u0134\x03\x02\x02\x02\u0134\u013D\x03\x02" +
    "\x02\x02\u0135\u0136\x07\x07\x02\x02\u0136\u0139\x05,\x17\x02\u0137\u0138" +
    "\x07\n\x02\x02\u0138\u013A\x05\\/\x02\u0139\u0137\x03\x02\x02\x02\u0139" +
    "\u013A\x03\x02\x02\x02\u013A\u013C\x03\x02\x02\x02\u013B\u0135\x03\x02" +
    "\x02\x02\u013C\u013F\x03\x02\x02\x02\u013D\u013B\x03\x02\x02\x02\u013D" +
    "\u013E\x03\x02\x02\x02\u013E\u0140\x03\x02\x02\x02\u013F\u013D\x03\x02" +
    "\x02\x02\u0140\u0141\x07\x04\x02\x02\u0141)\x03\x02\x02\x02\u0142\u0148" +
    "\t\x04\x02\x02\u0143\u0148\x079\x02\x02\u0144\u0148\x07B\x02\x02\u0145" +
    "\u0148\x07E\x02\x02\u0146\u0148\x07d\x02\x02\u0147\u0142\x03\x02\x02\x02" +
    "\u0147\u0143\x03\x02\x02\x02\u0147\u0144\x03\x02\x02\x02\u0147\u0145\x03" +
    "\x02\x02\x02\u0147\u0146\x03\x02\x02\x02\u0148+\x03\x02\x02\x02\u0149" +
    "\u014A\x07p\x02\x02\u014A-\x03\x02\x02\x02\u014B\u014C\x056\x1C\x02\u014C" +
    "\u014D\x05<\x1F\x02\u014D\u0152\x03\x02\x02\x02\u014E\u014F\x056\x1C\x02" +
    "\u014F\u0150\x07\x04\x02\x02\u0150\u0152\x03\x02\x02\x02\u0151\u014B\x03" +
    "\x02\x02\x02\u0151\u014E\x03\x02\x02\x02\u0152/\x03\x02\x02\x02\u0153" +
    "\u0158\x052\x1A\x02\u0154\u0155\x07\x07\x02\x02\u0155\u0157\x052\x1A\x02" +
    "\u0156\u0154\x03\x02\x02\x02\u0157\u015A\x03\x02\x02\x02\u0158\u0156\x03" +
    "\x02\x02\x02\u0158\u0159\x03\x02\x02\x02\u01591\x03\x02\x02\x02\u015A" +
    "\u0158\x03\x02\x02\x02\u015B\u015D\x079\x02\x02\u015C\u015B\x03\x02\x02" +
    "\x02\u015C\u015D\x03\x02\x02\x02\u015D\u015E\x03\x02\x02\x02\u015E\u015F" +
    "\x05\x98M\x02\u015F\u0160\x054\x1B\x02\u01603\x03\x02\x02\x02\u0161\u0162" +
    "\x07p\x02\x02\u01625\x03\x02\x02\x02\u0163\u0166\x05R*\x02\u0164\u0166" +
    "\x058\x1D\x02\u0165\u0163\x03\x02\x02\x02\u0165\u0164\x03\x02\x02\x02" +
    "\u0166\u0169\x03\x02\x02\x02\u0167\u0165\x03\x02\x02\x02\u0167\u0168\x03" +
    "\x02\x02\x02\u0168\u016A\x03\x02\x02\x02\u0169\u0167\x03\x02\x02\x02\u016A" +
    "\u016B\x05\x98M\x02\u016B\u016C\x05:\x1E\x02\u016C\u016E\x07\b\x02\x02" +
    "\u016D\u016F\x050\x19\x02\u016E\u016D\x03\x02\x02\x02\u016E\u016F\x03" +
    "\x02\x02\x02\u016F\u0170\x03\x02\x02\x02\u0170\u0171\x07\t\x02\x02\u0171" +
    "7\x03\x02\x02\x02\u0172\u017A\t\x04\x02\x02\u0173\u017A\x07>\x02\x02\u0174" +
    "\u017A\x074\x02\x02\u0175\u017A\x07G\x02\x02\u0176\u017A\x07B\x02\x02" +
    "\u0177\u017A\x07c\x02\x02\u0178\u017A\x07d\x02\x02\u0179\u0172\x03\x02" +
    "\x02\x02\u0179\u0173\x03\x02\x02\x02\u0179\u0174\x03\x02\x02\x02\u0179" +
    "\u0175\x03\x02\x02\x02\u0179\u0176\x03\x02\x02\x02\u0179\u0177\x03\x02" +
    "\x02\x02\u0179\u0178\x03\x02\x02\x02\u017A9\x03\x02\x02\x02\u017B\u017C" +
    "\x07p\x02\x02\u017C;\x03\x02\x02\x02\u017D\u017E\x05z>\x02\u017E=\x03" +
    "\x02\x02\x02\u017F\u0182\x05R*\x02\u0180\u0182\x05@!\x02\u0181\u017F\x03" +
    "\x02\x02\x02\u0181\u0180\x03\x02\x02\x02\u0182\u0185\x03\x02\x02\x02\u0183" +
    "\u0181\x03\x02\x02\x02\u0183\u0184\x03\x02\x02\x02\u0184\u0186\x03\x02" +
    "\x02\x02\u0185\u0183\x03\x02\x02\x02\u0186\u0187\x05\x98M\x02\u0187\u0188" +
    "\x05B\"\x02\u0188\u018B\x07\x05\x02\x02\u0189\u018C\x05D#\x02\u018A\u018C" +
    "\x05F$\x02\u018B\u0189\x03\x02\x02\x02\u018B\u018A\x03\x02\x02\x02\u018C" +
    "\u018D\x03\x02\x02\x02\u018D\u018B\x03\x02\x02\x02\u018D\u018E\x03\x02" +
    "\x02\x02\u018E\u018F\x03\x02\x02\x02\u018F\u0190\x07\x06\x02\x02\u0190" +
    "?\x03\x02\x02\x02\u0191\u0196\t\x04\x02\x02\u0192\u0196\x079\x02\x02\u0193" +
    "\u0196\x07B\x02\x02\u0194\u0196\x07E\x02\x02\u0195\u0191\x03\x02\x02\x02" +
    "\u0195\u0192\x03\x02\x02\x02\u0195\u0193\x03\x02\x02\x02\u0195\u0194\x03" +
    "\x02\x02\x02\u0196A\x03\x02\x02\x02\u0197\u0198\x07p\x02\x02\u0198C\x03" +
    "\x02\x02\x02\u0199\u019B\x05H%\x02\u019A\u0199\x03\x02\x02\x02\u019B\u019E" +
    "\x03\x02\x02\x02\u019C\u019A\x03\x02\x02\x02\u019C\u019D\x03\x02\x02\x02" +
    "\u019D\u01A8\x03\x02\x02\x02\u019E\u019C\x03\x02\x02\x02\u019F\u01A9\x07" +
    "g\x02\x02\u01A0\u01A4\x07h\x02\x02\u01A1\u01A3\x05\x82B\x02\u01A2\u01A1" +
    "\x03\x02\x02\x02\u01A3\u01A6\x03\x02\x02\x02\u01A4\u01A2\x03\x02\x02\x02" +
    "\u01A4\u01A5\x03\x02\x02\x02\u01A5\u01A7\x03\x02\x02\x02\u01A6\u01A4\x03" +
    "\x02\x02\x02\u01A7\u01A9\x07\x06\x02\x02\u01A8\u019F\x03\x02\x02\x02\u01A8" +
    "\u01A0\x03\x02\x02\x02\u01A9E\x03\x02\x02\x02\u01AA\u01AC\x05H%\x02\u01AB" +
    "\u01AA\x03\x02\x02\x02\u01AC\u01AF\x03\x02\x02\x02\u01AD\u01AB\x03\x02" +
    "\x02\x02\u01AD\u01AE\x03\x02\x02\x02\u01AE\u01B9\x03\x02\x02\x02\u01AF" +
    "\u01AD\x03\x02\x02\x02\u01B0\u01BA\x07i\x02\x02\u01B1\u01B5\x07j\x02\x02" +
    "\u01B2\u01B4\x05\x82B\x02\u01B3\u01B2\x03\x02\x02\x02\u01B4\u01B7\x03" +
    "\x02\x02\x02\u01B5\u01B3\x03\x02\x02\x02\u01B5\u01B6\x03\x02\x02\x02\u01B6" +
    "\u01B8\x03\x02\x02\x02\u01B7\u01B5\x03\x02\x02\x02\u01B8\u01BA\x07\x06" +
    "\x02\x02\u01B9\u01B0\x03\x02\x02\x02\u01B9\u01B1\x03\x02\x02\x02\u01BA" +
    "G\x03\x02\x02\x02\u01BB\u01BE\t\x04\x02\x02\u01BC\u01BE\x07B\x02\x02\u01BD" +
    "\u01BB\x03\x02\x02\x02\u01BD\u01BC\x03\x02\x02\x02\u01BEI\x03\x02\x02" +
    "\x02\u01BF\u01C1\x05\x06\x04\x02\u01C0\u01BF\x03\x02\x02\x02\u01C1\u01C4" +
    "\x03\x02\x02\x02\u01C2\u01C0\x03\x02\x02\x02\u01C2\u01C3\x03\x02\x02\x02" +
    "\u01C3\u01C5\x03\x02\x02\x02\u01C4\u01C2\x03\x02\x02\x02\u01C5\u01C6\x07" +
    "6\x02\x02\u01C6\u01C7\x05L\'\x02\u01C7\u01C9\x07\x05\x02\x02\u01C8\u01CA" +
    "\x05N(\x02\u01C9\u01C8\x03\x02\x02\x02\u01C9\u01CA\x03\x02\x02\x02\u01CA" +
    "\u01CB\x03\x02\x02\x02\u01CB\u01CC\x07\x06\x02\x02\u01CCK\x03\x02\x02" +
    "\x02\u01CD\u01CE\x07p\x02\x02\u01CEM\x03\x02\x02\x02\u01CF\u01D4\x05P" +
    ")\x02\u01D0\u01D1\x07\x07\x02\x02\u01D1\u01D3\x05P)\x02\u01D2\u01D0\x03" +
    "\x02\x02";
ApexcodeParser._serializedATNSegment1 = "\x02\u01D3\u01D6\x03\x02\x02\x02\u01D4\u01D2\x03\x02\x02\x02\u01D4\u01D5" +
    "\x03\x02\x02\x02\u01D5O\x03\x02\x02\x02\u01D6\u01D4\x03\x02\x02\x02\u01D7" +
    "\u01D8\x07p\x02\x02\u01D8Q\x03\x02\x02\x02\u01D9\u01DA\x07\v\x02\x02\u01DA" +
    "\u01E1\x05T+\x02\u01DB\u01DE\x07\b\x02\x02\u01DC\u01DF\x05V,\x02\u01DD" +
    "\u01DF\x05Z.\x02\u01DE\u01DC\x03\x02\x02\x02\u01DE\u01DD\x03\x02\x02\x02" +
    "\u01DE\u01DF\x03\x02\x02\x02\u01DF\u01E0\x03\x02\x02\x02\u01E0\u01E2\x07" +
    "\t\x02\x02\u01E1\u01DB\x03\x02\x02\x02\u01E1\u01E2\x03\x02\x02\x02\u01E2" +
    "S\x03\x02\x02\x02\u01E3\u01E4\x07p\x02\x02\u01E4U\x03\x02\x02\x02\u01E5" +
    "\u01E9\x05X-\x02\u01E6\u01E8\x05X-\x02\u01E7\u01E6\x03\x02\x02\x02\u01E8" +
    "\u01EB\x03\x02\x02\x02\u01E9\u01E7\x03\x02\x02\x02\u01E9\u01EA\x03\x02" +
    "\x02\x02\u01EAW\x03\x02\x02\x02\u01EB\u01E9\x03\x02\x02\x02\u01EC\u01ED" +
    "\x07p\x02\x02\u01ED\u01EE\x07\n\x02\x02\u01EE\u01EF\x05Z.\x02\u01EFY\x03" +
    "\x02\x02\x02\u01F0\u01F3\x05\\/\x02\u01F1\u01F3\x05R*\x02\u01F2\u01F0" +
    "\x03\x02\x02\x02\u01F2\u01F1\x03\x02\x02\x02\u01F3[\x03\x02\x02\x02\u01F4" +
    "\u01F5\b/\x01\x02\u01F5\u0209\x05^0\x02\u01F6\u01F7\x07I\x02\x02\u01F7" +
    "\u0209\x05h5\x02\u01F8\u01F9\x07\b\x02\x02\u01F9\u01FA\x05j6\x02\u01FA" +
    "\u01FB\x07\t\x02\x02\u01FB\u01FC\x05\\/\x15\u01FC\u0209\x03\x02\x02\x02" +
    "\u01FD\u01FE\t\x05\x02\x02\u01FE\u0209\x05\\/\x13\u01FF\u0200\t\x06\x02" +
    "\x02\u0200\u0209\x05\\/\x12\u0201\u0202\x07\x13\x02\x02\u0202\u0209\x05" +
    "\\/\x11\u0203\u0204\x07\b\x02\x02\u0204\u0205\x05\x98M\x02\u0205\u0206" +
    "\x07\t\x02\x02\u0206\u0207\x05\\/\x04\u0207\u0209\x03\x02\x02\x02\u0208" +
    "\u01F4\x03\x02\x02\x02\u0208\u01F6\x03\x02\x02\x02\u0208\u01F8\x03\x02" +
    "\x02\x02\u0208\u01FD\x03\x02\x02\x02\u0208\u01FF\x03\x02\x02\x02\u0208" +
    "\u0201\x03\x02\x02\x02\u0208\u0203\x03\x02\x02\x02\u0209\u025B\x03\x02" +
    "\x02\x02\u020A\u020B\f\x19\x02\x02\u020B\u020C\x07\f\x02\x02\u020C\u025A" +
    "\x05\\/\x1A\u020D\u020E\f\x10\x02\x02\u020E\u020F\t\x07\x02\x02\u020F" +
    "\u025A\x05\\/\x11\u0210\u0211\f\x0F\x02\x02\u0211\u0212\t\x06\x02\x02" +
    "\u0212\u025A\x05\\/\x10\u0213\u021B\f\x0E\x02\x02\u0214\u0215\x07\x17" +
    "\x02\x02\u0215\u021C\x07\x17\x02\x02\u0216\u0217\x07\x18\x02\x02\u0217" +
    "\u0218\x07\x18\x02\x02\u0218\u021C\x07\x18\x02\x02\u0219\u021A\x07\x18" +
    "\x02\x02\u021A\u021C\x07\x18\x02\x02\u021B\u0214\x03\x02\x02\x02\u021B" +
    "\u0216\x03\x02\x02\x02\u021B\u0219\x03\x02\x02\x02\u021C\u021D\x03\x02" +
    "\x02\x02\u021D\u025A\x05\\/\x0F\u021E\u022B\f\r\x02\x02\u021F\u0221\x07" +
    "\x17\x02\x02\u0220\u0222\x072\x02\x02\u0221\u0220\x03\x02\x02\x02\u0221" +
    "\u0222\x03\x02\x02\x02\u0222\u0223\x03\x02\x02\x02\u0223\u022C\x07\n\x02" +
    "\x02\u0224\u0226\x07\x18\x02\x02\u0225\u0227\x072\x02\x02\u0226\u0225" +
    "\x03\x02\x02\x02\u0226\u0227\x03\x02\x02\x02\u0227\u0228\x03\x02\x02\x02" +
    "\u0228\u022C\x07\n\x02\x02\u0229\u022C\x07\x18\x02\x02\u022A\u022C\x07" +
    "\x17\x02\x02\u022B\u021F\x03\x02\x02\x02\u022B\u0224\x03\x02\x02\x02\u022B" +
    "\u0229\x03\x02\x02\x02\u022B\u022A\x03\x02\x02\x02\u022C\u022D\x03\x02" +
    "\x02\x02\u022D\u025A\x05\\/\x0E\u022E\u022F\f\v\x02\x02\u022F\u0230\t" +
    "\b\x02\x02\u0230\u025A\x05\\/\f\u0231\u0232\f\n\x02\x02\u0232\u0233\x07" +
    "\x1D\x02\x02\u0233\u025A\x05\\/\v\u0234\u0235\f\t\x02\x02\u0235\u0236" +
    "\x07\x1E\x02\x02\u0236\u025A\x05\\/\n\u0237\u0238\f\b\x02\x02\u0238\u0239" +
    "\x07\x1F\x02\x02\u0239\u025A\x05\\/\t\u023A\u023B\f\x07\x02\x02\u023B" +
    "\u023C\x07 \x02\x02\u023C\u025A\x05\\/\b\u023D\u023E\f\x06\x02\x02\u023E" +
    "\u023F\x07!\x02\x02\u023F\u025A\x05\\/\x07\u0240\u0241\f\x05\x02\x02\u0241" +
    "\u0242\x07\"\x02\x02\u0242\u0243\x05\\/\x02\u0243\u0244\x07#\x02\x02\u0244" +
    "\u0245\x05\\/\x06\u0245\u025A\x03\x02\x02\x02\u0246\u0247\f\x03\x02\x02" +
    "\u0247\u0248\t\t\x02\x02\u0248\u025A\x05\\/\x03\u0249\u024A\f\x18\x02" +
    "\x02\u024A\u024C\x07\b\x02\x02\u024B\u024D\x05b2\x02\u024C\u024B\x03\x02" +
    "\x02\x02\u024C\u024D\x03\x02\x02\x02\u024D\u024E\x03\x02\x02\x02\u024E" +
    "\u025A\x07\t\x02\x02\u024F\u0250\f\x17\x02\x02\u0250\u0251\x07\r\x02\x02" +
    "\u0251\u0252\x05\\/\x02\u0252\u0253\x07\x0E\x02\x02\u0253\u025A\x03\x02" +
    "\x02\x02\u0254\u0255\f\x14\x02\x02\u0255\u025A\t\x05\x02\x02\u0256\u0257" +
    "\f\f\x02\x02\u0257\u0258\x07<\x02\x02\u0258\u025A\x05\x98M\x02\u0259\u020A" +
    "\x03\x02\x02\x02\u0259\u020D\x03\x02\x02\x02\u0259\u0210\x03\x02\x02\x02" +
    "\u0259\u0213\x03\x02\x02\x02\u0259\u021E\x03\x02\x02\x02\u0259\u022E\x03" +
    "\x02\x02\x02\u0259\u0231\x03\x02\x02\x02\u0259\u0234\x03\x02\x02\x02\u0259" +
    "\u0237\x03\x02\x02\x02\u0259\u023A\x03\x02\x02\x02\u0259\u023D\x03\x02" +
    "\x02\x02\u0259\u0240\x03\x02\x02\x02\u0259\u0246\x03\x02\x02\x02\u0259" +
    "\u0249\x03\x02\x02\x02\u0259\u024F\x03\x02\x02\x02\u0259\u0254\x03\x02" +
    "\x02\x02\u0259\u0256\x03\x02\x02\x02\u025A\u025D\x03\x02\x02\x02\u025B" +
    "\u0259\x03\x02\x02\x02\u025B\u025C\x03\x02\x02\x02\u025C]\x03\x02\x02" +
    "\x02\u025D\u025B\x03\x02\x02\x02\u025E\u0268\x05`1\x02\u025F\u0268\x07" +
    "D\x02\x02\u0260\u0268\x07C\x02\x02\u0261\u0268\x05\x96L\x02\u0262\u0268" +
    "\x07p\x02\x02\u0263\u0264\x05\x98M\x02\u0264\u0265\x07\f\x02\x02\u0265" +
    "\u0266\x075\x02\x02\u0266\u0268\x03\x02\x02\x02\u0267\u025E\x03\x02\x02" +
    "\x02\u0267\u025F\x03\x02\x02\x02\u0267\u0260\x03\x02\x02\x02\u0267\u0261" +
    "\x03\x02\x02\x02\u0267\u0262\x03\x02\x02\x02\u0267\u0263\x03\x02\x02\x02" +
    "\u0268_\x03\x02\x02\x02\u0269\u026A\x07\b\x02\x02\u026A\u026B\x05\\/\x02" +
    "\u026B\u026C\x07\t\x02\x02\u026Ca\x03\x02\x02\x02\u026D\u0272\x05\\/\x02" +
    "\u026E\u026F\x07\x07\x02\x02\u026F\u0271\x05\\/\x02\u0270\u026E\x03\x02" +
    "\x02\x02\u0271\u0274\x03\x02\x02\x02\u0272\u0270\x03\x02\x02\x02\u0272" +
    "\u0273\x03\x02\x02\x02\u0273c\x03\x02\x02\x02\u0274\u0272\x03\x02\x02" +
    "\x02\u0275\u0276\x07`\x02\x02\u0276\u0278\x07\b\x02\x02\u0277\u0279\x05" +
    "b2\x02\u0278\u0277\x03\x02\x02\x02\u0278\u0279\x03\x02\x02\x02\u0279\u027A" +
    "\x03\x02\x02\x02\u027A\u027B\x07\t\x02\x02\u027B\u027C\x05z>\x02\u027C" +
    "e\x03\x02\x02\x02\u027D\u027E\x07Z\x02\x02\u027E\u027F\x05\\/\x02\u027F" +
    "\u0280\x05\\/\x02\u0280\u0288\x03\x02\x02\x02\u0281\u0282\x07]\x02\x02" +
    "\u0282\u0283\x05\\/\x02\u0283\u0284\x05\\/\x02\u0284\u0288\x03\x02\x02" +
    "\x02\u0285\u0286\t\n\x02\x02\u0286\u0288\x05\\/\x02\u0287\u027D\x03\x02" +
    "\x02\x02\u0287\u0281\x03\x02\x02\x02\u0287\u0285\x03\x02\x02\x02\u0288" +
    "g\x03\x02\x02\x02\u0289\u028A\x05\x98M\x02\u028A\u028B\x07\b\x02\x02\u028B" +
    "\u028C\x07\t\x02\x02\u028C\u0298\x03\x02\x02\x02\u028D\u028E\x05\x98M" +
    "\x02\u028E\u028F\x05`1\x02\u028F\u0298\x03\x02\x02\x02\u0290\u0295\x05" +
    "\x98M\x02\u0291\u0296\x05r:\x02\u0292\u0296\x05l7\x02\u0293\u0296\x05" +
    "n8\x02\u0294\u0296\x05p9\x02\u0295\u0291\x03\x02\x02\x02\u0295\u0292\x03" +
    "\x02\x02\x02\u0295\u0293\x03\x02\x02\x02\u0295\u0294\x03\x02\x02\x02\u0296" +
    "\u0298\x03\x02\x02\x02\u0297\u0289\x03\x02\x02\x02\u0297\u028D\x03\x02" +
    "\x02\x02\u0297\u0290\x03\x02\x02\x02\u0298i\x03\x02\x02\x02\u0299\u029A" +
    "\x07\x17\x02\x02\u029A\u029F\x05\x98M\x02\u029B\u029C\x07\x07\x02\x02" +
    "\u029C\u029E\x05\x98M\x02\u029D\u029B\x03\x02\x02\x02\u029E\u02A1\x03" +
    "\x02\x02\x02\u029F\u029D\x03\x02\x02\x02\u029F\u02A0\x03\x02\x02\x02\u02A0" +
    "\u02A2\x03\x02\x02\x02\u02A1\u029F\x03\x02\x02\x02\u02A2\u02A3\x07\x18" +
    "\x02\x02\u02A3k\x03\x02\x02\x02\u02A4\u02C0\x07\r\x02\x02\u02A5\u02AA" +
    "\x07\x0E\x02\x02\u02A6\u02A7\x07\r\x02\x02\u02A7\u02A9\x07\x0E\x02\x02" +
    "\u02A8\u02A6\x03\x02\x02\x02\u02A9\u02AC\x03\x02\x02\x02\u02AA\u02A8\x03" +
    "\x02\x02\x02\u02AA\u02AB\x03\x02\x02\x02\u02AB\u02AD\x03\x02\x02\x02\u02AC" +
    "\u02AA\x03\x02\x02\x02\u02AD\u02C1\x05v<\x02\u02AE\u02AF\x05\\/\x02\u02AF" +
    "\u02B6\x07\x0E\x02\x02\u02B0\u02B1\x07\r\x02\x02\u02B1\u02B2\x05\\/\x02" +
    "\u02B2\u02B3\x07\x0E\x02\x02\u02B3\u02B5\x03\x02\x02\x02\u02B4\u02B0\x03" +
    "\x02\x02\x02\u02B5\u02B8\x03\x02\x02\x02\u02B6\u02B4\x03\x02\x02\x02\u02B6" +
    "\u02B7\x03\x02\x02\x02\u02B7\u02BD\x03\x02\x02\x02\u02B8\u02B6\x03\x02" +
    "\x02\x02\u02B9\u02BA\x07\r\x02\x02\u02BA\u02BC\x07\x0E\x02\x02\u02BB\u02B9" +
    "\x03\x02\x02\x02\u02BC\u02BF\x03\x02\x02\x02\u02BD\u02BB\x03\x02\x02\x02" +
    "\u02BD\u02BE\x03\x02\x02\x02\u02BE\u02C1\x03\x02\x02\x02\u02BF\u02BD\x03" +
    "\x02\x02\x02\u02C0\u02A5\x03\x02\x02\x02\u02C0\u02AE\x03\x02\x02\x02\u02C1" +
    "m\x03\x02\x02\x02\u02C2\u02DB\x07\x05\x02\x02\u02C3\u02C6\x05\x96L\x02" +
    "\u02C4\u02C6\x05\\/\x02\u02C5\u02C3\x03\x02\x02\x02\u02C5\u02C4\x03\x02" +
    "\x02\x02\u02C6\u02C7\x03\x02\x02\x02\u02C7\u02CA\x07.\x02\x02\u02C8\u02CB" +
    "\x05\x96L\x02\u02C9\u02CB\x05\\/\x02\u02CA\u02C8\x03\x02\x02\x02\u02CA" +
    "\u02C9\x03\x02\x02\x02\u02CB\u02D8\x03\x02\x02\x02\u02CC\u02CF\x07\x07" +
    "\x02\x02\u02CD\u02D0\x05\x96L\x02\u02CE\u02D0\x05\\/\x02\u02CF\u02CD\x03" +
    "\x02\x02\x02\u02CF\u02CE\x03\x02\x02\x02\u02D0\u02D1\x03\x02\x02\x02\u02D1" +
    "\u02D4\x07.\x02\x02\u02D2\u02D5\x05\x96L\x02\u02D3\u02D5\x05\\/\x02\u02D4" +
    "\u02D2\x03\x02\x02\x02\u02D4\u02D3\x03\x02\x02\x02\u02D5\u02D7\x03\x02" +
    "\x02\x02\u02D6\u02CC\x03\x02\x02\x02\u02D7\u02DA\x03\x02\x02\x02\u02D8" +
    "\u02D6\x03\x02\x02\x02\u02D8\u02D9\x03\x02\x02\x02\u02D9\u02DC\x03\x02" +
    "\x02\x02\u02DA\u02D8\x03\x02\x02\x02\u02DB\u02C5\x03\x02\x02\x02\u02DB" +
    "\u02DC\x03\x02\x02\x02\u02DC\u02DD\x03\x02\x02\x02\u02DD\u02DE\x07\x06" +
    "\x02\x02\u02DEo\x03\x02\x02\x02\u02DF\u02E2\x07\x05\x02\x02\u02E0\u02E3" +
    "\x05\x96L\x02\u02E1\u02E3\x05\\/\x02\u02E2\u02E0\x03\x02\x02\x02\u02E2" +
    "\u02E1\x03\x02\x02\x02\u02E3\u02EB\x03\x02\x02\x02\u02E4\u02E7\x07\x07" +
    "\x02\x02\u02E5\u02E8\x05\x96L\x02\u02E6\u02E8\x05\\/\x02\u02E7\u02E5\x03" +
    "\x02\x02\x02\u02E7\u02E6\x03\x02\x02\x02\u02E8\u02EA\x03\x02\x02\x02\u02E9" +
    "\u02E4\x03\x02\x02\x02\u02EA\u02ED\x03\x02\x02\x02\u02EB\u02E9\x03\x02" +
    "\x02\x02\u02EB\u02EC\x03\x02\x02\x02\u02EC\u02EE\x03\x02\x02\x02\u02ED" +
    "\u02EB\x03\x02\x02\x02\u02EE\u02EF\x07\x06\x02\x02\u02EFq\x03\x02\x02" +
    "\x02\u02F0\u02F1\x05x=\x02\u02F1s\x03\x02\x02\x02\u02F2\u02F5\x05v<\x02" +
    "\u02F3\u02F5\x05\\/\x02\u02F4\u02F2\x03\x02\x02\x02\u02F4\u02F3\x03\x02" +
    "\x02\x02\u02F5u\x03\x02\x02\x02\u02F6\u0302\x07\x05\x02\x02\u02F7\u02FC" +
    "\x05t;\x02\u02F8\u02F9\x07\x07\x02\x02\u02F9\u02FB\x05t;\x02\u02FA\u02F8" +
    "\x03\x02\x02\x02\u02FB\u02FE\x03\x02\x02\x02\u02FC\u02FA\x03\x02\x02\x02" +
    "\u02FC\u02FD\x03\x02\x02\x02\u02FD\u0300\x03\x02\x02\x02\u02FE\u02FC\x03" +
    "\x02\x02\x02\u02FF\u0301\x07\x07\x02\x02\u0300\u02FF\x03\x02\x02\x02\u0300" +
    "\u0301\x03\x02\x02\x02\u0301\u0303\x03\x02\x02\x02\u0302\u02F7\x03\x02" +
    "\x02\x02\u0302\u0303\x03\x02\x02\x02\u0303\u0304\x03\x02\x02\x02\u0304" +
    "\u0305\x07\x06\x02\x02\u0305w\x03\x02\x02\x02\u0306\u0308\x07\b\x02\x02" +
    "\u0307\u0309\x05b2\x02\u0308\u0307\x03\x02\x02\x02\u0308\u0309\x03\x02" +
    "\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\u030B\x07\t\x02\x02\u030By" +
    "\x03\x02\x02\x02\u030C\u0310\x07\x05\x02\x02\u030D\u030F\x05\x82B\x02" +
    "\u030E\u030D\x03\x02\x02\x02\u030F\u0312\x03\x02\x02\x02\u0310\u030E\x03" +
    "\x02\x02\x02\u0310\u0311\x03\x02\x02\x02\u0311\u0313\x03\x02\x02\x02\u0312" +
    "\u0310\x03\x02\x02\x02\u0313\u0314\x07\x06\x02\x02\u0314{\x03\x02\x02" +
    "\x02\u0315\u0316\x07B\x02\x02\u0316\u0317\x05z>\x02\u0317}\x03\x02\x02" +
    "\x02\u0318\u031A\x05\x80A\x02\u0319\u0318\x03\x02\x02\x02\u031A\u031D" +
    "\x03\x02\x02\x02\u031B\u0319\x03\x02\x02\x02\u031B\u031C\x03\x02\x02\x02" +
    "\u031C\u031E\x03\x02\x02\x02\u031D\u031B\x03\x02\x02\x02\u031E\u031F\x05" +
    "\x98M\x02\u031F\u0322\x05,\x17\x02\u0320\u0321\x07\n\x02\x02\u0321\u0323" +
    "\x05\\/\x02\u0322\u0320\x03\x02\x02\x02\u0322\u0323\x03\x02\x02\x02\u0323" +
    "\u032C\x03\x02\x02\x02\u0324\u0325\x07\x07\x02\x02\u0325\u0328\x05,\x17" +
    "\x02\u0326\u0327\x07\n\x02\x02\u0327\u0329\x05\\/\x02\u0328\u0326\x03" +
    "\x02\x02\x02\u0328\u0329\x03\x02\x02\x02\u0329\u032B\x03\x02\x02\x02\u032A" +
    "\u0324\x03\x02\x02\x02\u032B\u032E\x03\x02\x02\x02\u032C\u032A\x03\x02" +
    "\x02\x02\u032C\u032D\x03\x02\x02\x02\u032D\x7F\x03\x02\x02\x02\u032E\u032C" +
    "\x03\x02\x02\x02\u032F\u0330\t\v\x02\x02\u0330\x81\x03\x02\x02\x02\u0331" +
    "\u0332\x05~@\x02\u0332\u0333\x07\x04\x02\x02\u0333\u0336\x03\x02\x02\x02" +
    "\u0334\u0336\x05\x94K\x02\u0335\u0331\x03\x02\x02\x02\u0335\u0334\x03" +
    "\x02\x02\x02\u0336\x83\x03\x02\x02\x02\u0337\u033C\x07p\x02\x02\u0338" +
    "\u0339\x07\f\x02\x02\u0339\u033B\x07p\x02\x02\u033A\u0338\x03\x02\x02" +
    "\x02\u033B\u033E\x03\x02\x02\x02\u033C\u033A\x03\x02\x02\x02\u033C\u033D" +
    "\x03\x02\x02\x02\u033D\x85\x03\x02\x02\x02\u033E\u033C\x03\x02\x02\x02" +
    "\u033F\u034C\x05\x8AF\x02\u0340\u0342\x05\x88E\x02\u0341\u0340\x03\x02" +
    "\x02\x02\u0341\u0342\x03\x02\x02\x02\u0342\u0343\x03\x02\x02\x02\u0343" +
    "\u0345\x07\x04\x02\x02\u0344\u0346\x05\\/\x02\u0345\u0344\x03\x02\x02" +
    "\x02\u0345\u0346\x03\x02\x02\x02\u0346\u0347\x03\x02\x02\x02\u0347\u0349" +
    "\x07\x04\x02\x02\u0348\u034A\x05\x8CG\x02\u0349\u0348\x03\x02\x02\x02" +
    "\u0349\u034A\x03\x02\x02\x02\u034A\u034C\x03\x02\x02\x02\u034B\u033F\x03" +
    "\x02\x02\x02\u034B\u0341\x03\x02\x02\x02\u034C\x87\x03\x02\x02\x02\u034D" +
    "\u0350\x05~@\x02\u034E\u0350\x05b2\x02\u034F\u034D\x03\x02\x02\x02\u034F" +
    "\u034E\x03\x02\x02\x02\u0350\x89\x03\x02\x02\x02\u0351\u0352\x05\x98M" +
    "\x02\u0352\u0353\x05,\x17\x02\u0353\u0354\x07#\x02\x02\u0354\u0355\x05" +
    "\\/\x02\u0355\x8B\x03\x02\x02\x02\u0356\u0357\x05b2\x02\u0357\x8D\x03" +
    "\x02\x02\x02\u0358\u0359\x07S\x02\x02\u0359\u035A\x07\b\x02\x02\u035A" +
    "\u035B\x05\x90I\x02\u035B\u035C\x05,\x17\x02\u035C\u035D\x07\t\x02\x02" +
    "\u035D\u035E\x05z>\x02\u035E\x8F\x03\x02\x02\x02\u035F\u0364\x05\x84C" +
    "\x02\u0360\u0361\x07\x1F\x02\x02\u0361\u0363\x05\x84C\x02\u0362\u0360" +
    "\x03\x02\x02\x02\u0363\u0366\x03\x02\x02\x02\u0364\u0362\x03\x02\x02\x02" +
    "\u0364\u0365\x03\x02\x02\x02\u0365\x91\x03\x02\x02\x02\u0366\u0364\x03" +
    "\x02\x02\x02\u0367\u0368\x07T\x02\x02\u0368\u0369\x05z>\x02\u0369\x93" +
    "\x03\x02\x02\x02\u036A\u03A5\x05z>\x02\u036B\u036C\x07J\x02\x02\u036C" +
    "\u03A5\x07\x04\x02\x02\u036D\u036E\x07K\x02\x02\u036E\u03A5\x07\x04\x02" +
    "\x02\u036F\u0370\x07L\x02\x02\u0370\u0371\x05\x94K\x02\u0371\u0372\x07" +
    "U\x02\x02\u0372\u0373\x05`1\x02\u0373\u0374\x07\x04\x02\x02\u0374\u03A5" +
    "\x03\x02\x02\x02\u0375\u0376\x07N\x02\x02\u0376\u0377\x07\b\x02\x02\u0377" +
    "\u0378\x05\x86D\x02\u0378\u0379\x07\t\x02\x02\u0379\u037A\x05\x94K\x02" +
    "\u037A\u03A5\x03\x02\x02\x02\u037B\u037C\x07O\x02\x02\u037C\u037D\x05" +
    "`1\x02\u037D\u0380\x05\x94K\x02\u037E\u037F\x07M\x02\x02\u037F\u0381\x05" +
    "\x94K\x02\u0380\u037E\x03\x02\x02\x02\u0380\u0381\x03\x02\x02\x02\u0381" +
    "\u03A5\x03\x02\x02\x02\u0382\u0384\x07P\x02\x02\u0383\u0385\x05\\/\x02" +
    "\u0384\u0383\x03\x02\x02\x02\u0384\u0385\x03\x02\x02\x02\u0385\u0386\x03" +
    "\x02\x02\x02\u0386\u03A5\x07\x04\x02\x02\u0387\u0388\x07Q\x02\x02\u0388" +
    "\u0389\x05\\/\x02\u0389\u038A\x07\x04\x02\x02\u038A\u03A5\x03\x02\x02" +
    "\x02\u038B\u038C\x07R\x02\x02\u038C\u0396\x05z>\x02\u038D\u038F\x05\x8E" +
    "H\x02\u038E\u038D\x03\x02\x02\x02\u038F\u0390\x03\x02\x02\x02\u0390\u038E" +
    "\x03\x02\x02\x02\u0390\u0391\x03\x02\x02\x02\u0391\u0393\x03\x02\x02\x02" +
    "\u0392\u0394\x05\x92J\x02\u0393\u0392\x03\x02\x02\x02\u0393\u0394\x03" +
    "\x02\x02\x02\u0394\u0397\x03\x02\x02\x02\u0395\u0397\x05\x92J\x02\u0396" +
    "\u038E\x03\x02\x02\x02\u0396\u0395\x03\x02\x02\x02\u0397\u03A5\x03\x02" +
    "\x02\x02\u0398\u0399\x07U\x02\x02\u0399\u039A\x05`1\x02\u039A\u039B\x05" +
    "\x94K\x02\u039B\u03A5\x03\x02\x02\x02\u039C\u03A5\x07\x04\x02\x02\u039D" +
    "\u03A5\x05d3\x02\u039E\u039F\x05f4\x02\u039F\u03A0\x07\x04\x02\x02\u03A0" +
    "\u03A5\x03\x02\x02\x02\u03A1\u03A2\x05\\/\x02\u03A2\u03A3\x07\x04\x02" +
    "\x02\u03A3\u03A5\x03\x02\x02\x02\u03A4\u036A\x03\x02\x02\x02\u03A4\u036B" +
    "\x03\x02\x02\x02\u03A4\u036D\x03\x02\x02\x02\u03A4\u036F\x03\x02\x02\x02" +
    "\u03A4\u0375\x03\x02\x02\x02\u03A4\u037B\x03\x02\x02\x02\u03A4\u0382\x03" +
    "\x02\x02\x02\u03A4\u0387\x03\x02\x02\x02\u03A4\u038B\x03\x02\x02\x02\u03A4" +
    "\u0398\x03\x02\x02\x02\u03A4\u039C\x03\x02\x02\x02\u03A4\u039D\x03\x02" +
    "\x02\x02\u03A4\u039E\x03\x02\x02\x02\u03A4\u03A1\x03\x02\x02\x02\u03A5" +
    "\x95\x03\x02\x02\x02\u03A6\u03AE\x07n\x02\x02\u03A7\u03AE\x07o\x02\x02" +
    "\u03A8\u03AE\x07k\x02\x02\u03A9\u03AE\x073\x02\x02\u03AA\u03AE\x07:\x02" +
    "\x02\u03AB\u03AE\x07m\x02\x02\u03AC\u03AE\x07l\x02\x02\u03AD\u03A6\x03" +
    "\x02\x02\x02\u03AD\u03A7\x03\x02\x02\x02\u03AD\u03A8\x03\x02\x02\x02\u03AD" +
    "\u03A9\x03\x02\x02\x02\u03AD\u03AA\x03\x02\x02\x02\u03AD\u03AB\x03\x02" +
    "\x02\x02\u03AD\u03AC\x03\x02\x02\x02\u03AE\x97\x03\x02\x02\x02\u03AF\u03B9" +
    "\x07H\x02\x02\u03B0\u03B1\x05\x84C\x02\u03B1\u03B2\x07\r\x02\x02\u03B2" +
    "\u03B3\x07\x0E\x02\x02\u03B3\u03B9\x03\x02\x02\x02\u03B4\u03B6\x05\x84" +
    "C\x02\u03B5\u03B7\x05j6\x02\u03B6\u03B5\x03\x02\x02\x02\u03B6\u03B7\x03" +
    "\x02\x02\x02\u03B7\u03B9\x03\x02\x02\x02\u03B8\u03AF\x03\x02\x02\x02\u03B8" +
    "\u03B0\x03\x02\x02\x02\u03B8\u03B4\x03\x02\x02\x02\u03B9\x99\x03\x02\x02" +
    "\x02l\x9F\xA3\xA9\xB0\xB6\xBB\xC4\xC7\xD8\xDE\xE0\xE9\xED\xEF\xF5\xFD" +
    "\u0102\u010F\u011C\u012A\u012C\u0133\u0139\u013D\u0147\u0151\u0158\u015C" +
    "\u0165\u0167\u016E\u0179\u0181\u0183\u018B\u018D\u0195\u019C\u01A4\u01A8" +
    "\u01AD\u01B5\u01B9\u01BD\u01C2\u01C9\u01D4\u01DE\u01E1\u01E9\u01F2\u0208" +
    "\u021B\u0221\u0226\u022B\u024C\u0259\u025B\u0267\u0272\u0278\u0287\u0295" +
    "\u0297\u029F\u02AA\u02B6\u02BD\u02C0\u02C5\u02CA\u02CF\u02D4\u02D8\u02DB" +
    "\u02E2\u02E7\u02EB\u02F4\u02FC\u0300\u0302\u0308\u0310\u031B\u0322\u0328" +
    "\u032C\u0335\u033C\u0341\u0345\u0349\u034B\u034F\u0364\u0380\u0384\u0390" +
    "\u0393\u0396\u03A4\u03AD\u03B6\u03B8";
ApexcodeParser._serializedATN = Utils.join([
    ApexcodeParser._serializedATNSegment0,
    ApexcodeParser._serializedATNSegment1
], "");
__decorate([
    Decorators_2.Override,
    Decorators_1.NotNull
], ApexcodeParser.prototype, "vocabulary", null);
__decorate([
    Decorators_2.Override
], ApexcodeParser.prototype, "grammarFileName", null);
__decorate([
    Decorators_2.Override
], ApexcodeParser.prototype, "ruleNames", null);
__decorate([
    Decorators_2.Override
], ApexcodeParser.prototype, "serializedATN", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "compilationUnit", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "typeDeclaration", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classOrInterfaceModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classOrInterfaceVisibilityModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classSharingModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classDeclaration", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "className", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "extendsDeclaration", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "implementsDeclaration", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classBody", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classBodyMember", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classConstructor", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classConstructorModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "interfaceDeclaration", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "interfaceName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "interfaceBody", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "triggerDeclaration", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "triggerName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "triggerSObjectType", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classVariable", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classVariableModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "variableName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classMethod", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "methodParameters", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "methodParameter", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "methodParameterName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "methodHeader", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "methodHeaderModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "methodName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "methodBody", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classProperty", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "propertyModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "propertyName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "propertyGet", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "propertySet", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "propertyGetSetModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "enumDeclaration", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "enumName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "enumConstants", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "enumConstant", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "annotation", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "annotationName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "annotationElementValuePairs", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "annotationElementValuePair", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "annotationElementValue", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "expression", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "primary", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "parExpression", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "expressionList", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "runas_expression", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "db_shortcut_expression", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "creator", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "typeArguments", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "arrayCreatorRest", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "mapCreatorRest", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "setCreatorRest", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "classCreatorRest", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "variableInitializer", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "arrayInitializer", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "arguments", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "codeBlock", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "staticCodeBlock", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "localVariableDeclaration", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "localVariableModifier", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "blockStatement", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "qualifiedName", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "forControl", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "forInit", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "enhancedForControl", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "forUpdate", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "catchClause", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "catchType", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "finallyBlock", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "statement", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "literal", null);
__decorate([
    RuleVersion_1.RuleVersion(0)
], ApexcodeParser.prototype, "dataType", null);
exports.ApexcodeParser = ApexcodeParser;
class CompilationUnitContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    EOF() { return this.getToken(ApexcodeParser.EOF, 0); }
    typeDeclaration(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeDeclarationContext);
        }
        else {
            return this.getRuleContext(i, TypeDeclarationContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_compilationUnit; }
    enterRule(listener) {
        if (listener.enterCompilationUnit)
            listener.enterCompilationUnit(this);
    }
    exitRule(listener) {
        if (listener.exitCompilationUnit)
            listener.exitCompilationUnit(this);
    }
    accept(visitor) {
        if (visitor.visitCompilationUnit)
            return visitor.visitCompilationUnit(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], CompilationUnitContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], CompilationUnitContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], CompilationUnitContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], CompilationUnitContext.prototype, "accept", null);
exports.CompilationUnitContext = CompilationUnitContext;
class TypeDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        if (parent !== undefined && invokingState !== undefined) {
            super(parent, invokingState);
        }
        else {
            super();
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_typeDeclaration; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
__decorate([
    Decorators_2.Override
], TypeDeclarationContext.prototype, "ruleIndex", null);
exports.TypeDeclarationContext = TypeDeclarationContext;
class TriggerDefContext extends TypeDeclarationContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    triggerDeclaration() {
        return this.getRuleContext(0, TriggerDeclarationContext);
    }
    enterRule(listener) {
        if (listener.enterTriggerDef)
            listener.enterTriggerDef(this);
    }
    exitRule(listener) {
        if (listener.exitTriggerDef)
            listener.exitTriggerDef(this);
    }
    accept(visitor) {
        if (visitor.visitTriggerDef)
            return visitor.visitTriggerDef(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TriggerDefContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TriggerDefContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TriggerDefContext.prototype, "accept", null);
exports.TriggerDefContext = TriggerDefContext;
class ClassDefContext extends TypeDeclarationContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    classDeclaration() {
        return this.getRuleContext(0, ClassDeclarationContext);
    }
    classOrInterfaceModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassOrInterfaceModifierContext);
        }
        else {
            return this.getRuleContext(i, ClassOrInterfaceModifierContext);
        }
    }
    enterRule(listener) {
        if (listener.enterClassDef)
            listener.enterClassDef(this);
    }
    exitRule(listener) {
        if (listener.exitClassDef)
            listener.exitClassDef(this);
    }
    accept(visitor) {
        if (visitor.visitClassDef)
            return visitor.visitClassDef(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassDefContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassDefContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassDefContext.prototype, "accept", null);
exports.ClassDefContext = ClassDefContext;
class EnumDefContext extends TypeDeclarationContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    enumDeclaration() {
        return this.getRuleContext(0, EnumDeclarationContext);
    }
    enterRule(listener) {
        if (listener.enterEnumDef)
            listener.enterEnumDef(this);
    }
    exitRule(listener) {
        if (listener.exitEnumDef)
            listener.exitEnumDef(this);
    }
    accept(visitor) {
        if (visitor.visitEnumDef)
            return visitor.visitEnumDef(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], EnumDefContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], EnumDefContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], EnumDefContext.prototype, "accept", null);
exports.EnumDefContext = EnumDefContext;
class InterfaceDefContext extends TypeDeclarationContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    interfaceDeclaration() {
        return this.getRuleContext(0, InterfaceDeclarationContext);
    }
    classOrInterfaceModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassOrInterfaceModifierContext);
        }
        else {
            return this.getRuleContext(i, ClassOrInterfaceModifierContext);
        }
    }
    enterRule(listener) {
        if (listener.enterInterfaceDef)
            listener.enterInterfaceDef(this);
    }
    exitRule(listener) {
        if (listener.exitInterfaceDef)
            listener.exitInterfaceDef(this);
    }
    accept(visitor) {
        if (visitor.visitInterfaceDef)
            return visitor.visitInterfaceDef(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InterfaceDefContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InterfaceDefContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InterfaceDefContext.prototype, "accept", null);
exports.InterfaceDefContext = InterfaceDefContext;
class EmptyDefContext extends TypeDeclarationContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    enterRule(listener) {
        if (listener.enterEmptyDef)
            listener.enterEmptyDef(this);
    }
    exitRule(listener) {
        if (listener.exitEmptyDef)
            listener.exitEmptyDef(this);
    }
    accept(visitor) {
        if (visitor.visitEmptyDef)
            return visitor.visitEmptyDef(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], EmptyDefContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], EmptyDefContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], EmptyDefContext.prototype, "accept", null);
exports.EmptyDefContext = EmptyDefContext;
class ClassOrInterfaceModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    annotation() {
        return this.tryGetRuleContext(0, AnnotationContext);
    }
    classOrInterfaceVisibilityModifier() {
        return this.tryGetRuleContext(0, ClassOrInterfaceVisibilityModifierContext);
    }
    classSharingModifier() {
        return this.tryGetRuleContext(0, ClassSharingModifierContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_classOrInterfaceModifier; }
    enterRule(listener) {
        if (listener.enterClassOrInterfaceModifier)
            listener.enterClassOrInterfaceModifier(this);
    }
    exitRule(listener) {
        if (listener.exitClassOrInterfaceModifier)
            listener.exitClassOrInterfaceModifier(this);
    }
    accept(visitor) {
        if (visitor.visitClassOrInterfaceModifier)
            return visitor.visitClassOrInterfaceModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassOrInterfaceModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassOrInterfaceModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassOrInterfaceModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassOrInterfaceModifierContext.prototype, "accept", null);
exports.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext;
class ClassOrInterfaceVisibilityModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    PUBLIC() { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
    PRIVATE() { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
    ABSTRACT() { return this.tryGetToken(ApexcodeParser.ABSTRACT, 0); }
    GLOBAL() { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
    VIRTUAL() { return this.tryGetToken(ApexcodeParser.VIRTUAL, 0); }
    WEBSERVICE() { return this.tryGetToken(ApexcodeParser.WEBSERVICE, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_classOrInterfaceVisibilityModifier; }
    enterRule(listener) {
        if (listener.enterClassOrInterfaceVisibilityModifier)
            listener.enterClassOrInterfaceVisibilityModifier(this);
    }
    exitRule(listener) {
        if (listener.exitClassOrInterfaceVisibilityModifier)
            listener.exitClassOrInterfaceVisibilityModifier(this);
    }
    accept(visitor) {
        if (visitor.visitClassOrInterfaceVisibilityModifier)
            return visitor.visitClassOrInterfaceVisibilityModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassOrInterfaceVisibilityModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassOrInterfaceVisibilityModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassOrInterfaceVisibilityModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassOrInterfaceVisibilityModifierContext.prototype, "accept", null);
exports.ClassOrInterfaceVisibilityModifierContext = ClassOrInterfaceVisibilityModifierContext;
class ClassSharingModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    WITHOUT_SHARING() { return this.tryGetToken(ApexcodeParser.WITHOUT_SHARING, 0); }
    WITH_SHARING() { return this.tryGetToken(ApexcodeParser.WITH_SHARING, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_classSharingModifier; }
    enterRule(listener) {
        if (listener.enterClassSharingModifier)
            listener.enterClassSharingModifier(this);
    }
    exitRule(listener) {
        if (listener.exitClassSharingModifier)
            listener.exitClassSharingModifier(this);
    }
    accept(visitor) {
        if (visitor.visitClassSharingModifier)
            return visitor.visitClassSharingModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassSharingModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassSharingModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassSharingModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassSharingModifierContext.prototype, "accept", null);
exports.ClassSharingModifierContext = ClassSharingModifierContext;
class ClassDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    CLASS() { return this.getToken(ApexcodeParser.CLASS, 0); }
    className() {
        return this.getRuleContext(0, ClassNameContext);
    }
    classBody() {
        return this.getRuleContext(0, ClassBodyContext);
    }
    extendsDeclaration() {
        return this.tryGetRuleContext(0, ExtendsDeclarationContext);
    }
    implementsDeclaration() {
        return this.tryGetRuleContext(0, ImplementsDeclarationContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_classDeclaration; }
    enterRule(listener) {
        if (listener.enterClassDeclaration)
            listener.enterClassDeclaration(this);
    }
    exitRule(listener) {
        if (listener.exitClassDeclaration)
            listener.exitClassDeclaration(this);
    }
    accept(visitor) {
        if (visitor.visitClassDeclaration)
            return visitor.visitClassDeclaration(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassDeclarationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassDeclarationContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassDeclarationContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassDeclarationContext.prototype, "accept", null);
exports.ClassDeclarationContext = ClassDeclarationContext;
class ClassNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_className; }
    enterRule(listener) {
        if (listener.enterClassName)
            listener.enterClassName(this);
    }
    exitRule(listener) {
        if (listener.exitClassName)
            listener.exitClassName(this);
    }
    accept(visitor) {
        if (visitor.visitClassName)
            return visitor.visitClassName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassNameContext.prototype, "accept", null);
exports.ClassNameContext = ClassNameContext;
class ExtendsDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    EXTENDS() { return this.getToken(ApexcodeParser.EXTENDS, 0); }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_extendsDeclaration; }
    enterRule(listener) {
        if (listener.enterExtendsDeclaration)
            listener.enterExtendsDeclaration(this);
    }
    exitRule(listener) {
        if (listener.exitExtendsDeclaration)
            listener.exitExtendsDeclaration(this);
    }
    accept(visitor) {
        if (visitor.visitExtendsDeclaration)
            return visitor.visitExtendsDeclaration(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ExtendsDeclarationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ExtendsDeclarationContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ExtendsDeclarationContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ExtendsDeclarationContext.prototype, "accept", null);
exports.ExtendsDeclarationContext = ExtendsDeclarationContext;
class ImplementsDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    IMPLEMENTS() { return this.getToken(ApexcodeParser.IMPLEMENTS, 0); }
    dataType(i) {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeContext);
        }
        else {
            return this.getRuleContext(i, DataTypeContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_implementsDeclaration; }
    enterRule(listener) {
        if (listener.enterImplementsDeclaration)
            listener.enterImplementsDeclaration(this);
    }
    exitRule(listener) {
        if (listener.exitImplementsDeclaration)
            listener.exitImplementsDeclaration(this);
    }
    accept(visitor) {
        if (visitor.visitImplementsDeclaration)
            return visitor.visitImplementsDeclaration(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ImplementsDeclarationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ImplementsDeclarationContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ImplementsDeclarationContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ImplementsDeclarationContext.prototype, "accept", null);
exports.ImplementsDeclarationContext = ImplementsDeclarationContext;
class ClassBodyContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    staticCodeBlock(i) {
        if (i === undefined) {
            return this.getRuleContexts(StaticCodeBlockContext);
        }
        else {
            return this.getRuleContext(i, StaticCodeBlockContext);
        }
    }
    classBodyMember(i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassBodyMemberContext);
        }
        else {
            return this.getRuleContext(i, ClassBodyMemberContext);
        }
    }
    blockStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockStatementContext);
        }
        else {
            return this.getRuleContext(i, BlockStatementContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_classBody; }
    enterRule(listener) {
        if (listener.enterClassBody)
            listener.enterClassBody(this);
    }
    exitRule(listener) {
        if (listener.exitClassBody)
            listener.exitClassBody(this);
    }
    accept(visitor) {
        if (visitor.visitClassBody)
            return visitor.visitClassBody(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassBodyContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassBodyContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassBodyContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassBodyContext.prototype, "accept", null);
exports.ClassBodyContext = ClassBodyContext;
class ClassBodyMemberContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    enumDeclaration() {
        return this.tryGetRuleContext(0, EnumDeclarationContext);
    }
    classConstructor() {
        return this.tryGetRuleContext(0, ClassConstructorContext);
    }
    classMethod() {
        return this.tryGetRuleContext(0, ClassMethodContext);
    }
    classVariable() {
        return this.tryGetRuleContext(0, ClassVariableContext);
    }
    classProperty() {
        return this.tryGetRuleContext(0, ClassPropertyContext);
    }
    typeDeclaration() {
        return this.tryGetRuleContext(0, TypeDeclarationContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_classBodyMember; }
    enterRule(listener) {
        if (listener.enterClassBodyMember)
            listener.enterClassBodyMember(this);
    }
    exitRule(listener) {
        if (listener.exitClassBodyMember)
            listener.exitClassBodyMember(this);
    }
    accept(visitor) {
        if (visitor.visitClassBodyMember)
            return visitor.visitClassBodyMember(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassBodyMemberContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassBodyMemberContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassBodyMemberContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassBodyMemberContext.prototype, "accept", null);
exports.ClassBodyMemberContext = ClassBodyMemberContext;
class ClassConstructorContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    methodBody() {
        return this.getRuleContext(0, MethodBodyContext);
    }
    annotation(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    }
    classConstructorModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassConstructorModifierContext);
        }
        else {
            return this.getRuleContext(i, ClassConstructorModifierContext);
        }
    }
    methodParameters() {
        return this.tryGetRuleContext(0, MethodParametersContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_classConstructor; }
    enterRule(listener) {
        if (listener.enterClassConstructor)
            listener.enterClassConstructor(this);
    }
    exitRule(listener) {
        if (listener.exitClassConstructor)
            listener.exitClassConstructor(this);
    }
    accept(visitor) {
        if (visitor.visitClassConstructor)
            return visitor.visitClassConstructor(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassConstructorContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassConstructorContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassConstructorContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassConstructorContext.prototype, "accept", null);
exports.ClassConstructorContext = ClassConstructorContext;
class ClassConstructorModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    PUBLIC() { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
    PROTECTED() { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
    PRIVATE() { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
    GLOBAL() { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
    OVERRIDE() { return this.tryGetToken(ApexcodeParser.OVERRIDE, 0); }
    VIRTUAL() { return this.tryGetToken(ApexcodeParser.VIRTUAL, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_classConstructorModifier; }
    enterRule(listener) {
        if (listener.enterClassConstructorModifier)
            listener.enterClassConstructorModifier(this);
    }
    exitRule(listener) {
        if (listener.exitClassConstructorModifier)
            listener.exitClassConstructorModifier(this);
    }
    accept(visitor) {
        if (visitor.visitClassConstructorModifier)
            return visitor.visitClassConstructorModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassConstructorModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassConstructorModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassConstructorModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassConstructorModifierContext.prototype, "accept", null);
exports.ClassConstructorModifierContext = ClassConstructorModifierContext;
class InterfaceDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    INTERFACE() { return this.getToken(ApexcodeParser.INTERFACE, 0); }
    interfaceName() {
        return this.getRuleContext(0, InterfaceNameContext);
    }
    interfaceBody() {
        return this.getRuleContext(0, InterfaceBodyContext);
    }
    extendsDeclaration() {
        return this.tryGetRuleContext(0, ExtendsDeclarationContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_interfaceDeclaration; }
    enterRule(listener) {
        if (listener.enterInterfaceDeclaration)
            listener.enterInterfaceDeclaration(this);
    }
    exitRule(listener) {
        if (listener.exitInterfaceDeclaration)
            listener.exitInterfaceDeclaration(this);
    }
    accept(visitor) {
        if (visitor.visitInterfaceDeclaration)
            return visitor.visitInterfaceDeclaration(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InterfaceDeclarationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], InterfaceDeclarationContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InterfaceDeclarationContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InterfaceDeclarationContext.prototype, "accept", null);
exports.InterfaceDeclarationContext = InterfaceDeclarationContext;
class InterfaceNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_interfaceName; }
    enterRule(listener) {
        if (listener.enterInterfaceName)
            listener.enterInterfaceName(this);
    }
    exitRule(listener) {
        if (listener.exitInterfaceName)
            listener.exitInterfaceName(this);
    }
    accept(visitor) {
        if (visitor.visitInterfaceName)
            return visitor.visitInterfaceName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InterfaceNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], InterfaceNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InterfaceNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InterfaceNameContext.prototype, "accept", null);
exports.InterfaceNameContext = InterfaceNameContext;
class InterfaceBodyContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    methodHeader(i) {
        if (i === undefined) {
            return this.getRuleContexts(MethodHeaderContext);
        }
        else {
            return this.getRuleContext(i, MethodHeaderContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_interfaceBody; }
    enterRule(listener) {
        if (listener.enterInterfaceBody)
            listener.enterInterfaceBody(this);
    }
    exitRule(listener) {
        if (listener.exitInterfaceBody)
            listener.exitInterfaceBody(this);
    }
    accept(visitor) {
        if (visitor.visitInterfaceBody)
            return visitor.visitInterfaceBody(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InterfaceBodyContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], InterfaceBodyContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InterfaceBodyContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InterfaceBodyContext.prototype, "accept", null);
exports.InterfaceBodyContext = InterfaceBodyContext;
class TriggerDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    TRIGGER_KEYWORD() { return this.getToken(ApexcodeParser.TRIGGER_KEYWORD, 0); }
    triggerName() {
        return this.getRuleContext(0, TriggerNameContext);
    }
    TRIGGER_ON_KEYWORD() { return this.getToken(ApexcodeParser.TRIGGER_ON_KEYWORD, 0); }
    triggerSObjectType() {
        return this.getRuleContext(0, TriggerSObjectTypeContext);
    }
    TRIGGER_EVENT(i) {
        if (i === undefined) {
            return this.getTokens(ApexcodeParser.TRIGGER_EVENT);
        }
        else {
            return this.getToken(ApexcodeParser.TRIGGER_EVENT, i);
        }
    }
    classBody() {
        return this.getRuleContext(0, ClassBodyContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_triggerDeclaration; }
    enterRule(listener) {
        if (listener.enterTriggerDeclaration)
            listener.enterTriggerDeclaration(this);
    }
    exitRule(listener) {
        if (listener.exitTriggerDeclaration)
            listener.exitTriggerDeclaration(this);
    }
    accept(visitor) {
        if (visitor.visitTriggerDeclaration)
            return visitor.visitTriggerDeclaration(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TriggerDeclarationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], TriggerDeclarationContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TriggerDeclarationContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TriggerDeclarationContext.prototype, "accept", null);
exports.TriggerDeclarationContext = TriggerDeclarationContext;
class TriggerNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_triggerName; }
    enterRule(listener) {
        if (listener.enterTriggerName)
            listener.enterTriggerName(this);
    }
    exitRule(listener) {
        if (listener.exitTriggerName)
            listener.exitTriggerName(this);
    }
    accept(visitor) {
        if (visitor.visitTriggerName)
            return visitor.visitTriggerName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TriggerNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], TriggerNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TriggerNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TriggerNameContext.prototype, "accept", null);
exports.TriggerNameContext = TriggerNameContext;
class TriggerSObjectTypeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_triggerSObjectType; }
    enterRule(listener) {
        if (listener.enterTriggerSObjectType)
            listener.enterTriggerSObjectType(this);
    }
    exitRule(listener) {
        if (listener.exitTriggerSObjectType)
            listener.exitTriggerSObjectType(this);
    }
    accept(visitor) {
        if (visitor.visitTriggerSObjectType)
            return visitor.visitTriggerSObjectType(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TriggerSObjectTypeContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], TriggerSObjectTypeContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TriggerSObjectTypeContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TriggerSObjectTypeContext.prototype, "accept", null);
exports.TriggerSObjectTypeContext = TriggerSObjectTypeContext;
class ClassVariableContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    variableName(i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableNameContext);
        }
        else {
            return this.getRuleContext(i, VariableNameContext);
        }
    }
    annotation(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    }
    classVariableModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassVariableModifierContext);
        }
        else {
            return this.getRuleContext(i, ClassVariableModifierContext);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_classVariable; }
    enterRule(listener) {
        if (listener.enterClassVariable)
            listener.enterClassVariable(this);
    }
    exitRule(listener) {
        if (listener.exitClassVariable)
            listener.exitClassVariable(this);
    }
    accept(visitor) {
        if (visitor.visitClassVariable)
            return visitor.visitClassVariable(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassVariableContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassVariableContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassVariableContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassVariableContext.prototype, "accept", null);
exports.ClassVariableContext = ClassVariableContext;
class ClassVariableModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    PUBLIC() { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
    PROTECTED() { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
    PRIVATE() { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
    GLOBAL() { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
    FINAL() { return this.tryGetToken(ApexcodeParser.FINAL, 0); }
    STATIC() { return this.tryGetToken(ApexcodeParser.STATIC, 0); }
    TRANSIENT() { return this.tryGetToken(ApexcodeParser.TRANSIENT, 0); }
    WEBSERVICE() { return this.tryGetToken(ApexcodeParser.WEBSERVICE, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_classVariableModifier; }
    enterRule(listener) {
        if (listener.enterClassVariableModifier)
            listener.enterClassVariableModifier(this);
    }
    exitRule(listener) {
        if (listener.exitClassVariableModifier)
            listener.exitClassVariableModifier(this);
    }
    accept(visitor) {
        if (visitor.visitClassVariableModifier)
            return visitor.visitClassVariableModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassVariableModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassVariableModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassVariableModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassVariableModifierContext.prototype, "accept", null);
exports.ClassVariableModifierContext = ClassVariableModifierContext;
class VariableNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_variableName; }
    enterRule(listener) {
        if (listener.enterVariableName)
            listener.enterVariableName(this);
    }
    exitRule(listener) {
        if (listener.exitVariableName)
            listener.exitVariableName(this);
    }
    accept(visitor) {
        if (visitor.visitVariableName)
            return visitor.visitVariableName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], VariableNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], VariableNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], VariableNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], VariableNameContext.prototype, "accept", null);
exports.VariableNameContext = VariableNameContext;
class ClassMethodContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    methodHeader() {
        return this.getRuleContext(0, MethodHeaderContext);
    }
    methodBody() {
        return this.tryGetRuleContext(0, MethodBodyContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_classMethod; }
    enterRule(listener) {
        if (listener.enterClassMethod)
            listener.enterClassMethod(this);
    }
    exitRule(listener) {
        if (listener.exitClassMethod)
            listener.exitClassMethod(this);
    }
    accept(visitor) {
        if (visitor.visitClassMethod)
            return visitor.visitClassMethod(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassMethodContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassMethodContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassMethodContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassMethodContext.prototype, "accept", null);
exports.ClassMethodContext = ClassMethodContext;
class MethodParametersContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    methodParameter(i) {
        if (i === undefined) {
            return this.getRuleContexts(MethodParameterContext);
        }
        else {
            return this.getRuleContext(i, MethodParameterContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_methodParameters; }
    enterRule(listener) {
        if (listener.enterMethodParameters)
            listener.enterMethodParameters(this);
    }
    exitRule(listener) {
        if (listener.exitMethodParameters)
            listener.exitMethodParameters(this);
    }
    accept(visitor) {
        if (visitor.visitMethodParameters)
            return visitor.visitMethodParameters(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MethodParametersContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], MethodParametersContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MethodParametersContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MethodParametersContext.prototype, "accept", null);
exports.MethodParametersContext = MethodParametersContext;
class MethodParameterContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    methodParameterName() {
        return this.getRuleContext(0, MethodParameterNameContext);
    }
    FINAL() { return this.tryGetToken(ApexcodeParser.FINAL, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_methodParameter; }
    enterRule(listener) {
        if (listener.enterMethodParameter)
            listener.enterMethodParameter(this);
    }
    exitRule(listener) {
        if (listener.exitMethodParameter)
            listener.exitMethodParameter(this);
    }
    accept(visitor) {
        if (visitor.visitMethodParameter)
            return visitor.visitMethodParameter(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MethodParameterContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], MethodParameterContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MethodParameterContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MethodParameterContext.prototype, "accept", null);
exports.MethodParameterContext = MethodParameterContext;
class MethodParameterNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_methodParameterName; }
    enterRule(listener) {
        if (listener.enterMethodParameterName)
            listener.enterMethodParameterName(this);
    }
    exitRule(listener) {
        if (listener.exitMethodParameterName)
            listener.exitMethodParameterName(this);
    }
    accept(visitor) {
        if (visitor.visitMethodParameterName)
            return visitor.visitMethodParameterName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MethodParameterNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], MethodParameterNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MethodParameterNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MethodParameterNameContext.prototype, "accept", null);
exports.MethodParameterNameContext = MethodParameterNameContext;
class MethodHeaderContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    methodName() {
        return this.getRuleContext(0, MethodNameContext);
    }
    annotation(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    }
    methodHeaderModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(MethodHeaderModifierContext);
        }
        else {
            return this.getRuleContext(i, MethodHeaderModifierContext);
        }
    }
    methodParameters() {
        return this.tryGetRuleContext(0, MethodParametersContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_methodHeader; }
    enterRule(listener) {
        if (listener.enterMethodHeader)
            listener.enterMethodHeader(this);
    }
    exitRule(listener) {
        if (listener.exitMethodHeader)
            listener.exitMethodHeader(this);
    }
    accept(visitor) {
        if (visitor.visitMethodHeader)
            return visitor.visitMethodHeader(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MethodHeaderContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], MethodHeaderContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MethodHeaderContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MethodHeaderContext.prototype, "accept", null);
exports.MethodHeaderContext = MethodHeaderContext;
class MethodHeaderModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    PUBLIC() { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
    PROTECTED() { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
    PRIVATE() { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
    GLOBAL() { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
    OVERRIDE() { return this.tryGetToken(ApexcodeParser.OVERRIDE, 0); }
    ABSTRACT() { return this.tryGetToken(ApexcodeParser.ABSTRACT, 0); }
    VIRTUAL() { return this.tryGetToken(ApexcodeParser.VIRTUAL, 0); }
    STATIC() { return this.tryGetToken(ApexcodeParser.STATIC, 0); }
    TESTMETHOD() { return this.tryGetToken(ApexcodeParser.TESTMETHOD, 0); }
    WEBSERVICE() { return this.tryGetToken(ApexcodeParser.WEBSERVICE, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_methodHeaderModifier; }
    enterRule(listener) {
        if (listener.enterMethodHeaderModifier)
            listener.enterMethodHeaderModifier(this);
    }
    exitRule(listener) {
        if (listener.exitMethodHeaderModifier)
            listener.exitMethodHeaderModifier(this);
    }
    accept(visitor) {
        if (visitor.visitMethodHeaderModifier)
            return visitor.visitMethodHeaderModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MethodHeaderModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], MethodHeaderModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MethodHeaderModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MethodHeaderModifierContext.prototype, "accept", null);
exports.MethodHeaderModifierContext = MethodHeaderModifierContext;
class MethodNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_methodName; }
    enterRule(listener) {
        if (listener.enterMethodName)
            listener.enterMethodName(this);
    }
    exitRule(listener) {
        if (listener.exitMethodName)
            listener.exitMethodName(this);
    }
    accept(visitor) {
        if (visitor.visitMethodName)
            return visitor.visitMethodName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MethodNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], MethodNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MethodNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MethodNameContext.prototype, "accept", null);
exports.MethodNameContext = MethodNameContext;
class MethodBodyContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    codeBlock() {
        return this.getRuleContext(0, CodeBlockContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_methodBody; }
    enterRule(listener) {
        if (listener.enterMethodBody)
            listener.enterMethodBody(this);
    }
    exitRule(listener) {
        if (listener.exitMethodBody)
            listener.exitMethodBody(this);
    }
    accept(visitor) {
        if (visitor.visitMethodBody)
            return visitor.visitMethodBody(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MethodBodyContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], MethodBodyContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MethodBodyContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MethodBodyContext.prototype, "accept", null);
exports.MethodBodyContext = MethodBodyContext;
class ClassPropertyContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    propertyName() {
        return this.getRuleContext(0, PropertyNameContext);
    }
    annotation(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    }
    propertyModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(PropertyModifierContext);
        }
        else {
            return this.getRuleContext(i, PropertyModifierContext);
        }
    }
    propertyGet(i) {
        if (i === undefined) {
            return this.getRuleContexts(PropertyGetContext);
        }
        else {
            return this.getRuleContext(i, PropertyGetContext);
        }
    }
    propertySet(i) {
        if (i === undefined) {
            return this.getRuleContexts(PropertySetContext);
        }
        else {
            return this.getRuleContext(i, PropertySetContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_classProperty; }
    enterRule(listener) {
        if (listener.enterClassProperty)
            listener.enterClassProperty(this);
    }
    exitRule(listener) {
        if (listener.exitClassProperty)
            listener.exitClassProperty(this);
    }
    accept(visitor) {
        if (visitor.visitClassProperty)
            return visitor.visitClassProperty(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassPropertyContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassPropertyContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassPropertyContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassPropertyContext.prototype, "accept", null);
exports.ClassPropertyContext = ClassPropertyContext;
class PropertyModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    PUBLIC() { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
    PROTECTED() { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
    PRIVATE() { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
    GLOBAL() { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
    FINAL() { return this.tryGetToken(ApexcodeParser.FINAL, 0); }
    STATIC() { return this.tryGetToken(ApexcodeParser.STATIC, 0); }
    TRANSIENT() { return this.tryGetToken(ApexcodeParser.TRANSIENT, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_propertyModifier; }
    enterRule(listener) {
        if (listener.enterPropertyModifier)
            listener.enterPropertyModifier(this);
    }
    exitRule(listener) {
        if (listener.exitPropertyModifier)
            listener.exitPropertyModifier(this);
    }
    accept(visitor) {
        if (visitor.visitPropertyModifier)
            return visitor.visitPropertyModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PropertyModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], PropertyModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PropertyModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PropertyModifierContext.prototype, "accept", null);
exports.PropertyModifierContext = PropertyModifierContext;
class PropertyNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_propertyName; }
    enterRule(listener) {
        if (listener.enterPropertyName)
            listener.enterPropertyName(this);
    }
    exitRule(listener) {
        if (listener.exitPropertyName)
            listener.exitPropertyName(this);
    }
    accept(visitor) {
        if (visitor.visitPropertyName)
            return visitor.visitPropertyName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PropertyNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], PropertyNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PropertyNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PropertyNameContext.prototype, "accept", null);
exports.PropertyNameContext = PropertyNameContext;
class PropertyGetContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    GET_EMPTY() { return this.tryGetToken(ApexcodeParser.GET_EMPTY, 0); }
    GET_OPEN_CURLY() { return this.tryGetToken(ApexcodeParser.GET_OPEN_CURLY, 0); }
    propertyGetSetModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(PropertyGetSetModifierContext);
        }
        else {
            return this.getRuleContext(i, PropertyGetSetModifierContext);
        }
    }
    blockStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockStatementContext);
        }
        else {
            return this.getRuleContext(i, BlockStatementContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_propertyGet; }
    enterRule(listener) {
        if (listener.enterPropertyGet)
            listener.enterPropertyGet(this);
    }
    exitRule(listener) {
        if (listener.exitPropertyGet)
            listener.exitPropertyGet(this);
    }
    accept(visitor) {
        if (visitor.visitPropertyGet)
            return visitor.visitPropertyGet(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PropertyGetContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], PropertyGetContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PropertyGetContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PropertyGetContext.prototype, "accept", null);
exports.PropertyGetContext = PropertyGetContext;
class PropertySetContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    SET_EMPTY() { return this.tryGetToken(ApexcodeParser.SET_EMPTY, 0); }
    SET_OPEN_CURLY() { return this.tryGetToken(ApexcodeParser.SET_OPEN_CURLY, 0); }
    propertyGetSetModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(PropertyGetSetModifierContext);
        }
        else {
            return this.getRuleContext(i, PropertyGetSetModifierContext);
        }
    }
    blockStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockStatementContext);
        }
        else {
            return this.getRuleContext(i, BlockStatementContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_propertySet; }
    enterRule(listener) {
        if (listener.enterPropertySet)
            listener.enterPropertySet(this);
    }
    exitRule(listener) {
        if (listener.exitPropertySet)
            listener.exitPropertySet(this);
    }
    accept(visitor) {
        if (visitor.visitPropertySet)
            return visitor.visitPropertySet(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PropertySetContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], PropertySetContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PropertySetContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PropertySetContext.prototype, "accept", null);
exports.PropertySetContext = PropertySetContext;
class PropertyGetSetModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    PUBLIC() { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
    PROTECTED() { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
    PRIVATE() { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
    GLOBAL() { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
    STATIC() { return this.tryGetToken(ApexcodeParser.STATIC, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_propertyGetSetModifier; }
    enterRule(listener) {
        if (listener.enterPropertyGetSetModifier)
            listener.enterPropertyGetSetModifier(this);
    }
    exitRule(listener) {
        if (listener.exitPropertyGetSetModifier)
            listener.exitPropertyGetSetModifier(this);
    }
    accept(visitor) {
        if (visitor.visitPropertyGetSetModifier)
            return visitor.visitPropertyGetSetModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PropertyGetSetModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], PropertyGetSetModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PropertyGetSetModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PropertyGetSetModifierContext.prototype, "accept", null);
exports.PropertyGetSetModifierContext = PropertyGetSetModifierContext;
class EnumDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    ENUM() { return this.getToken(ApexcodeParser.ENUM, 0); }
    enumName() {
        return this.getRuleContext(0, EnumNameContext);
    }
    classOrInterfaceModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(ClassOrInterfaceModifierContext);
        }
        else {
            return this.getRuleContext(i, ClassOrInterfaceModifierContext);
        }
    }
    enumConstants() {
        return this.tryGetRuleContext(0, EnumConstantsContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_enumDeclaration; }
    enterRule(listener) {
        if (listener.enterEnumDeclaration)
            listener.enterEnumDeclaration(this);
    }
    exitRule(listener) {
        if (listener.exitEnumDeclaration)
            listener.exitEnumDeclaration(this);
    }
    accept(visitor) {
        if (visitor.visitEnumDeclaration)
            return visitor.visitEnumDeclaration(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], EnumDeclarationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], EnumDeclarationContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], EnumDeclarationContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], EnumDeclarationContext.prototype, "accept", null);
exports.EnumDeclarationContext = EnumDeclarationContext;
class EnumNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_enumName; }
    enterRule(listener) {
        if (listener.enterEnumName)
            listener.enterEnumName(this);
    }
    exitRule(listener) {
        if (listener.exitEnumName)
            listener.exitEnumName(this);
    }
    accept(visitor) {
        if (visitor.visitEnumName)
            return visitor.visitEnumName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], EnumNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], EnumNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], EnumNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], EnumNameContext.prototype, "accept", null);
exports.EnumNameContext = EnumNameContext;
class EnumConstantsContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    enumConstant(i) {
        if (i === undefined) {
            return this.getRuleContexts(EnumConstantContext);
        }
        else {
            return this.getRuleContext(i, EnumConstantContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_enumConstants; }
    enterRule(listener) {
        if (listener.enterEnumConstants)
            listener.enterEnumConstants(this);
    }
    exitRule(listener) {
        if (listener.exitEnumConstants)
            listener.exitEnumConstants(this);
    }
    accept(visitor) {
        if (visitor.visitEnumConstants)
            return visitor.visitEnumConstants(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], EnumConstantsContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], EnumConstantsContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], EnumConstantsContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], EnumConstantsContext.prototype, "accept", null);
exports.EnumConstantsContext = EnumConstantsContext;
class EnumConstantContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_enumConstant; }
    enterRule(listener) {
        if (listener.enterEnumConstant)
            listener.enterEnumConstant(this);
    }
    exitRule(listener) {
        if (listener.exitEnumConstant)
            listener.exitEnumConstant(this);
    }
    accept(visitor) {
        if (visitor.visitEnumConstant)
            return visitor.visitEnumConstant(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], EnumConstantContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], EnumConstantContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], EnumConstantContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], EnumConstantContext.prototype, "accept", null);
exports.EnumConstantContext = EnumConstantContext;
class AnnotationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    annotationName() {
        return this.getRuleContext(0, AnnotationNameContext);
    }
    annotationElementValuePairs() {
        return this.tryGetRuleContext(0, AnnotationElementValuePairsContext);
    }
    annotationElementValue() {
        return this.tryGetRuleContext(0, AnnotationElementValueContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_annotation; }
    enterRule(listener) {
        if (listener.enterAnnotation)
            listener.enterAnnotation(this);
    }
    exitRule(listener) {
        if (listener.exitAnnotation)
            listener.exitAnnotation(this);
    }
    accept(visitor) {
        if (visitor.visitAnnotation)
            return visitor.visitAnnotation(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], AnnotationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], AnnotationContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], AnnotationContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], AnnotationContext.prototype, "accept", null);
exports.AnnotationContext = AnnotationContext;
class AnnotationNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_annotationName; }
    enterRule(listener) {
        if (listener.enterAnnotationName)
            listener.enterAnnotationName(this);
    }
    exitRule(listener) {
        if (listener.exitAnnotationName)
            listener.exitAnnotationName(this);
    }
    accept(visitor) {
        if (visitor.visitAnnotationName)
            return visitor.visitAnnotationName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], AnnotationNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], AnnotationNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], AnnotationNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], AnnotationNameContext.prototype, "accept", null);
exports.AnnotationNameContext = AnnotationNameContext;
class AnnotationElementValuePairsContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    annotationElementValuePair(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationElementValuePairContext);
        }
        else {
            return this.getRuleContext(i, AnnotationElementValuePairContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_annotationElementValuePairs; }
    enterRule(listener) {
        if (listener.enterAnnotationElementValuePairs)
            listener.enterAnnotationElementValuePairs(this);
    }
    exitRule(listener) {
        if (listener.exitAnnotationElementValuePairs)
            listener.exitAnnotationElementValuePairs(this);
    }
    accept(visitor) {
        if (visitor.visitAnnotationElementValuePairs)
            return visitor.visitAnnotationElementValuePairs(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], AnnotationElementValuePairsContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValuePairsContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValuePairsContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValuePairsContext.prototype, "accept", null);
exports.AnnotationElementValuePairsContext = AnnotationElementValuePairsContext;
class AnnotationElementValuePairContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier() { return this.getToken(ApexcodeParser.Identifier, 0); }
    annotationElementValue() {
        return this.getRuleContext(0, AnnotationElementValueContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_annotationElementValuePair; }
    enterRule(listener) {
        if (listener.enterAnnotationElementValuePair)
            listener.enterAnnotationElementValuePair(this);
    }
    exitRule(listener) {
        if (listener.exitAnnotationElementValuePair)
            listener.exitAnnotationElementValuePair(this);
    }
    accept(visitor) {
        if (visitor.visitAnnotationElementValuePair)
            return visitor.visitAnnotationElementValuePair(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], AnnotationElementValuePairContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValuePairContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValuePairContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValuePairContext.prototype, "accept", null);
exports.AnnotationElementValuePairContext = AnnotationElementValuePairContext;
class AnnotationElementValueContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    annotation() {
        return this.tryGetRuleContext(0, AnnotationContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_annotationElementValue; }
    enterRule(listener) {
        if (listener.enterAnnotationElementValue)
            listener.enterAnnotationElementValue(this);
    }
    exitRule(listener) {
        if (listener.exitAnnotationElementValue)
            listener.exitAnnotationElementValue(this);
    }
    accept(visitor) {
        if (visitor.visitAnnotationElementValue)
            return visitor.visitAnnotationElementValue(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], AnnotationElementValueContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValueContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValueContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], AnnotationElementValueContext.prototype, "accept", null);
exports.AnnotationElementValueContext = AnnotationElementValueContext;
class ExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        if (parent !== undefined && invokingState !== undefined) {
            super(parent, invokingState);
        }
        else {
            super();
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_expression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
__decorate([
    Decorators_2.Override
], ExpressionContext.prototype, "ruleIndex", null);
exports.ExpressionContext = ExpressionContext;
class AssignmentExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterAssignmentExpr)
            listener.enterAssignmentExpr(this);
    }
    exitRule(listener) {
        if (listener.exitAssignmentExpr)
            listener.exitAssignmentExpr(this);
    }
    accept(visitor) {
        if (visitor.visitAssignmentExpr)
            return visitor.visitAssignmentExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], AssignmentExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], AssignmentExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], AssignmentExprContext.prototype, "accept", null);
exports.AssignmentExprContext = AssignmentExprContext;
class PostIncrementExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterPostIncrementExpr)
            listener.enterPostIncrementExpr(this);
    }
    exitRule(listener) {
        if (listener.exitPostIncrementExpr)
            listener.exitPostIncrementExpr(this);
    }
    accept(visitor) {
        if (visitor.visitPostIncrementExpr)
            return visitor.visitPostIncrementExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PostIncrementExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PostIncrementExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PostIncrementExprContext.prototype, "accept", null);
exports.PostIncrementExprContext = PostIncrementExprContext;
class BitwiseXorExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterBitwiseXorExpr)
            listener.enterBitwiseXorExpr(this);
    }
    exitRule(listener) {
        if (listener.exitBitwiseXorExpr)
            listener.exitBitwiseXorExpr(this);
    }
    accept(visitor) {
        if (visitor.visitBitwiseXorExpr)
            return visitor.visitBitwiseXorExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], BitwiseXorExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], BitwiseXorExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], BitwiseXorExprContext.prototype, "accept", null);
exports.BitwiseXorExprContext = BitwiseXorExprContext;
class InstanceOfExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    INSTANCE_OF() { return this.getToken(ApexcodeParser.INSTANCE_OF, 0); }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    enterRule(listener) {
        if (listener.enterInstanceOfExpr)
            listener.enterInstanceOfExpr(this);
    }
    exitRule(listener) {
        if (listener.exitInstanceOfExpr)
            listener.exitInstanceOfExpr(this);
    }
    accept(visitor) {
        if (visitor.visitInstanceOfExpr)
            return visitor.visitInstanceOfExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InstanceOfExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InstanceOfExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InstanceOfExprContext.prototype, "accept", null);
exports.InstanceOfExprContext = InstanceOfExprContext;
class ExprDotExpressionContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterExprDotExpression)
            listener.enterExprDotExpression(this);
    }
    exitRule(listener) {
        if (listener.exitExprDotExpression)
            listener.exitExprDotExpression(this);
    }
    accept(visitor) {
        if (visitor.visitExprDotExpression)
            return visitor.visitExprDotExpression(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ExprDotExpressionContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ExprDotExpressionContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ExprDotExpressionContext.prototype, "accept", null);
exports.ExprDotExpressionContext = ExprDotExpressionContext;
class BitwiseOrExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterBitwiseOrExpr)
            listener.enterBitwiseOrExpr(this);
    }
    exitRule(listener) {
        if (listener.exitBitwiseOrExpr)
            listener.exitBitwiseOrExpr(this);
    }
    accept(visitor) {
        if (visitor.visitBitwiseOrExpr)
            return visitor.visitBitwiseOrExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], BitwiseOrExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], BitwiseOrExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], BitwiseOrExprContext.prototype, "accept", null);
exports.BitwiseOrExprContext = BitwiseOrExprContext;
class BitwiseAndExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterBitwiseAndExpr)
            listener.enterBitwiseAndExpr(this);
    }
    exitRule(listener) {
        if (listener.exitBitwiseAndExpr)
            listener.exitBitwiseAndExpr(this);
    }
    accept(visitor) {
        if (visitor.visitBitwiseAndExpr)
            return visitor.visitBitwiseAndExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], BitwiseAndExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], BitwiseAndExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], BitwiseAndExprContext.prototype, "accept", null);
exports.BitwiseAndExprContext = BitwiseAndExprContext;
class ComparisonExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    WS() { return this.tryGetToken(ApexcodeParser.WS, 0); }
    enterRule(listener) {
        if (listener.enterComparisonExpr)
            listener.enterComparisonExpr(this);
    }
    exitRule(listener) {
        if (listener.exitComparisonExpr)
            listener.exitComparisonExpr(this);
    }
    accept(visitor) {
        if (visitor.visitComparisonExpr)
            return visitor.visitComparisonExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ComparisonExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ComparisonExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ComparisonExprContext.prototype, "accept", null);
exports.ComparisonExprContext = ComparisonExprContext;
class ArrayIndexExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterArrayIndexExpr)
            listener.enterArrayIndexExpr(this);
    }
    exitRule(listener) {
        if (listener.exitArrayIndexExpr)
            listener.exitArrayIndexExpr(this);
    }
    accept(visitor) {
        if (visitor.visitArrayIndexExpr)
            return visitor.visitArrayIndexExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ArrayIndexExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ArrayIndexExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ArrayIndexExprContext.prototype, "accept", null);
exports.ArrayIndexExprContext = ArrayIndexExprContext;
class TypeCastComplexExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    typeArguments() {
        return this.getRuleContext(0, TypeArgumentsContext);
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterTypeCastComplexExpr)
            listener.enterTypeCastComplexExpr(this);
    }
    exitRule(listener) {
        if (listener.exitTypeCastComplexExpr)
            listener.exitTypeCastComplexExpr(this);
    }
    accept(visitor) {
        if (visitor.visitTypeCastComplexExpr)
            return visitor.visitTypeCastComplexExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TypeCastComplexExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TypeCastComplexExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TypeCastComplexExprContext.prototype, "accept", null);
exports.TypeCastComplexExprContext = TypeCastComplexExprContext;
class PreIncrementExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterPreIncrementExpr)
            listener.enterPreIncrementExpr(this);
    }
    exitRule(listener) {
        if (listener.exitPreIncrementExpr)
            listener.exitPreIncrementExpr(this);
    }
    accept(visitor) {
        if (visitor.visitPreIncrementExpr)
            return visitor.visitPreIncrementExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PreIncrementExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PreIncrementExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PreIncrementExprContext.prototype, "accept", null);
exports.PreIncrementExprContext = PreIncrementExprContext;
class CreatorExpressionContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    NEW() { return this.getToken(ApexcodeParser.NEW, 0); }
    creator() {
        return this.getRuleContext(0, CreatorContext);
    }
    enterRule(listener) {
        if (listener.enterCreatorExpression)
            listener.enterCreatorExpression(this);
    }
    exitRule(listener) {
        if (listener.exitCreatorExpression)
            listener.exitCreatorExpression(this);
    }
    accept(visitor) {
        if (visitor.visitCreatorExpression)
            return visitor.visitCreatorExpression(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], CreatorExpressionContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], CreatorExpressionContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], CreatorExpressionContext.prototype, "accept", null);
exports.CreatorExpressionContext = CreatorExpressionContext;
class MethodCallExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    enterRule(listener) {
        if (listener.enterMethodCallExpr)
            listener.enterMethodCallExpr(this);
    }
    exitRule(listener) {
        if (listener.exitMethodCallExpr)
            listener.exitMethodCallExpr(this);
    }
    accept(visitor) {
        if (visitor.visitMethodCallExpr)
            return visitor.visitMethodCallExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MethodCallExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MethodCallExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MethodCallExprContext.prototype, "accept", null);
exports.MethodCallExprContext = MethodCallExprContext;
class UnaryInequalityExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterUnaryInequalityExpr)
            listener.enterUnaryInequalityExpr(this);
    }
    exitRule(listener) {
        if (listener.exitUnaryInequalityExpr)
            listener.exitUnaryInequalityExpr(this);
    }
    accept(visitor) {
        if (visitor.visitUnaryInequalityExpr)
            return visitor.visitUnaryInequalityExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], UnaryInequalityExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], UnaryInequalityExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], UnaryInequalityExprContext.prototype, "accept", null);
exports.UnaryInequalityExprContext = UnaryInequalityExprContext;
class UnaryExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterUnaryExpr)
            listener.enterUnaryExpr(this);
    }
    exitRule(listener) {
        if (listener.exitUnaryExpr)
            listener.exitUnaryExpr(this);
    }
    accept(visitor) {
        if (visitor.visitUnaryExpr)
            return visitor.visitUnaryExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], UnaryExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], UnaryExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], UnaryExprContext.prototype, "accept", null);
exports.UnaryExprContext = UnaryExprContext;
class InfixAndExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterInfixAndExpr)
            listener.enterInfixAndExpr(this);
    }
    exitRule(listener) {
        if (listener.exitInfixAndExpr)
            listener.exitInfixAndExpr(this);
    }
    accept(visitor) {
        if (visitor.visitInfixAndExpr)
            return visitor.visitInfixAndExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InfixAndExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InfixAndExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InfixAndExprContext.prototype, "accept", null);
exports.InfixAndExprContext = InfixAndExprContext;
class PrimaryExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    primary() {
        return this.getRuleContext(0, PrimaryContext);
    }
    enterRule(listener) {
        if (listener.enterPrimaryExpr)
            listener.enterPrimaryExpr(this);
    }
    exitRule(listener) {
        if (listener.exitPrimaryExpr)
            listener.exitPrimaryExpr(this);
    }
    accept(visitor) {
        if (visitor.visitPrimaryExpr)
            return visitor.visitPrimaryExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PrimaryExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PrimaryExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PrimaryExprContext.prototype, "accept", null);
exports.PrimaryExprContext = PrimaryExprContext;
class InfixMulExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterInfixMulExpr)
            listener.enterInfixMulExpr(this);
    }
    exitRule(listener) {
        if (listener.exitInfixMulExpr)
            listener.exitInfixMulExpr(this);
    }
    accept(visitor) {
        if (visitor.visitInfixMulExpr)
            return visitor.visitInfixMulExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InfixMulExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InfixMulExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InfixMulExprContext.prototype, "accept", null);
exports.InfixMulExprContext = InfixMulExprContext;
class TernaryExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterTernaryExpr)
            listener.enterTernaryExpr(this);
    }
    exitRule(listener) {
        if (listener.exitTernaryExpr)
            listener.exitTernaryExpr(this);
    }
    accept(visitor) {
        if (visitor.visitTernaryExpr)
            return visitor.visitTernaryExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TernaryExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TernaryExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TernaryExprContext.prototype, "accept", null);
exports.TernaryExprContext = TernaryExprContext;
class InfixOrExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterInfixOrExpr)
            listener.enterInfixOrExpr(this);
    }
    exitRule(listener) {
        if (listener.exitInfixOrExpr)
            listener.exitInfixOrExpr(this);
    }
    accept(visitor) {
        if (visitor.visitInfixOrExpr)
            return visitor.visitInfixOrExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InfixOrExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InfixOrExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InfixOrExprContext.prototype, "accept", null);
exports.InfixOrExprContext = InfixOrExprContext;
class InfixShiftExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterInfixShiftExpr)
            listener.enterInfixShiftExpr(this);
    }
    exitRule(listener) {
        if (listener.exitInfixShiftExpr)
            listener.exitInfixShiftExpr(this);
    }
    accept(visitor) {
        if (visitor.visitInfixShiftExpr)
            return visitor.visitInfixShiftExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InfixShiftExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InfixShiftExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InfixShiftExprContext.prototype, "accept", null);
exports.InfixShiftExprContext = InfixShiftExprContext;
class InfixAddExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterInfixAddExpr)
            listener.enterInfixAddExpr(this);
    }
    exitRule(listener) {
        if (listener.exitInfixAddExpr)
            listener.exitInfixAddExpr(this);
    }
    accept(visitor) {
        if (visitor.visitInfixAddExpr)
            return visitor.visitInfixAddExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InfixAddExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InfixAddExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InfixAddExprContext.prototype, "accept", null);
exports.InfixAddExprContext = InfixAddExprContext;
class InfixEqualityExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterInfixEqualityExpr)
            listener.enterInfixEqualityExpr(this);
    }
    exitRule(listener) {
        if (listener.exitInfixEqualityExpr)
            listener.exitInfixEqualityExpr(this);
    }
    accept(visitor) {
        if (visitor.visitInfixEqualityExpr)
            return visitor.visitInfixEqualityExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], InfixEqualityExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], InfixEqualityExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], InfixEqualityExprContext.prototype, "accept", null);
exports.InfixEqualityExprContext = InfixEqualityExprContext;
class TypeCastSimpleExprContext extends ExpressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterTypeCastSimpleExpr)
            listener.enterTypeCastSimpleExpr(this);
    }
    exitRule(listener) {
        if (listener.exitTypeCastSimpleExpr)
            listener.exitTypeCastSimpleExpr(this);
    }
    accept(visitor) {
        if (visitor.visitTypeCastSimpleExpr)
            return visitor.visitTypeCastSimpleExpr(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TypeCastSimpleExprContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TypeCastSimpleExprContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TypeCastSimpleExprContext.prototype, "accept", null);
exports.TypeCastSimpleExprContext = TypeCastSimpleExprContext;
class PrimaryContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    parExpression() {
        return this.tryGetRuleContext(0, ParExpressionContext);
    }
    THIS() { return this.tryGetToken(ApexcodeParser.THIS, 0); }
    SUPER() { return this.tryGetToken(ApexcodeParser.SUPER, 0); }
    literal() {
        return this.tryGetRuleContext(0, LiteralContext);
    }
    Identifier() { return this.tryGetToken(ApexcodeParser.Identifier, 0); }
    dataType() {
        return this.tryGetRuleContext(0, DataTypeContext);
    }
    CLASS() { return this.tryGetToken(ApexcodeParser.CLASS, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_primary; }
    enterRule(listener) {
        if (listener.enterPrimary)
            listener.enterPrimary(this);
    }
    exitRule(listener) {
        if (listener.exitPrimary)
            listener.exitPrimary(this);
    }
    accept(visitor) {
        if (visitor.visitPrimary)
            return visitor.visitPrimary(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], PrimaryContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], PrimaryContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], PrimaryContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], PrimaryContext.prototype, "accept", null);
exports.PrimaryContext = PrimaryContext;
class ParExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_parExpression; }
    enterRule(listener) {
        if (listener.enterParExpression)
            listener.enterParExpression(this);
    }
    exitRule(listener) {
        if (listener.exitParExpression)
            listener.exitParExpression(this);
    }
    accept(visitor) {
        if (visitor.visitParExpression)
            return visitor.visitParExpression(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ParExpressionContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ParExpressionContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ParExpressionContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ParExpressionContext.prototype, "accept", null);
exports.ParExpressionContext = ParExpressionContext;
class ExpressionListContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_expressionList; }
    enterRule(listener) {
        if (listener.enterExpressionList)
            listener.enterExpressionList(this);
    }
    exitRule(listener) {
        if (listener.exitExpressionList)
            listener.exitExpressionList(this);
    }
    accept(visitor) {
        if (visitor.visitExpressionList)
            return visitor.visitExpressionList(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ExpressionListContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ExpressionListContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ExpressionListContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ExpressionListContext.prototype, "accept", null);
exports.ExpressionListContext = ExpressionListContext;
class Runas_expressionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    SYSTEM_RUNAS() { return this.getToken(ApexcodeParser.SYSTEM_RUNAS, 0); }
    codeBlock() {
        return this.getRuleContext(0, CodeBlockContext);
    }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_runas_expression; }
    enterRule(listener) {
        if (listener.enterRunas_expression)
            listener.enterRunas_expression(this);
    }
    exitRule(listener) {
        if (listener.exitRunas_expression)
            listener.exitRunas_expression(this);
    }
    accept(visitor) {
        if (visitor.visitRunas_expression)
            return visitor.visitRunas_expression(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], Runas_expressionContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], Runas_expressionContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], Runas_expressionContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], Runas_expressionContext.prototype, "accept", null);
exports.Runas_expressionContext = Runas_expressionContext;
class Db_shortcut_expressionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        if (parent !== undefined && invokingState !== undefined) {
            super(parent, invokingState);
        }
        else {
            super();
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_db_shortcut_expression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
__decorate([
    Decorators_2.Override
], Db_shortcut_expressionContext.prototype, "ruleIndex", null);
exports.Db_shortcut_expressionContext = Db_shortcut_expressionContext;
class DbShortcutTwoOpContext extends Db_shortcut_expressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    DB_UPSERT() { return this.getToken(ApexcodeParser.DB_UPSERT, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterDbShortcutTwoOp)
            listener.enterDbShortcutTwoOp(this);
    }
    exitRule(listener) {
        if (listener.exitDbShortcutTwoOp)
            listener.exitDbShortcutTwoOp(this);
    }
    accept(visitor) {
        if (visitor.visitDbShortcutTwoOp)
            return visitor.visitDbShortcutTwoOp(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], DbShortcutTwoOpContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], DbShortcutTwoOpContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], DbShortcutTwoOpContext.prototype, "accept", null);
exports.DbShortcutTwoOpContext = DbShortcutTwoOpContext;
class DbShortcutMergeContext extends Db_shortcut_expressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    DB_MERGE() { return this.getToken(ApexcodeParser.DB_MERGE, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    enterRule(listener) {
        if (listener.enterDbShortcutMerge)
            listener.enterDbShortcutMerge(this);
    }
    exitRule(listener) {
        if (listener.exitDbShortcutMerge)
            listener.exitDbShortcutMerge(this);
    }
    accept(visitor) {
        if (visitor.visitDbShortcutMerge)
            return visitor.visitDbShortcutMerge(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], DbShortcutMergeContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], DbShortcutMergeContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], DbShortcutMergeContext.prototype, "accept", null);
exports.DbShortcutMergeContext = DbShortcutMergeContext;
class DbShortcutOneOpContext extends Db_shortcut_expressionContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    DB_UPDATE() { return this.tryGetToken(ApexcodeParser.DB_UPDATE, 0); }
    DB_DELETE() { return this.tryGetToken(ApexcodeParser.DB_DELETE, 0); }
    DB_INSERT() { return this.tryGetToken(ApexcodeParser.DB_INSERT, 0); }
    DB_UNDELETE() { return this.tryGetToken(ApexcodeParser.DB_UNDELETE, 0); }
    DB_UPSERT() { return this.tryGetToken(ApexcodeParser.DB_UPSERT, 0); }
    enterRule(listener) {
        if (listener.enterDbShortcutOneOp)
            listener.enterDbShortcutOneOp(this);
    }
    exitRule(listener) {
        if (listener.exitDbShortcutOneOp)
            listener.exitDbShortcutOneOp(this);
    }
    accept(visitor) {
        if (visitor.visitDbShortcutOneOp)
            return visitor.visitDbShortcutOneOp(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], DbShortcutOneOpContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], DbShortcutOneOpContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], DbShortcutOneOpContext.prototype, "accept", null);
exports.DbShortcutOneOpContext = DbShortcutOneOpContext;
class CreatorContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    parExpression() {
        return this.tryGetRuleContext(0, ParExpressionContext);
    }
    classCreatorRest() {
        return this.tryGetRuleContext(0, ClassCreatorRestContext);
    }
    arrayCreatorRest() {
        return this.tryGetRuleContext(0, ArrayCreatorRestContext);
    }
    mapCreatorRest() {
        return this.tryGetRuleContext(0, MapCreatorRestContext);
    }
    setCreatorRest() {
        return this.tryGetRuleContext(0, SetCreatorRestContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_creator; }
    enterRule(listener) {
        if (listener.enterCreator)
            listener.enterCreator(this);
    }
    exitRule(listener) {
        if (listener.exitCreator)
            listener.exitCreator(this);
    }
    accept(visitor) {
        if (visitor.visitCreator)
            return visitor.visitCreator(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], CreatorContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], CreatorContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], CreatorContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], CreatorContext.prototype, "accept", null);
exports.CreatorContext = CreatorContext;
class TypeArgumentsContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    dataType(i) {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeContext);
        }
        else {
            return this.getRuleContext(i, DataTypeContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_typeArguments; }
    enterRule(listener) {
        if (listener.enterTypeArguments)
            listener.enterTypeArguments(this);
    }
    exitRule(listener) {
        if (listener.exitTypeArguments)
            listener.exitTypeArguments(this);
    }
    accept(visitor) {
        if (visitor.visitTypeArguments)
            return visitor.visitTypeArguments(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TypeArgumentsContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], TypeArgumentsContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TypeArgumentsContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TypeArgumentsContext.prototype, "accept", null);
exports.TypeArgumentsContext = TypeArgumentsContext;
class ArrayCreatorRestContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    arrayInitializer() {
        return this.tryGetRuleContext(0, ArrayInitializerContext);
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_arrayCreatorRest; }
    enterRule(listener) {
        if (listener.enterArrayCreatorRest)
            listener.enterArrayCreatorRest(this);
    }
    exitRule(listener) {
        if (listener.exitArrayCreatorRest)
            listener.exitArrayCreatorRest(this);
    }
    accept(visitor) {
        if (visitor.visitArrayCreatorRest)
            return visitor.visitArrayCreatorRest(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ArrayCreatorRestContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ArrayCreatorRestContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ArrayCreatorRestContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ArrayCreatorRestContext.prototype, "accept", null);
exports.ArrayCreatorRestContext = ArrayCreatorRestContext;
class MapCreatorRestContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    literal(i) {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }
        else {
            return this.getRuleContext(i, LiteralContext);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_mapCreatorRest; }
    enterRule(listener) {
        if (listener.enterMapCreatorRest)
            listener.enterMapCreatorRest(this);
    }
    exitRule(listener) {
        if (listener.exitMapCreatorRest)
            listener.exitMapCreatorRest(this);
    }
    accept(visitor) {
        if (visitor.visitMapCreatorRest)
            return visitor.visitMapCreatorRest(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], MapCreatorRestContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], MapCreatorRestContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], MapCreatorRestContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], MapCreatorRestContext.prototype, "accept", null);
exports.MapCreatorRestContext = MapCreatorRestContext;
class SetCreatorRestContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    literal(i) {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }
        else {
            return this.getRuleContext(i, LiteralContext);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_setCreatorRest; }
    enterRule(listener) {
        if (listener.enterSetCreatorRest)
            listener.enterSetCreatorRest(this);
    }
    exitRule(listener) {
        if (listener.exitSetCreatorRest)
            listener.exitSetCreatorRest(this);
    }
    accept(visitor) {
        if (visitor.visitSetCreatorRest)
            return visitor.visitSetCreatorRest(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], SetCreatorRestContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], SetCreatorRestContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], SetCreatorRestContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], SetCreatorRestContext.prototype, "accept", null);
exports.SetCreatorRestContext = SetCreatorRestContext;
class ClassCreatorRestContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    arguments() {
        return this.getRuleContext(0, ArgumentsContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_classCreatorRest; }
    enterRule(listener) {
        if (listener.enterClassCreatorRest)
            listener.enterClassCreatorRest(this);
    }
    exitRule(listener) {
        if (listener.exitClassCreatorRest)
            listener.exitClassCreatorRest(this);
    }
    accept(visitor) {
        if (visitor.visitClassCreatorRest)
            return visitor.visitClassCreatorRest(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ClassCreatorRestContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ClassCreatorRestContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ClassCreatorRestContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ClassCreatorRestContext.prototype, "accept", null);
exports.ClassCreatorRestContext = ClassCreatorRestContext;
class VariableInitializerContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    arrayInitializer() {
        return this.tryGetRuleContext(0, ArrayInitializerContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_variableInitializer; }
    enterRule(listener) {
        if (listener.enterVariableInitializer)
            listener.enterVariableInitializer(this);
    }
    exitRule(listener) {
        if (listener.exitVariableInitializer)
            listener.exitVariableInitializer(this);
    }
    accept(visitor) {
        if (visitor.visitVariableInitializer)
            return visitor.visitVariableInitializer(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], VariableInitializerContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], VariableInitializerContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], VariableInitializerContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], VariableInitializerContext.prototype, "accept", null);
exports.VariableInitializerContext = VariableInitializerContext;
class ArrayInitializerContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    variableInitializer(i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableInitializerContext);
        }
        else {
            return this.getRuleContext(i, VariableInitializerContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_arrayInitializer; }
    enterRule(listener) {
        if (listener.enterArrayInitializer)
            listener.enterArrayInitializer(this);
    }
    exitRule(listener) {
        if (listener.exitArrayInitializer)
            listener.exitArrayInitializer(this);
    }
    accept(visitor) {
        if (visitor.visitArrayInitializer)
            return visitor.visitArrayInitializer(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ArrayInitializerContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ArrayInitializerContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ArrayInitializerContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ArrayInitializerContext.prototype, "accept", null);
exports.ArrayInitializerContext = ArrayInitializerContext;
class ArgumentsContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_arguments; }
    enterRule(listener) {
        if (listener.enterArguments)
            listener.enterArguments(this);
    }
    exitRule(listener) {
        if (listener.exitArguments)
            listener.exitArguments(this);
    }
    accept(visitor) {
        if (visitor.visitArguments)
            return visitor.visitArguments(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ArgumentsContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ArgumentsContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ArgumentsContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ArgumentsContext.prototype, "accept", null);
exports.ArgumentsContext = ArgumentsContext;
class CodeBlockContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    blockStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockStatementContext);
        }
        else {
            return this.getRuleContext(i, BlockStatementContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_codeBlock; }
    enterRule(listener) {
        if (listener.enterCodeBlock)
            listener.enterCodeBlock(this);
    }
    exitRule(listener) {
        if (listener.exitCodeBlock)
            listener.exitCodeBlock(this);
    }
    accept(visitor) {
        if (visitor.visitCodeBlock)
            return visitor.visitCodeBlock(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], CodeBlockContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], CodeBlockContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], CodeBlockContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], CodeBlockContext.prototype, "accept", null);
exports.CodeBlockContext = CodeBlockContext;
class StaticCodeBlockContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    STATIC() { return this.getToken(ApexcodeParser.STATIC, 0); }
    codeBlock() {
        return this.getRuleContext(0, CodeBlockContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_staticCodeBlock; }
    enterRule(listener) {
        if (listener.enterStaticCodeBlock)
            listener.enterStaticCodeBlock(this);
    }
    exitRule(listener) {
        if (listener.exitStaticCodeBlock)
            listener.exitStaticCodeBlock(this);
    }
    accept(visitor) {
        if (visitor.visitStaticCodeBlock)
            return visitor.visitStaticCodeBlock(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], StaticCodeBlockContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], StaticCodeBlockContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], StaticCodeBlockContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], StaticCodeBlockContext.prototype, "accept", null);
exports.StaticCodeBlockContext = StaticCodeBlockContext;
class LocalVariableDeclarationContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    variableName(i) {
        if (i === undefined) {
            return this.getRuleContexts(VariableNameContext);
        }
        else {
            return this.getRuleContext(i, VariableNameContext);
        }
    }
    localVariableModifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(LocalVariableModifierContext);
        }
        else {
            return this.getRuleContext(i, LocalVariableModifierContext);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_localVariableDeclaration; }
    enterRule(listener) {
        if (listener.enterLocalVariableDeclaration)
            listener.enterLocalVariableDeclaration(this);
    }
    exitRule(listener) {
        if (listener.exitLocalVariableDeclaration)
            listener.exitLocalVariableDeclaration(this);
    }
    accept(visitor) {
        if (visitor.visitLocalVariableDeclaration)
            return visitor.visitLocalVariableDeclaration(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], LocalVariableDeclarationContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], LocalVariableDeclarationContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], LocalVariableDeclarationContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], LocalVariableDeclarationContext.prototype, "accept", null);
exports.LocalVariableDeclarationContext = LocalVariableDeclarationContext;
class LocalVariableModifierContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    FINAL() { return this.tryGetToken(ApexcodeParser.FINAL, 0); }
    TRANSIENT() { return this.tryGetToken(ApexcodeParser.TRANSIENT, 0); }
    get ruleIndex() { return ApexcodeParser.RULE_localVariableModifier; }
    enterRule(listener) {
        if (listener.enterLocalVariableModifier)
            listener.enterLocalVariableModifier(this);
    }
    exitRule(listener) {
        if (listener.exitLocalVariableModifier)
            listener.exitLocalVariableModifier(this);
    }
    accept(visitor) {
        if (visitor.visitLocalVariableModifier)
            return visitor.visitLocalVariableModifier(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], LocalVariableModifierContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], LocalVariableModifierContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], LocalVariableModifierContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], LocalVariableModifierContext.prototype, "accept", null);
exports.LocalVariableModifierContext = LocalVariableModifierContext;
class BlockStatementContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    localVariableDeclaration() {
        return this.tryGetRuleContext(0, LocalVariableDeclarationContext);
    }
    statement() {
        return this.tryGetRuleContext(0, StatementContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_blockStatement; }
    enterRule(listener) {
        if (listener.enterBlockStatement)
            listener.enterBlockStatement(this);
    }
    exitRule(listener) {
        if (listener.exitBlockStatement)
            listener.exitBlockStatement(this);
    }
    accept(visitor) {
        if (visitor.visitBlockStatement)
            return visitor.visitBlockStatement(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], BlockStatementContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], BlockStatementContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], BlockStatementContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], BlockStatementContext.prototype, "accept", null);
exports.BlockStatementContext = BlockStatementContext;
class QualifiedNameContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    Identifier(i) {
        if (i === undefined) {
            return this.getTokens(ApexcodeParser.Identifier);
        }
        else {
            return this.getToken(ApexcodeParser.Identifier, i);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_qualifiedName; }
    enterRule(listener) {
        if (listener.enterQualifiedName)
            listener.enterQualifiedName(this);
    }
    exitRule(listener) {
        if (listener.exitQualifiedName)
            listener.exitQualifiedName(this);
    }
    accept(visitor) {
        if (visitor.visitQualifiedName)
            return visitor.visitQualifiedName(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], QualifiedNameContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], QualifiedNameContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], QualifiedNameContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], QualifiedNameContext.prototype, "accept", null);
exports.QualifiedNameContext = QualifiedNameContext;
class ForControlContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    enhancedForControl() {
        return this.tryGetRuleContext(0, EnhancedForControlContext);
    }
    forInit() {
        return this.tryGetRuleContext(0, ForInitContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    forUpdate() {
        return this.tryGetRuleContext(0, ForUpdateContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_forControl; }
    enterRule(listener) {
        if (listener.enterForControl)
            listener.enterForControl(this);
    }
    exitRule(listener) {
        if (listener.exitForControl)
            listener.exitForControl(this);
    }
    accept(visitor) {
        if (visitor.visitForControl)
            return visitor.visitForControl(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ForControlContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ForControlContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ForControlContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ForControlContext.prototype, "accept", null);
exports.ForControlContext = ForControlContext;
class ForInitContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    localVariableDeclaration() {
        return this.tryGetRuleContext(0, LocalVariableDeclarationContext);
    }
    expressionList() {
        return this.tryGetRuleContext(0, ExpressionListContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_forInit; }
    enterRule(listener) {
        if (listener.enterForInit)
            listener.enterForInit(this);
    }
    exitRule(listener) {
        if (listener.exitForInit)
            listener.exitForInit(this);
    }
    accept(visitor) {
        if (visitor.visitForInit)
            return visitor.visitForInit(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ForInitContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ForInitContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ForInitContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ForInitContext.prototype, "accept", null);
exports.ForInitContext = ForInitContext;
class EnhancedForControlContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    dataType() {
        return this.getRuleContext(0, DataTypeContext);
    }
    variableName() {
        return this.getRuleContext(0, VariableNameContext);
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_enhancedForControl; }
    enterRule(listener) {
        if (listener.enterEnhancedForControl)
            listener.enterEnhancedForControl(this);
    }
    exitRule(listener) {
        if (listener.exitEnhancedForControl)
            listener.exitEnhancedForControl(this);
    }
    accept(visitor) {
        if (visitor.visitEnhancedForControl)
            return visitor.visitEnhancedForControl(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], EnhancedForControlContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], EnhancedForControlContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], EnhancedForControlContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], EnhancedForControlContext.prototype, "accept", null);
exports.EnhancedForControlContext = EnhancedForControlContext;
class ForUpdateContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    expressionList() {
        return this.getRuleContext(0, ExpressionListContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_forUpdate; }
    enterRule(listener) {
        if (listener.enterForUpdate)
            listener.enterForUpdate(this);
    }
    exitRule(listener) {
        if (listener.exitForUpdate)
            listener.exitForUpdate(this);
    }
    accept(visitor) {
        if (visitor.visitForUpdate)
            return visitor.visitForUpdate(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ForUpdateContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], ForUpdateContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ForUpdateContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ForUpdateContext.prototype, "accept", null);
exports.ForUpdateContext = ForUpdateContext;
class CatchClauseContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    CATCH() { return this.getToken(ApexcodeParser.CATCH, 0); }
    catchType() {
        return this.getRuleContext(0, CatchTypeContext);
    }
    variableName() {
        return this.getRuleContext(0, VariableNameContext);
    }
    codeBlock() {
        return this.getRuleContext(0, CodeBlockContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_catchClause; }
    enterRule(listener) {
        if (listener.enterCatchClause)
            listener.enterCatchClause(this);
    }
    exitRule(listener) {
        if (listener.exitCatchClause)
            listener.exitCatchClause(this);
    }
    accept(visitor) {
        if (visitor.visitCatchClause)
            return visitor.visitCatchClause(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], CatchClauseContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], CatchClauseContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], CatchClauseContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], CatchClauseContext.prototype, "accept", null);
exports.CatchClauseContext = CatchClauseContext;
class CatchTypeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    qualifiedName(i) {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }
        else {
            return this.getRuleContext(i, QualifiedNameContext);
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_catchType; }
    enterRule(listener) {
        if (listener.enterCatchType)
            listener.enterCatchType(this);
    }
    exitRule(listener) {
        if (listener.exitCatchType)
            listener.exitCatchType(this);
    }
    accept(visitor) {
        if (visitor.visitCatchType)
            return visitor.visitCatchType(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], CatchTypeContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], CatchTypeContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], CatchTypeContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], CatchTypeContext.prototype, "accept", null);
exports.CatchTypeContext = CatchTypeContext;
class FinallyBlockContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    FINALLY() { return this.getToken(ApexcodeParser.FINALLY, 0); }
    codeBlock() {
        return this.getRuleContext(0, CodeBlockContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_finallyBlock; }
    enterRule(listener) {
        if (listener.enterFinallyBlock)
            listener.enterFinallyBlock(this);
    }
    exitRule(listener) {
        if (listener.exitFinallyBlock)
            listener.exitFinallyBlock(this);
    }
    accept(visitor) {
        if (visitor.visitFinallyBlock)
            return visitor.visitFinallyBlock(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], FinallyBlockContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], FinallyBlockContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], FinallyBlockContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], FinallyBlockContext.prototype, "accept", null);
exports.FinallyBlockContext = FinallyBlockContext;
class StatementContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        if (parent !== undefined && invokingState !== undefined) {
            super(parent, invokingState);
        }
        else {
            super();
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_statement; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
__decorate([
    Decorators_2.Override
], StatementContext.prototype, "ruleIndex", null);
exports.StatementContext = StatementContext;
class ForStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    FOR() { return this.getToken(ApexcodeParser.FOR, 0); }
    forControl() {
        return this.getRuleContext(0, ForControlContext);
    }
    statement() {
        return this.getRuleContext(0, StatementContext);
    }
    enterRule(listener) {
        if (listener.enterForStmt)
            listener.enterForStmt(this);
    }
    exitRule(listener) {
        if (listener.exitForStmt)
            listener.exitForStmt(this);
    }
    accept(visitor) {
        if (visitor.visitForStmt)
            return visitor.visitForStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ForStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ForStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ForStmtContext.prototype, "accept", null);
exports.ForStmtContext = ForStmtContext;
class WhileStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    WHILE() { return this.getToken(ApexcodeParser.WHILE, 0); }
    parExpression() {
        return this.getRuleContext(0, ParExpressionContext);
    }
    statement() {
        return this.getRuleContext(0, StatementContext);
    }
    enterRule(listener) {
        if (listener.enterWhileStmt)
            listener.enterWhileStmt(this);
    }
    exitRule(listener) {
        if (listener.exitWhileStmt)
            listener.exitWhileStmt(this);
    }
    accept(visitor) {
        if (visitor.visitWhileStmt)
            return visitor.visitWhileStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], WhileStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], WhileStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], WhileStmtContext.prototype, "accept", null);
exports.WhileStmtContext = WhileStmtContext;
class ExpressionStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterExpressionStmt)
            listener.enterExpressionStmt(this);
    }
    exitRule(listener) {
        if (listener.exitExpressionStmt)
            listener.exitExpressionStmt(this);
    }
    accept(visitor) {
        if (visitor.visitExpressionStmt)
            return visitor.visitExpressionStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ExpressionStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ExpressionStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ExpressionStmtContext.prototype, "accept", null);
exports.ExpressionStmtContext = ExpressionStmtContext;
class EmptyStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    enterRule(listener) {
        if (listener.enterEmptyStmt)
            listener.enterEmptyStmt(this);
    }
    exitRule(listener) {
        if (listener.exitEmptyStmt)
            listener.exitEmptyStmt(this);
    }
    accept(visitor) {
        if (visitor.visitEmptyStmt)
            return visitor.visitEmptyStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], EmptyStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], EmptyStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], EmptyStmtContext.prototype, "accept", null);
exports.EmptyStmtContext = EmptyStmtContext;
class ReturnStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    RETURN() { return this.getToken(ApexcodeParser.RETURN, 0); }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterReturnStmt)
            listener.enterReturnStmt(this);
    }
    exitRule(listener) {
        if (listener.exitReturnStmt)
            listener.exitReturnStmt(this);
    }
    accept(visitor) {
        if (visitor.visitReturnStmt)
            return visitor.visitReturnStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ReturnStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ReturnStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ReturnStmtContext.prototype, "accept", null);
exports.ReturnStmtContext = ReturnStmtContext;
class DbShortcutStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    db_shortcut_expression() {
        return this.getRuleContext(0, Db_shortcut_expressionContext);
    }
    enterRule(listener) {
        if (listener.enterDbShortcutStmt)
            listener.enterDbShortcutStmt(this);
    }
    exitRule(listener) {
        if (listener.exitDbShortcutStmt)
            listener.exitDbShortcutStmt(this);
    }
    accept(visitor) {
        if (visitor.visitDbShortcutStmt)
            return visitor.visitDbShortcutStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], DbShortcutStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], DbShortcutStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], DbShortcutStmtContext.prototype, "accept", null);
exports.DbShortcutStmtContext = DbShortcutStmtContext;
class ThrowStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    THROW() { return this.getToken(ApexcodeParser.THROW, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterThrowStmt)
            listener.enterThrowStmt(this);
    }
    exitRule(listener) {
        if (listener.exitThrowStmt)
            listener.exitThrowStmt(this);
    }
    accept(visitor) {
        if (visitor.visitThrowStmt)
            return visitor.visitThrowStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ThrowStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ThrowStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ThrowStmtContext.prototype, "accept", null);
exports.ThrowStmtContext = ThrowStmtContext;
class TryCatchFinallyStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    TRY() { return this.getToken(ApexcodeParser.TRY, 0); }
    codeBlock() {
        return this.getRuleContext(0, CodeBlockContext);
    }
    finallyBlock() {
        return this.tryGetRuleContext(0, FinallyBlockContext);
    }
    catchClause(i) {
        if (i === undefined) {
            return this.getRuleContexts(CatchClauseContext);
        }
        else {
            return this.getRuleContext(i, CatchClauseContext);
        }
    }
    enterRule(listener) {
        if (listener.enterTryCatchFinallyStmt)
            listener.enterTryCatchFinallyStmt(this);
    }
    exitRule(listener) {
        if (listener.exitTryCatchFinallyStmt)
            listener.exitTryCatchFinallyStmt(this);
    }
    accept(visitor) {
        if (visitor.visitTryCatchFinallyStmt)
            return visitor.visitTryCatchFinallyStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], TryCatchFinallyStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], TryCatchFinallyStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], TryCatchFinallyStmtContext.prototype, "accept", null);
exports.TryCatchFinallyStmtContext = TryCatchFinallyStmtContext;
class RunAsStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    runas_expression() {
        return this.getRuleContext(0, Runas_expressionContext);
    }
    enterRule(listener) {
        if (listener.enterRunAsStmt)
            listener.enterRunAsStmt(this);
    }
    exitRule(listener) {
        if (listener.exitRunAsStmt)
            listener.exitRunAsStmt(this);
    }
    accept(visitor) {
        if (visitor.visitRunAsStmt)
            return visitor.visitRunAsStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], RunAsStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], RunAsStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], RunAsStmtContext.prototype, "accept", null);
exports.RunAsStmtContext = RunAsStmtContext;
class DoWhileStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    DO() { return this.getToken(ApexcodeParser.DO, 0); }
    statement() {
        return this.getRuleContext(0, StatementContext);
    }
    WHILE() { return this.getToken(ApexcodeParser.WHILE, 0); }
    parExpression() {
        return this.getRuleContext(0, ParExpressionContext);
    }
    enterRule(listener) {
        if (listener.enterDoWhileStmt)
            listener.enterDoWhileStmt(this);
    }
    exitRule(listener) {
        if (listener.exitDoWhileStmt)
            listener.exitDoWhileStmt(this);
    }
    accept(visitor) {
        if (visitor.visitDoWhileStmt)
            return visitor.visitDoWhileStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], DoWhileStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], DoWhileStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], DoWhileStmtContext.prototype, "accept", null);
exports.DoWhileStmtContext = DoWhileStmtContext;
class BlockStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    codeBlock() {
        return this.getRuleContext(0, CodeBlockContext);
    }
    enterRule(listener) {
        if (listener.enterBlockStmt)
            listener.enterBlockStmt(this);
    }
    exitRule(listener) {
        if (listener.exitBlockStmt)
            listener.exitBlockStmt(this);
    }
    accept(visitor) {
        if (visitor.visitBlockStmt)
            return visitor.visitBlockStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], BlockStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], BlockStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], BlockStmtContext.prototype, "accept", null);
exports.BlockStmtContext = BlockStmtContext;
class IfElseStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    IF() { return this.getToken(ApexcodeParser.IF, 0); }
    parExpression() {
        return this.getRuleContext(0, ParExpressionContext);
    }
    statement(i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    }
    ELSE() { return this.tryGetToken(ApexcodeParser.ELSE, 0); }
    enterRule(listener) {
        if (listener.enterIfElseStmt)
            listener.enterIfElseStmt(this);
    }
    exitRule(listener) {
        if (listener.exitIfElseStmt)
            listener.exitIfElseStmt(this);
    }
    accept(visitor) {
        if (visitor.visitIfElseStmt)
            return visitor.visitIfElseStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], IfElseStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], IfElseStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], IfElseStmtContext.prototype, "accept", null);
exports.IfElseStmtContext = IfElseStmtContext;
class BreakStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    BREAK() { return this.getToken(ApexcodeParser.BREAK, 0); }
    enterRule(listener) {
        if (listener.enterBreakStmt)
            listener.enterBreakStmt(this);
    }
    exitRule(listener) {
        if (listener.exitBreakStmt)
            listener.exitBreakStmt(this);
    }
    accept(visitor) {
        if (visitor.visitBreakStmt)
            return visitor.visitBreakStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], BreakStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], BreakStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], BreakStmtContext.prototype, "accept", null);
exports.BreakStmtContext = BreakStmtContext;
class ContinueStmtContext extends StatementContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    CONTINUE() { return this.getToken(ApexcodeParser.CONTINUE, 0); }
    enterRule(listener) {
        if (listener.enterContinueStmt)
            listener.enterContinueStmt(this);
    }
    exitRule(listener) {
        if (listener.exitContinueStmt)
            listener.exitContinueStmt(this);
    }
    accept(visitor) {
        if (visitor.visitContinueStmt)
            return visitor.visitContinueStmt(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], ContinueStmtContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], ContinueStmtContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], ContinueStmtContext.prototype, "accept", null);
exports.ContinueStmtContext = ContinueStmtContext;
class LiteralContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        if (parent !== undefined && invokingState !== undefined) {
            super(parent, invokingState);
        }
        else {
            super();
        }
    }
    get ruleIndex() { return ApexcodeParser.RULE_literal; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
__decorate([
    Decorators_2.Override
], LiteralContext.prototype, "ruleIndex", null);
exports.LiteralContext = LiteralContext;
class StrLiteralContext extends LiteralContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    StringLiteral() { return this.getToken(ApexcodeParser.StringLiteral, 0); }
    enterRule(listener) {
        if (listener.enterStrLiteral)
            listener.enterStrLiteral(this);
    }
    exitRule(listener) {
        if (listener.exitStrLiteral)
            listener.exitStrLiteral(this);
    }
    accept(visitor) {
        if (visitor.visitStrLiteral)
            return visitor.visitStrLiteral(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], StrLiteralContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], StrLiteralContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], StrLiteralContext.prototype, "accept", null);
exports.StrLiteralContext = StrLiteralContext;
class NullLiteralContext extends LiteralContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    NULL() { return this.getToken(ApexcodeParser.NULL, 0); }
    enterRule(listener) {
        if (listener.enterNullLiteral)
            listener.enterNullLiteral(this);
    }
    exitRule(listener) {
        if (listener.exitNullLiteral)
            listener.exitNullLiteral(this);
    }
    accept(visitor) {
        if (visitor.visitNullLiteral)
            return visitor.visitNullLiteral(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], NullLiteralContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], NullLiteralContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], NullLiteralContext.prototype, "accept", null);
exports.NullLiteralContext = NullLiteralContext;
class SoslLiteralContext extends LiteralContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    SoslLiteral() { return this.getToken(ApexcodeParser.SoslLiteral, 0); }
    enterRule(listener) {
        if (listener.enterSoslLiteral)
            listener.enterSoslLiteral(this);
    }
    exitRule(listener) {
        if (listener.exitSoslLiteral)
            listener.exitSoslLiteral(this);
    }
    accept(visitor) {
        if (visitor.visitSoslLiteral)
            return visitor.visitSoslLiteral(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], SoslLiteralContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], SoslLiteralContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], SoslLiteralContext.prototype, "accept", null);
exports.SoslLiteralContext = SoslLiteralContext;
class FpLiteralContext extends LiteralContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    FloatingPointLiteral() { return this.getToken(ApexcodeParser.FloatingPointLiteral, 0); }
    enterRule(listener) {
        if (listener.enterFpLiteral)
            listener.enterFpLiteral(this);
    }
    exitRule(listener) {
        if (listener.exitFpLiteral)
            listener.exitFpLiteral(this);
    }
    accept(visitor) {
        if (visitor.visitFpLiteral)
            return visitor.visitFpLiteral(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], FpLiteralContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], FpLiteralContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], FpLiteralContext.prototype, "accept", null);
exports.FpLiteralContext = FpLiteralContext;
class IntLiteralContext extends LiteralContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    IntegerLiteral() { return this.getToken(ApexcodeParser.IntegerLiteral, 0); }
    enterRule(listener) {
        if (listener.enterIntLiteral)
            listener.enterIntLiteral(this);
    }
    exitRule(listener) {
        if (listener.exitIntLiteral)
            listener.exitIntLiteral(this);
    }
    accept(visitor) {
        if (visitor.visitIntLiteral)
            return visitor.visitIntLiteral(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], IntLiteralContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], IntLiteralContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], IntLiteralContext.prototype, "accept", null);
exports.IntLiteralContext = IntLiteralContext;
class SoqlLiteralContext extends LiteralContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    SoqlLiteral() { return this.getToken(ApexcodeParser.SoqlLiteral, 0); }
    enterRule(listener) {
        if (listener.enterSoqlLiteral)
            listener.enterSoqlLiteral(this);
    }
    exitRule(listener) {
        if (listener.exitSoqlLiteral)
            listener.exitSoqlLiteral(this);
    }
    accept(visitor) {
        if (visitor.visitSoqlLiteral)
            return visitor.visitSoqlLiteral(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], SoqlLiteralContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], SoqlLiteralContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], SoqlLiteralContext.prototype, "accept", null);
exports.SoqlLiteralContext = SoqlLiteralContext;
class BoolLiteralContext extends LiteralContext {
    constructor(ctx) { super(); this.copyFrom(ctx); }
    BooleanLiteral() { return this.getToken(ApexcodeParser.BooleanLiteral, 0); }
    enterRule(listener) {
        if (listener.enterBoolLiteral)
            listener.enterBoolLiteral(this);
    }
    exitRule(listener) {
        if (listener.exitBoolLiteral)
            listener.exitBoolLiteral(this);
    }
    accept(visitor) {
        if (visitor.visitBoolLiteral)
            return visitor.visitBoolLiteral(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], BoolLiteralContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], BoolLiteralContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], BoolLiteralContext.prototype, "accept", null);
exports.BoolLiteralContext = BoolLiteralContext;
class DataTypeContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    VOID() { return this.tryGetToken(ApexcodeParser.VOID, 0); }
    qualifiedName() {
        return this.tryGetRuleContext(0, QualifiedNameContext);
    }
    typeArguments() {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    }
    get ruleIndex() { return ApexcodeParser.RULE_dataType; }
    enterRule(listener) {
        if (listener.enterDataType)
            listener.enterDataType(this);
    }
    exitRule(listener) {
        if (listener.exitDataType)
            listener.exitDataType(this);
    }
    accept(visitor) {
        if (visitor.visitDataType)
            return visitor.visitDataType(this);
        else
            return visitor.visitChildren(this);
    }
}
__decorate([
    Decorators_2.Override
], DataTypeContext.prototype, "ruleIndex", null);
__decorate([
    Decorators_2.Override
], DataTypeContext.prototype, "enterRule", null);
__decorate([
    Decorators_2.Override
], DataTypeContext.prototype, "exitRule", null);
__decorate([
    Decorators_2.Override
], DataTypeContext.prototype, "accept", null);
exports.DataTypeContext = DataTypeContext;
//# sourceMappingURL=ApexcodeParser.js.map