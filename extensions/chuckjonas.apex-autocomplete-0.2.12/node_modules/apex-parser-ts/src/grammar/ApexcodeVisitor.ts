// Generated from /Users/jonas/Documents/code/apex-parser-ts/src/grammar/Apexcode.g4 by ANTLR 4.6-SNAPSHOT


import { ParseTreeVisitor } from 'antlr4ts/tree/ParseTreeVisitor';

import { TriggerDefContext } from './ApexcodeParser';
import { ClassDefContext } from './ApexcodeParser';
import { EnumDefContext } from './ApexcodeParser';
import { InterfaceDefContext } from './ApexcodeParser';
import { EmptyDefContext } from './ApexcodeParser';
import { StrLiteralContext } from './ApexcodeParser';
import { NullLiteralContext } from './ApexcodeParser';
import { SoslLiteralContext } from './ApexcodeParser';
import { FpLiteralContext } from './ApexcodeParser';
import { IntLiteralContext } from './ApexcodeParser';
import { SoqlLiteralContext } from './ApexcodeParser';
import { BoolLiteralContext } from './ApexcodeParser';
import { ForStmtContext } from './ApexcodeParser';
import { WhileStmtContext } from './ApexcodeParser';
import { ExpressionStmtContext } from './ApexcodeParser';
import { EmptyStmtContext } from './ApexcodeParser';
import { ReturnStmtContext } from './ApexcodeParser';
import { DbShortcutStmtContext } from './ApexcodeParser';
import { ThrowStmtContext } from './ApexcodeParser';
import { TryCatchFinallyStmtContext } from './ApexcodeParser';
import { RunAsStmtContext } from './ApexcodeParser';
import { DoWhileStmtContext } from './ApexcodeParser';
import { BlockStmtContext } from './ApexcodeParser';
import { IfElseStmtContext } from './ApexcodeParser';
import { BreakStmtContext } from './ApexcodeParser';
import { ContinueStmtContext } from './ApexcodeParser';
import { DbShortcutTwoOpContext } from './ApexcodeParser';
import { DbShortcutMergeContext } from './ApexcodeParser';
import { DbShortcutOneOpContext } from './ApexcodeParser';
import { AssignmentExprContext } from './ApexcodeParser';
import { PostIncrementExprContext } from './ApexcodeParser';
import { BitwiseXorExprContext } from './ApexcodeParser';
import { InstanceOfExprContext } from './ApexcodeParser';
import { ExprDotExpressionContext } from './ApexcodeParser';
import { BitwiseOrExprContext } from './ApexcodeParser';
import { BitwiseAndExprContext } from './ApexcodeParser';
import { ComparisonExprContext } from './ApexcodeParser';
import { ArrayIndexExprContext } from './ApexcodeParser';
import { TypeCastComplexExprContext } from './ApexcodeParser';
import { PreIncrementExprContext } from './ApexcodeParser';
import { CreatorExpressionContext } from './ApexcodeParser';
import { MethodCallExprContext } from './ApexcodeParser';
import { UnaryInequalityExprContext } from './ApexcodeParser';
import { UnaryExprContext } from './ApexcodeParser';
import { InfixAndExprContext } from './ApexcodeParser';
import { PrimaryExprContext } from './ApexcodeParser';
import { InfixMulExprContext } from './ApexcodeParser';
import { TernaryExprContext } from './ApexcodeParser';
import { InfixOrExprContext } from './ApexcodeParser';
import { InfixShiftExprContext } from './ApexcodeParser';
import { InfixAddExprContext } from './ApexcodeParser';
import { InfixEqualityExprContext } from './ApexcodeParser';
import { TypeCastSimpleExprContext } from './ApexcodeParser';
import { CompilationUnitContext } from './ApexcodeParser';
import { TypeDeclarationContext } from './ApexcodeParser';
import { ClassOrInterfaceModifierContext } from './ApexcodeParser';
import { ClassOrInterfaceVisibilityModifierContext } from './ApexcodeParser';
import { ClassSharingModifierContext } from './ApexcodeParser';
import { ClassDeclarationContext } from './ApexcodeParser';
import { ClassNameContext } from './ApexcodeParser';
import { ExtendsDeclarationContext } from './ApexcodeParser';
import { ImplementsDeclarationContext } from './ApexcodeParser';
import { ClassBodyContext } from './ApexcodeParser';
import { ClassBodyMemberContext } from './ApexcodeParser';
import { ClassConstructorContext } from './ApexcodeParser';
import { ClassConstructorModifierContext } from './ApexcodeParser';
import { InterfaceDeclarationContext } from './ApexcodeParser';
import { InterfaceNameContext } from './ApexcodeParser';
import { InterfaceBodyContext } from './ApexcodeParser';
import { TriggerDeclarationContext } from './ApexcodeParser';
import { TriggerNameContext } from './ApexcodeParser';
import { TriggerSObjectTypeContext } from './ApexcodeParser';
import { ClassVariableContext } from './ApexcodeParser';
import { ClassVariableModifierContext } from './ApexcodeParser';
import { VariableNameContext } from './ApexcodeParser';
import { ClassMethodContext } from './ApexcodeParser';
import { MethodParametersContext } from './ApexcodeParser';
import { MethodParameterContext } from './ApexcodeParser';
import { MethodParameterNameContext } from './ApexcodeParser';
import { MethodHeaderContext } from './ApexcodeParser';
import { MethodHeaderModifierContext } from './ApexcodeParser';
import { MethodNameContext } from './ApexcodeParser';
import { MethodBodyContext } from './ApexcodeParser';
import { ClassPropertyContext } from './ApexcodeParser';
import { PropertyModifierContext } from './ApexcodeParser';
import { PropertyNameContext } from './ApexcodeParser';
import { PropertyGetContext } from './ApexcodeParser';
import { PropertySetContext } from './ApexcodeParser';
import { PropertyGetSetModifierContext } from './ApexcodeParser';
import { EnumDeclarationContext } from './ApexcodeParser';
import { EnumNameContext } from './ApexcodeParser';
import { EnumConstantsContext } from './ApexcodeParser';
import { EnumConstantContext } from './ApexcodeParser';
import { AnnotationContext } from './ApexcodeParser';
import { AnnotationNameContext } from './ApexcodeParser';
import { AnnotationElementValuePairsContext } from './ApexcodeParser';
import { AnnotationElementValuePairContext } from './ApexcodeParser';
import { AnnotationElementValueContext } from './ApexcodeParser';
import { ExpressionContext } from './ApexcodeParser';
import { PrimaryContext } from './ApexcodeParser';
import { ParExpressionContext } from './ApexcodeParser';
import { ExpressionListContext } from './ApexcodeParser';
import { Runas_expressionContext } from './ApexcodeParser';
import { Db_shortcut_expressionContext } from './ApexcodeParser';
import { CreatorContext } from './ApexcodeParser';
import { TypeArgumentsContext } from './ApexcodeParser';
import { ArrayCreatorRestContext } from './ApexcodeParser';
import { MapCreatorRestContext } from './ApexcodeParser';
import { SetCreatorRestContext } from './ApexcodeParser';
import { ClassCreatorRestContext } from './ApexcodeParser';
import { VariableInitializerContext } from './ApexcodeParser';
import { ArrayInitializerContext } from './ApexcodeParser';
import { ArgumentsContext } from './ApexcodeParser';
import { CodeBlockContext } from './ApexcodeParser';
import { StaticCodeBlockContext } from './ApexcodeParser';
import { LocalVariableDeclarationContext } from './ApexcodeParser';
import { LocalVariableModifierContext } from './ApexcodeParser';
import { BlockStatementContext } from './ApexcodeParser';
import { QualifiedNameContext } from './ApexcodeParser';
import { ForControlContext } from './ApexcodeParser';
import { ForInitContext } from './ApexcodeParser';
import { EnhancedForControlContext } from './ApexcodeParser';
import { ForUpdateContext } from './ApexcodeParser';
import { CatchClauseContext } from './ApexcodeParser';
import { CatchTypeContext } from './ApexcodeParser';
import { FinallyBlockContext } from './ApexcodeParser';
import { StatementContext } from './ApexcodeParser';
import { LiteralContext } from './ApexcodeParser';
import { DataTypeContext } from './ApexcodeParser';


/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `ApexcodeParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
export interface ApexcodeVisitor<Result> extends ParseTreeVisitor<Result> {
	/**
	 * Visit a parse tree produced by the `triggerDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTriggerDef?: (ctx: TriggerDefContext) => Result;

	/**
	 * Visit a parse tree produced by the `classDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassDef?: (ctx: ClassDefContext) => Result;

	/**
	 * Visit a parse tree produced by the `enumDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitEnumDef?: (ctx: EnumDefContext) => Result;

	/**
	 * Visit a parse tree produced by the `interfaceDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInterfaceDef?: (ctx: InterfaceDefContext) => Result;

	/**
	 * Visit a parse tree produced by the `emptyDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitEmptyDef?: (ctx: EmptyDefContext) => Result;

	/**
	 * Visit a parse tree produced by the `strLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitStrLiteral?: (ctx: StrLiteralContext) => Result;

	/**
	 * Visit a parse tree produced by the `nullLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitNullLiteral?: (ctx: NullLiteralContext) => Result;

	/**
	 * Visit a parse tree produced by the `soslLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitSoslLiteral?: (ctx: SoslLiteralContext) => Result;

	/**
	 * Visit a parse tree produced by the `fpLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitFpLiteral?: (ctx: FpLiteralContext) => Result;

	/**
	 * Visit a parse tree produced by the `intLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitIntLiteral?: (ctx: IntLiteralContext) => Result;

	/**
	 * Visit a parse tree produced by the `soqlLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitSoqlLiteral?: (ctx: SoqlLiteralContext) => Result;

	/**
	 * Visit a parse tree produced by the `boolLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitBoolLiteral?: (ctx: BoolLiteralContext) => Result;

	/**
	 * Visit a parse tree produced by the `forStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitForStmt?: (ctx: ForStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `whileStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitWhileStmt?: (ctx: WhileStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `expressionStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitExpressionStmt?: (ctx: ExpressionStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `emptyStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitEmptyStmt?: (ctx: EmptyStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `returnStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitReturnStmt?: (ctx: ReturnStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `dbShortcutStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitDbShortcutStmt?: (ctx: DbShortcutStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `throwStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitThrowStmt?: (ctx: ThrowStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `tryCatchFinallyStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTryCatchFinallyStmt?: (ctx: TryCatchFinallyStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `runAsStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitRunAsStmt?: (ctx: RunAsStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `doWhileStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitDoWhileStmt?: (ctx: DoWhileStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `blockStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitBlockStmt?: (ctx: BlockStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `ifElseStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitIfElseStmt?: (ctx: IfElseStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `breakStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitBreakStmt?: (ctx: BreakStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `continueStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitContinueStmt?: (ctx: ContinueStmtContext) => Result;

	/**
	 * Visit a parse tree produced by the `dbShortcutTwoOp`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitDbShortcutTwoOp?: (ctx: DbShortcutTwoOpContext) => Result;

	/**
	 * Visit a parse tree produced by the `dbShortcutMerge`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitDbShortcutMerge?: (ctx: DbShortcutMergeContext) => Result;

	/**
	 * Visit a parse tree produced by the `dbShortcutOneOp`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitDbShortcutOneOp?: (ctx: DbShortcutOneOpContext) => Result;

	/**
	 * Visit a parse tree produced by the `assignmentExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitAssignmentExpr?: (ctx: AssignmentExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `postIncrementExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPostIncrementExpr?: (ctx: PostIncrementExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `bitwiseXorExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitBitwiseXorExpr?: (ctx: BitwiseXorExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `instanceOfExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInstanceOfExpr?: (ctx: InstanceOfExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `exprDotExpression`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitExprDotExpression?: (ctx: ExprDotExpressionContext) => Result;

	/**
	 * Visit a parse tree produced by the `bitwiseOrExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitBitwiseOrExpr?: (ctx: BitwiseOrExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `bitwiseAndExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitBitwiseAndExpr?: (ctx: BitwiseAndExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `comparisonExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitComparisonExpr?: (ctx: ComparisonExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `arrayIndexExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitArrayIndexExpr?: (ctx: ArrayIndexExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `typeCastComplexExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTypeCastComplexExpr?: (ctx: TypeCastComplexExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `preIncrementExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPreIncrementExpr?: (ctx: PreIncrementExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `creatorExpression`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitCreatorExpression?: (ctx: CreatorExpressionContext) => Result;

	/**
	 * Visit a parse tree produced by the `methodCallExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMethodCallExpr?: (ctx: MethodCallExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `unaryInequalityExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitUnaryInequalityExpr?: (ctx: UnaryInequalityExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `unaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitUnaryExpr?: (ctx: UnaryExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `infixAndExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInfixAndExpr?: (ctx: InfixAndExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `primaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPrimaryExpr?: (ctx: PrimaryExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `infixMulExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInfixMulExpr?: (ctx: InfixMulExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `ternaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTernaryExpr?: (ctx: TernaryExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `infixOrExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInfixOrExpr?: (ctx: InfixOrExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `infixShiftExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInfixShiftExpr?: (ctx: InfixShiftExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `infixAddExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInfixAddExpr?: (ctx: InfixAddExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `infixEqualityExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInfixEqualityExpr?: (ctx: InfixEqualityExprContext) => Result;

	/**
	 * Visit a parse tree produced by the `typeCastSimpleExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTypeCastSimpleExpr?: (ctx: TypeCastSimpleExprContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.compilationUnit`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitCompilationUnit?: (ctx: CompilationUnitContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTypeDeclaration?: (ctx: TypeDeclarationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classOrInterfaceModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassOrInterfaceModifier?: (ctx: ClassOrInterfaceModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classOrInterfaceVisibilityModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassOrInterfaceVisibilityModifier?: (ctx: ClassOrInterfaceVisibilityModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classSharingModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassSharingModifier?: (ctx: ClassSharingModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassDeclaration?: (ctx: ClassDeclarationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.className`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassName?: (ctx: ClassNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.extendsDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitExtendsDeclaration?: (ctx: ExtendsDeclarationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.implementsDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitImplementsDeclaration?: (ctx: ImplementsDeclarationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classBody`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassBody?: (ctx: ClassBodyContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classBodyMember`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassBodyMember?: (ctx: ClassBodyMemberContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classConstructor`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassConstructor?: (ctx: ClassConstructorContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classConstructorModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassConstructorModifier?: (ctx: ClassConstructorModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.interfaceDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInterfaceDeclaration?: (ctx: InterfaceDeclarationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.interfaceName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInterfaceName?: (ctx: InterfaceNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.interfaceBody`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitInterfaceBody?: (ctx: InterfaceBodyContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.triggerDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTriggerDeclaration?: (ctx: TriggerDeclarationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.triggerName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTriggerName?: (ctx: TriggerNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.triggerSObjectType`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTriggerSObjectType?: (ctx: TriggerSObjectTypeContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classVariable`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassVariable?: (ctx: ClassVariableContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classVariableModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassVariableModifier?: (ctx: ClassVariableModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.variableName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitVariableName?: (ctx: VariableNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classMethod`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassMethod?: (ctx: ClassMethodContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.methodParameters`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMethodParameters?: (ctx: MethodParametersContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.methodParameter`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMethodParameter?: (ctx: MethodParameterContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.methodParameterName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMethodParameterName?: (ctx: MethodParameterNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.methodHeader`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMethodHeader?: (ctx: MethodHeaderContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.methodHeaderModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMethodHeaderModifier?: (ctx: MethodHeaderModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.methodName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMethodName?: (ctx: MethodNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.methodBody`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMethodBody?: (ctx: MethodBodyContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classProperty`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassProperty?: (ctx: ClassPropertyContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.propertyModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPropertyModifier?: (ctx: PropertyModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.propertyName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPropertyName?: (ctx: PropertyNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.propertyGet`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPropertyGet?: (ctx: PropertyGetContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.propertySet`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPropertySet?: (ctx: PropertySetContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.propertyGetSetModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPropertyGetSetModifier?: (ctx: PropertyGetSetModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.enumDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitEnumDeclaration?: (ctx: EnumDeclarationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.enumName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitEnumName?: (ctx: EnumNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.enumConstants`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitEnumConstants?: (ctx: EnumConstantsContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.enumConstant`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitEnumConstant?: (ctx: EnumConstantContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.annotation`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitAnnotation?: (ctx: AnnotationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.annotationName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitAnnotationName?: (ctx: AnnotationNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.annotationElementValuePairs`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitAnnotationElementValuePairs?: (ctx: AnnotationElementValuePairsContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.annotationElementValuePair`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitAnnotationElementValuePair?: (ctx: AnnotationElementValuePairContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.annotationElementValue`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitAnnotationElementValue?: (ctx: AnnotationElementValueContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitExpression?: (ctx: ExpressionContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.primary`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitPrimary?: (ctx: PrimaryContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.parExpression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitParExpression?: (ctx: ParExpressionContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.expressionList`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitExpressionList?: (ctx: ExpressionListContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.runas_expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitRunas_expression?: (ctx: Runas_expressionContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitDb_shortcut_expression?: (ctx: Db_shortcut_expressionContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.creator`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitCreator?: (ctx: CreatorContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.typeArguments`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitTypeArguments?: (ctx: TypeArgumentsContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.arrayCreatorRest`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitArrayCreatorRest?: (ctx: ArrayCreatorRestContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.mapCreatorRest`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitMapCreatorRest?: (ctx: MapCreatorRestContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.setCreatorRest`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitSetCreatorRest?: (ctx: SetCreatorRestContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.classCreatorRest`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitClassCreatorRest?: (ctx: ClassCreatorRestContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.variableInitializer`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitVariableInitializer?: (ctx: VariableInitializerContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.arrayInitializer`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitArrayInitializer?: (ctx: ArrayInitializerContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.arguments`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitArguments?: (ctx: ArgumentsContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.codeBlock`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitCodeBlock?: (ctx: CodeBlockContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.staticCodeBlock`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitStaticCodeBlock?: (ctx: StaticCodeBlockContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.localVariableDeclaration`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitLocalVariableDeclaration?: (ctx: LocalVariableDeclarationContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.localVariableModifier`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitLocalVariableModifier?: (ctx: LocalVariableModifierContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.blockStatement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitBlockStatement?: (ctx: BlockStatementContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.qualifiedName`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitQualifiedName?: (ctx: QualifiedNameContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.forControl`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitForControl?: (ctx: ForControlContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.forInit`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitForInit?: (ctx: ForInitContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.enhancedForControl`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitEnhancedForControl?: (ctx: EnhancedForControlContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.forUpdate`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitForUpdate?: (ctx: ForUpdateContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.catchClause`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitCatchClause?: (ctx: CatchClauseContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.catchType`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitCatchType?: (ctx: CatchTypeContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.finallyBlock`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitFinallyBlock?: (ctx: FinallyBlockContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitStatement?: (ctx: StatementContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitLiteral?: (ctx: LiteralContext) => Result;

	/**
	 * Visit a parse tree produced by `ApexcodeParser.dataType`.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	visitDataType?: (ctx: DataTypeContext) => Result;
}

