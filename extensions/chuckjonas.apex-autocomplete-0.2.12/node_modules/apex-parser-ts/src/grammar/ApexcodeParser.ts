// Generated from /Users/jonas/Documents/code/apex-parser-ts/src/grammar/Apexcode.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { FailedPredicateException } from 'antlr4ts/FailedPredicateException';
import { NotNull } from 'antlr4ts/Decorators';
import { NoViableAltException } from 'antlr4ts/NoViableAltException';
import { Override } from 'antlr4ts/Decorators';
import { Parser } from 'antlr4ts/Parser';
import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';
import { ParserATNSimulator } from 'antlr4ts/atn/ParserATNSimulator';
import { ParseTreeListener } from 'antlr4ts/tree/ParseTreeListener';
import { ParseTreeVisitor } from 'antlr4ts/tree/ParseTreeVisitor';
import { RecognitionException } from 'antlr4ts/RecognitionException';
import { RuleContext } from 'antlr4ts/RuleContext';
import { RuleVersion } from 'antlr4ts/RuleVersion';
import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { Token } from 'antlr4ts/Token';
import { TokenStream } from 'antlr4ts/TokenStream';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';

import { ApexcodeListener } from './ApexcodeListener';
import { ApexcodeVisitor } from './ApexcodeVisitor';


export class ApexcodeParser extends Parser {
	public static readonly T__0=1;
	public static readonly T__1=2;
	public static readonly T__2=3;
	public static readonly T__3=4;
	public static readonly T__4=5;
	public static readonly T__5=6;
	public static readonly T__6=7;
	public static readonly T__7=8;
	public static readonly T__8=9;
	public static readonly T__9=10;
	public static readonly T__10=11;
	public static readonly T__11=12;
	public static readonly T__12=13;
	public static readonly T__13=14;
	public static readonly T__14=15;
	public static readonly T__15=16;
	public static readonly T__16=17;
	public static readonly T__17=18;
	public static readonly T__18=19;
	public static readonly T__19=20;
	public static readonly T__20=21;
	public static readonly T__21=22;
	public static readonly T__22=23;
	public static readonly T__23=24;
	public static readonly T__24=25;
	public static readonly T__25=26;
	public static readonly T__26=27;
	public static readonly T__27=28;
	public static readonly T__28=29;
	public static readonly T__29=30;
	public static readonly T__30=31;
	public static readonly T__31=32;
	public static readonly T__32=33;
	public static readonly T__33=34;
	public static readonly T__34=35;
	public static readonly T__35=36;
	public static readonly T__36=37;
	public static readonly T__37=38;
	public static readonly T__38=39;
	public static readonly T__39=40;
	public static readonly T__40=41;
	public static readonly T__41=42;
	public static readonly T__42=43;
	public static readonly T__43=44;
	public static readonly APEXDOC_COMMENT=45;
	public static readonly COMMENT=46;
	public static readonly LINE_COMMENT=47;
	public static readonly WS=48;
	public static readonly BooleanLiteral=49;
	public static readonly ABSTRACT=50;
	public static readonly CLASS=51;
	public static readonly ENUM=52;
	public static readonly EXTENDS=53;
	public static readonly FALSE=54;
	public static readonly FINAL=55;
	public static readonly NULL=56;
	public static readonly IMPLEMENTS=57;
	public static readonly INSTANCE_OF=58;
	public static readonly INTERFACE=59;
	public static readonly OVERRIDE=60;
	public static readonly PRIVATE=61;
	public static readonly PROTECTED=62;
	public static readonly PUBLIC=63;
	public static readonly STATIC=64;
	public static readonly SUPER=65;
	public static readonly THIS=66;
	public static readonly TRANSIENT=67;
	public static readonly TRUE=68;
	public static readonly VIRTUAL=69;
	public static readonly VOID=70;
	public static readonly NEW=71;
	public static readonly BREAK=72;
	public static readonly CONTINUE=73;
	public static readonly DO=74;
	public static readonly ELSE=75;
	public static readonly FOR=76;
	public static readonly IF=77;
	public static readonly RETURN=78;
	public static readonly THROW=79;
	public static readonly TRY=80;
	public static readonly CATCH=81;
	public static readonly FINALLY=82;
	public static readonly WHILE=83;
	public static readonly BRACKET_THEN_FIND=84;
	public static readonly BRACKET_THEN_SELECT=85;
	public static readonly DB_DELETE=86;
	public static readonly DB_INSERT=87;
	public static readonly DB_MERGE=88;
	public static readonly DB_UNDELETE=89;
	public static readonly DB_UPDATE=90;
	public static readonly DB_UPSERT=91;
	public static readonly TRIGGER_EVENT=92;
	public static readonly GLOBAL=93;
	public static readonly SYSTEM_RUNAS=94;
	public static readonly TRIGGER_KEYWORD=95;
	public static readonly TRIGGER_ON_KEYWORD=96;
	public static readonly TESTMETHOD=97;
	public static readonly WEBSERVICE=98;
	public static readonly WITHOUT_SHARING=99;
	public static readonly WITH_SHARING=100;
	public static readonly GET_EMPTY=101;
	public static readonly GET_OPEN_CURLY=102;
	public static readonly SET_EMPTY=103;
	public static readonly SET_OPEN_CURLY=104;
	public static readonly StringLiteral=105;
	public static readonly SoqlLiteral=106;
	public static readonly SoslLiteral=107;
	public static readonly IntegerLiteral=108;
	public static readonly FloatingPointLiteral=109;
	public static readonly Identifier=110;
	public static readonly RULE_compilationUnit = 0;
	public static readonly RULE_typeDeclaration = 1;
	public static readonly RULE_classOrInterfaceModifier = 2;
	public static readonly RULE_classOrInterfaceVisibilityModifier = 3;
	public static readonly RULE_classSharingModifier = 4;
	public static readonly RULE_classDeclaration = 5;
	public static readonly RULE_className = 6;
	public static readonly RULE_extendsDeclaration = 7;
	public static readonly RULE_implementsDeclaration = 8;
	public static readonly RULE_classBody = 9;
	public static readonly RULE_classBodyMember = 10;
	public static readonly RULE_classConstructor = 11;
	public static readonly RULE_classConstructorModifier = 12;
	public static readonly RULE_interfaceDeclaration = 13;
	public static readonly RULE_interfaceName = 14;
	public static readonly RULE_interfaceBody = 15;
	public static readonly RULE_triggerDeclaration = 16;
	public static readonly RULE_triggerName = 17;
	public static readonly RULE_triggerSObjectType = 18;
	public static readonly RULE_classVariable = 19;
	public static readonly RULE_classVariableModifier = 20;
	public static readonly RULE_variableName = 21;
	public static readonly RULE_classMethod = 22;
	public static readonly RULE_methodParameters = 23;
	public static readonly RULE_methodParameter = 24;
	public static readonly RULE_methodParameterName = 25;
	public static readonly RULE_methodHeader = 26;
	public static readonly RULE_methodHeaderModifier = 27;
	public static readonly RULE_methodName = 28;
	public static readonly RULE_methodBody = 29;
	public static readonly RULE_classProperty = 30;
	public static readonly RULE_propertyModifier = 31;
	public static readonly RULE_propertyName = 32;
	public static readonly RULE_propertyGet = 33;
	public static readonly RULE_propertySet = 34;
	public static readonly RULE_propertyGetSetModifier = 35;
	public static readonly RULE_enumDeclaration = 36;
	public static readonly RULE_enumName = 37;
	public static readonly RULE_enumConstants = 38;
	public static readonly RULE_enumConstant = 39;
	public static readonly RULE_annotation = 40;
	public static readonly RULE_annotationName = 41;
	public static readonly RULE_annotationElementValuePairs = 42;
	public static readonly RULE_annotationElementValuePair = 43;
	public static readonly RULE_annotationElementValue = 44;
	public static readonly RULE_expression = 45;
	public static readonly RULE_primary = 46;
	public static readonly RULE_parExpression = 47;
	public static readonly RULE_expressionList = 48;
	public static readonly RULE_runas_expression = 49;
	public static readonly RULE_db_shortcut_expression = 50;
	public static readonly RULE_creator = 51;
	public static readonly RULE_typeArguments = 52;
	public static readonly RULE_arrayCreatorRest = 53;
	public static readonly RULE_mapCreatorRest = 54;
	public static readonly RULE_setCreatorRest = 55;
	public static readonly RULE_classCreatorRest = 56;
	public static readonly RULE_variableInitializer = 57;
	public static readonly RULE_arrayInitializer = 58;
	public static readonly RULE_arguments = 59;
	public static readonly RULE_codeBlock = 60;
	public static readonly RULE_staticCodeBlock = 61;
	public static readonly RULE_localVariableDeclaration = 62;
	public static readonly RULE_localVariableModifier = 63;
	public static readonly RULE_blockStatement = 64;
	public static readonly RULE_qualifiedName = 65;
	public static readonly RULE_forControl = 66;
	public static readonly RULE_forInit = 67;
	public static readonly RULE_enhancedForControl = 68;
	public static readonly RULE_forUpdate = 69;
	public static readonly RULE_catchClause = 70;
	public static readonly RULE_catchType = 71;
	public static readonly RULE_finallyBlock = 72;
	public static readonly RULE_statement = 73;
	public static readonly RULE_literal = 74;
	public static readonly RULE_dataType = 75;
	public static readonly ruleNames: string[] = [
		"compilationUnit", "typeDeclaration", "classOrInterfaceModifier", "classOrInterfaceVisibilityModifier", 
		"classSharingModifier", "classDeclaration", "className", "extendsDeclaration", 
		"implementsDeclaration", "classBody", "classBodyMember", "classConstructor", 
		"classConstructorModifier", "interfaceDeclaration", "interfaceName", "interfaceBody", 
		"triggerDeclaration", "triggerName", "triggerSObjectType", "classVariable", 
		"classVariableModifier", "variableName", "classMethod", "methodParameters", 
		"methodParameter", "methodParameterName", "methodHeader", "methodHeaderModifier", 
		"methodName", "methodBody", "classProperty", "propertyModifier", "propertyName", 
		"propertyGet", "propertySet", "propertyGetSetModifier", "enumDeclaration", 
		"enumName", "enumConstants", "enumConstant", "annotation", "annotationName", 
		"annotationElementValuePairs", "annotationElementValuePair", "annotationElementValue", 
		"expression", "primary", "parExpression", "expressionList", "runas_expression", 
		"db_shortcut_expression", "creator", "typeArguments", "arrayCreatorRest", 
		"mapCreatorRest", "setCreatorRest", "classCreatorRest", "variableInitializer", 
		"arrayInitializer", "arguments", "codeBlock", "staticCodeBlock", "localVariableDeclaration", 
		"localVariableModifier", "blockStatement", "qualifiedName", "forControl", 
		"forInit", "enhancedForControl", "forUpdate", "catchClause", "catchType", 
		"finallyBlock", "statement", "literal", "dataType"
	];

	private static readonly _LITERAL_NAMES: (string | undefined)[] = [
		undefined, "'(hidden)'", "';'", "'{'", "'}'", "','", "'('", "')'", "'='", 
		"'@'", "'.'", "'['", "']'", "'++'", "'--'", "'+'", "'-'", "'!'", "'*'", 
		"'/'", "'%'", "'<'", "'>'", "'==='", "'=='", "'!='", "'<>'", "'&'", "'^'", 
		"'|'", "'&&'", "'||'", "'?'", "':'", "'+='", "'-='", "'*='", "'/='", "'&='", 
		"'|='", "'^='", "'>>='", "'>>>='", "'<<='", "'=>'"
	];
	private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "APEXDOC_COMMENT", "COMMENT", "LINE_COMMENT", 
		"WS", "BooleanLiteral", "ABSTRACT", "CLASS", "ENUM", "EXTENDS", "FALSE", 
		"FINAL", "NULL", "IMPLEMENTS", "INSTANCE_OF", "INTERFACE", "OVERRIDE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "STATIC", "SUPER", "THIS", "TRANSIENT", 
		"TRUE", "VIRTUAL", "VOID", "NEW", "BREAK", "CONTINUE", "DO", "ELSE", "FOR", 
		"IF", "RETURN", "THROW", "TRY", "CATCH", "FINALLY", "WHILE", "BRACKET_THEN_FIND", 
		"BRACKET_THEN_SELECT", "DB_DELETE", "DB_INSERT", "DB_MERGE", "DB_UNDELETE", 
		"DB_UPDATE", "DB_UPSERT", "TRIGGER_EVENT", "GLOBAL", "SYSTEM_RUNAS", "TRIGGER_KEYWORD", 
		"TRIGGER_ON_KEYWORD", "TESTMETHOD", "WEBSERVICE", "WITHOUT_SHARING", "WITH_SHARING", 
		"GET_EMPTY", "GET_OPEN_CURLY", "SET_EMPTY", "SET_OPEN_CURLY", "StringLiteral", 
		"SoqlLiteral", "SoslLiteral", "IntegerLiteral", "FloatingPointLiteral", 
		"Identifier"
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ApexcodeParser._LITERAL_NAMES, ApexcodeParser._SYMBOLIC_NAMES, []);

	@Override
	@NotNull
	public get vocabulary(): Vocabulary {
		return ApexcodeParser.VOCABULARY;
	}

	@Override
	public get grammarFileName(): string { return "Apexcode.g4"; }

	@Override
	public get ruleNames(): string[] { return ApexcodeParser.ruleNames; }

	@Override
	public get serializedATN(): string { return ApexcodeParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(ApexcodeParser._ATN, this);
	}
	@RuleVersion(0)
	public compilationUnit(): CompilationUnitContext {
		let _localctx: CompilationUnitContext = new CompilationUnitContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, ApexcodeParser.RULE_compilationUnit);
		let _la: number;
		try {
			this.state = 161;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.T__0:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 152;
				this.match(ApexcodeParser.T__0);
				this.state = 153;
				this.match(ApexcodeParser.EOF);
				}
				break;
			case ApexcodeParser.EOF:
			case ApexcodeParser.T__1:
			case ApexcodeParser.T__8:
			case ApexcodeParser.ABSTRACT:
			case ApexcodeParser.CLASS:
			case ApexcodeParser.ENUM:
			case ApexcodeParser.INTERFACE:
			case ApexcodeParser.PRIVATE:
			case ApexcodeParser.PUBLIC:
			case ApexcodeParser.VIRTUAL:
			case ApexcodeParser.GLOBAL:
			case ApexcodeParser.TRIGGER_KEYWORD:
			case ApexcodeParser.WEBSERVICE:
			case ApexcodeParser.WITHOUT_SHARING:
			case ApexcodeParser.WITH_SHARING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 157;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===ApexcodeParser.T__1 || _la===ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.CLASS - 50)) | (1 << (ApexcodeParser.ENUM - 50)) | (1 << (ApexcodeParser.INTERFACE - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.TRIGGER_KEYWORD - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 93)) | (1 << (ApexcodeParser.WITH_SHARING - 93)))) !== 0)) {
					{
					{
					this.state = 154;
					this.typeDeclaration();
					}
					}
					this.state = 159;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 160;
				this.match(ApexcodeParser.EOF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public typeDeclaration(): TypeDeclarationContext {
		let _localctx: TypeDeclarationContext = new TypeDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, ApexcodeParser.RULE_typeDeclaration);
		let _la: number;
		try {
			this.state = 180;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,4,this._ctx) ) {
			case 1:
				_localctx = new TriggerDefContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 163;
				this.triggerDeclaration();
				}
				break;

			case 2:
				_localctx = new ClassDefContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 93)) | (1 << (ApexcodeParser.WITH_SHARING - 93)))) !== 0)) {
					{
					{
					this.state = 164;
					this.classOrInterfaceModifier();
					}
					}
					this.state = 169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 170;
				this.classDeclaration();
				}
				break;

			case 3:
				_localctx = new InterfaceDefContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 174;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 93)) | (1 << (ApexcodeParser.WITH_SHARING - 93)))) !== 0)) {
					{
					{
					this.state = 171;
					this.classOrInterfaceModifier();
					}
					}
					this.state = 176;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 177;
				this.interfaceDeclaration();
				}
				break;

			case 4:
				_localctx = new EnumDefContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 178;
				this.enumDeclaration();
				}
				break;

			case 5:
				_localctx = new EmptyDefContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 179;
				this.match(ApexcodeParser.T__1);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classOrInterfaceModifier(): ClassOrInterfaceModifierContext {
		let _localctx: ClassOrInterfaceModifierContext = new ClassOrInterfaceModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, ApexcodeParser.RULE_classOrInterfaceModifier);
		try {
			this.state = 185;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.T__8:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 182;
				this.annotation();
				}
				break;
			case ApexcodeParser.ABSTRACT:
			case ApexcodeParser.PRIVATE:
			case ApexcodeParser.PUBLIC:
			case ApexcodeParser.VIRTUAL:
			case ApexcodeParser.GLOBAL:
			case ApexcodeParser.WEBSERVICE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 183;
				this.classOrInterfaceVisibilityModifier();
				}
				break;
			case ApexcodeParser.WITHOUT_SHARING:
			case ApexcodeParser.WITH_SHARING:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 184;
				this.classSharingModifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classOrInterfaceVisibilityModifier(): ClassOrInterfaceVisibilityModifierContext {
		let _localctx: ClassOrInterfaceVisibilityModifierContext = new ClassOrInterfaceVisibilityModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, ApexcodeParser.RULE_classOrInterfaceVisibilityModifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 187;
			_la = this._input.LA(1);
			if ( !(((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || _la===ApexcodeParser.GLOBAL || _la===ApexcodeParser.WEBSERVICE) ) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classSharingModifier(): ClassSharingModifierContext {
		let _localctx: ClassSharingModifierContext = new ClassSharingModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, ApexcodeParser.RULE_classSharingModifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 189;
			_la = this._input.LA(1);
			if ( !(_la===ApexcodeParser.WITHOUT_SHARING || _la===ApexcodeParser.WITH_SHARING) ) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classDeclaration(): ClassDeclarationContext {
		let _localctx: ClassDeclarationContext = new ClassDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, ApexcodeParser.RULE_classDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 191;
			this.match(ApexcodeParser.CLASS);
			this.state = 192;
			this.className();
			this.state = 194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.EXTENDS) {
				{
				this.state = 193;
				this.extendsDeclaration();
				}
			}

			this.state = 197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.IMPLEMENTS) {
				{
				this.state = 196;
				this.implementsDeclaration();
				}
			}

			this.state = 199;
			this.match(ApexcodeParser.T__2);
			this.state = 200;
			this.classBody();
			this.state = 201;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public className(): ClassNameContext {
		let _localctx: ClassNameContext = new ClassNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, ApexcodeParser.RULE_className);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 203;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public extendsDeclaration(): ExtendsDeclarationContext {
		let _localctx: ExtendsDeclarationContext = new ExtendsDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, ApexcodeParser.RULE_extendsDeclaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 205;
			this.match(ApexcodeParser.EXTENDS);
			this.state = 206;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public implementsDeclaration(): ImplementsDeclarationContext {
		let _localctx: ImplementsDeclarationContext = new ImplementsDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, ApexcodeParser.RULE_implementsDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 208;
			this.match(ApexcodeParser.IMPLEMENTS);
			this.state = 209;
			this.dataType();
			this.state = 214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 210;
				this.match(ApexcodeParser.T__4);
				this.state = 211;
				this.dataType();
				}
				}
				this.state = 216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classBody(): ClassBodyContext {
		let _localctx: ClassBodyContext = new ClassBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, ApexcodeParser.RULE_classBody);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 222;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__1) | (1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.ABSTRACT - 49)) | (1 << (ApexcodeParser.CLASS - 49)) | (1 << (ApexcodeParser.ENUM - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.INTERFACE - 49)) | (1 << (ApexcodeParser.OVERRIDE - 49)) | (1 << (ApexcodeParser.PRIVATE - 49)) | (1 << (ApexcodeParser.PROTECTED - 49)) | (1 << (ApexcodeParser.PUBLIC - 49)) | (1 << (ApexcodeParser.STATIC - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VIRTUAL - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)) | (1 << (ApexcodeParser.BREAK - 49)) | (1 << (ApexcodeParser.CONTINUE - 49)) | (1 << (ApexcodeParser.DO - 49)) | (1 << (ApexcodeParser.FOR - 49)) | (1 << (ApexcodeParser.IF - 49)) | (1 << (ApexcodeParser.RETURN - 49)) | (1 << (ApexcodeParser.THROW - 49)) | (1 << (ApexcodeParser.TRY - 49)))) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (ApexcodeParser.WHILE - 83)) | (1 << (ApexcodeParser.DB_DELETE - 83)) | (1 << (ApexcodeParser.DB_INSERT - 83)) | (1 << (ApexcodeParser.DB_MERGE - 83)) | (1 << (ApexcodeParser.DB_UNDELETE - 83)) | (1 << (ApexcodeParser.DB_UPDATE - 83)) | (1 << (ApexcodeParser.DB_UPSERT - 83)) | (1 << (ApexcodeParser.GLOBAL - 83)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 83)) | (1 << (ApexcodeParser.TRIGGER_KEYWORD - 83)) | (1 << (ApexcodeParser.TESTMETHOD - 83)) | (1 << (ApexcodeParser.WEBSERVICE - 83)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 83)) | (1 << (ApexcodeParser.WITH_SHARING - 83)) | (1 << (ApexcodeParser.StringLiteral - 83)) | (1 << (ApexcodeParser.SoqlLiteral - 83)) | (1 << (ApexcodeParser.SoslLiteral - 83)) | (1 << (ApexcodeParser.IntegerLiteral - 83)) | (1 << (ApexcodeParser.FloatingPointLiteral - 83)) | (1 << (ApexcodeParser.Identifier - 83)))) !== 0)) {
				{
				this.state = 220;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,9,this._ctx) ) {
				case 1:
					{
					this.state = 217;
					this.staticCodeBlock();
					}
					break;

				case 2:
					{
					this.state = 218;
					this.classBodyMember();
					}
					break;

				case 3:
					{
					this.state = 219;
					this.blockStatement();
					}
					break;
				}
				}
				this.state = 224;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classBodyMember(): ClassBodyMemberContext {
		let _localctx: ClassBodyMemberContext = new ClassBodyMemberContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, ApexcodeParser.RULE_classBodyMember);
		try {
			this.state = 231;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,11,this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 225;
				this.enumDeclaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 226;
				this.classConstructor();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 227;
				this.classMethod();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 228;
				this.classVariable();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 229;
				this.classProperty();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 230;
				this.typeDeclaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classConstructor(): ClassConstructorContext {
		let _localctx: ClassConstructorContext = new ClassConstructorContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, ApexcodeParser.RULE_classConstructor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 237;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__8 || ((((_la - 60)) & ~0x1F) === 0 && ((1 << (_la - 60)) & ((1 << (ApexcodeParser.OVERRIDE - 60)) | (1 << (ApexcodeParser.PRIVATE - 60)) | (1 << (ApexcodeParser.PROTECTED - 60)) | (1 << (ApexcodeParser.PUBLIC - 60)) | (1 << (ApexcodeParser.VIRTUAL - 60)))) !== 0) || _la===ApexcodeParser.GLOBAL) {
				{
				this.state = 235;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case ApexcodeParser.T__8:
					{
					this.state = 233;
					this.annotation();
					}
					break;
				case ApexcodeParser.OVERRIDE:
				case ApexcodeParser.PRIVATE:
				case ApexcodeParser.PROTECTED:
				case ApexcodeParser.PUBLIC:
				case ApexcodeParser.VIRTUAL:
				case ApexcodeParser.GLOBAL:
					{
					this.state = 234;
					this.classConstructorModifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 240;
			this.qualifiedName();
			this.state = 241;
			this.match(ApexcodeParser.T__5);
			this.state = 243;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.FINAL || _la===ApexcodeParser.VOID || _la===ApexcodeParser.Identifier) {
				{
				this.state = 242;
				this.methodParameters();
				}
			}

			this.state = 245;
			this.match(ApexcodeParser.T__6);
			this.state = 246;
			this.methodBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classConstructorModifier(): ClassConstructorModifierContext {
		let _localctx: ClassConstructorModifierContext = new ClassConstructorModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, ApexcodeParser.RULE_classConstructorModifier);
		let _la: number;
		try {
			this.state = 251;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.PRIVATE:
			case ApexcodeParser.PROTECTED:
			case ApexcodeParser.PUBLIC:
			case ApexcodeParser.GLOBAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 248;
				_la = this._input.LA(1);
				if ( !(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la===ApexcodeParser.GLOBAL) ) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case ApexcodeParser.OVERRIDE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 249;
				this.match(ApexcodeParser.OVERRIDE);
				}
				break;
			case ApexcodeParser.VIRTUAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 250;
				this.match(ApexcodeParser.VIRTUAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public interfaceDeclaration(): InterfaceDeclarationContext {
		let _localctx: InterfaceDeclarationContext = new InterfaceDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, ApexcodeParser.RULE_interfaceDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 253;
			this.match(ApexcodeParser.INTERFACE);
			this.state = 254;
			this.interfaceName();
			this.state = 256;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.EXTENDS) {
				{
				this.state = 255;
				this.extendsDeclaration();
				}
			}

			this.state = 258;
			this.match(ApexcodeParser.T__2);
			this.state = 259;
			this.interfaceBody();
			this.state = 260;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public interfaceName(): InterfaceNameContext {
		let _localctx: InterfaceNameContext = new InterfaceNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, ApexcodeParser.RULE_interfaceName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 262;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public interfaceBody(): InterfaceBodyContext {
		let _localctx: InterfaceBodyContext = new InterfaceBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, ApexcodeParser.RULE_interfaceBody);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.OVERRIDE - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PROTECTED - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.STATIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)) | (1 << (ApexcodeParser.VOID - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.TESTMETHOD - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.Identifier - 93)))) !== 0)) {
				{
				{
				this.state = 264;
				this.methodHeader();
				this.state = 265;
				this.match(ApexcodeParser.T__1);
				}
				}
				this.state = 271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public triggerDeclaration(): TriggerDeclarationContext {
		let _localctx: TriggerDeclarationContext = new TriggerDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, ApexcodeParser.RULE_triggerDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 272;
			this.match(ApexcodeParser.TRIGGER_KEYWORD);
			this.state = 273;
			this.triggerName();
			this.state = 274;
			this.match(ApexcodeParser.TRIGGER_ON_KEYWORD);
			this.state = 275;
			this.triggerSObjectType();
			this.state = 276;
			this.match(ApexcodeParser.T__5);
			this.state = 277;
			this.match(ApexcodeParser.TRIGGER_EVENT);
			this.state = 282;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 278;
				this.match(ApexcodeParser.T__4);
				this.state = 279;
				this.match(ApexcodeParser.TRIGGER_EVENT);
				}
				}
				this.state = 284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 285;
			this.match(ApexcodeParser.T__6);
			this.state = 286;
			this.match(ApexcodeParser.T__2);
			this.state = 287;
			this.classBody();
			this.state = 288;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public triggerName(): TriggerNameContext {
		let _localctx: TriggerNameContext = new TriggerNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, ApexcodeParser.RULE_triggerName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 290;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public triggerSObjectType(): TriggerSObjectTypeContext {
		let _localctx: TriggerSObjectTypeContext = new TriggerSObjectTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, ApexcodeParser.RULE_triggerSObjectType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 292;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classVariable(): ClassVariableContext {
		let _localctx: ClassVariableContext = new ClassVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, ApexcodeParser.RULE_classVariable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 298;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__8 || ((((_la - 55)) & ~0x1F) === 0 && ((1 << (_la - 55)) & ((1 << (ApexcodeParser.FINAL - 55)) | (1 << (ApexcodeParser.PRIVATE - 55)) | (1 << (ApexcodeParser.PROTECTED - 55)) | (1 << (ApexcodeParser.PUBLIC - 55)) | (1 << (ApexcodeParser.STATIC - 55)) | (1 << (ApexcodeParser.TRANSIENT - 55)))) !== 0) || _la===ApexcodeParser.GLOBAL || _la===ApexcodeParser.WEBSERVICE) {
				{
				this.state = 296;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case ApexcodeParser.T__8:
					{
					this.state = 294;
					this.annotation();
					}
					break;
				case ApexcodeParser.FINAL:
				case ApexcodeParser.PRIVATE:
				case ApexcodeParser.PROTECTED:
				case ApexcodeParser.PUBLIC:
				case ApexcodeParser.STATIC:
				case ApexcodeParser.TRANSIENT:
				case ApexcodeParser.GLOBAL:
				case ApexcodeParser.WEBSERVICE:
					{
					this.state = 295;
					this.classVariableModifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 300;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 301;
			this.dataType();
			this.state = 302;
			this.variableName();
			this.state = 305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.T__7) {
				{
				this.state = 303;
				this.match(ApexcodeParser.T__7);
				this.state = 304;
				this.expression(0);
				}
			}

			this.state = 315;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 307;
				this.match(ApexcodeParser.T__4);
				this.state = 308;
				this.variableName();
				this.state = 311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===ApexcodeParser.T__7) {
					{
					this.state = 309;
					this.match(ApexcodeParser.T__7);
					this.state = 310;
					this.expression(0);
					}
				}

				}
				}
				this.state = 317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 318;
			this.match(ApexcodeParser.T__1);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classVariableModifier(): ClassVariableModifierContext {
		let _localctx: ClassVariableModifierContext = new ClassVariableModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, ApexcodeParser.RULE_classVariableModifier);
		let _la: number;
		try {
			this.state = 325;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.PRIVATE:
			case ApexcodeParser.PROTECTED:
			case ApexcodeParser.PUBLIC:
			case ApexcodeParser.GLOBAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 320;
				_la = this._input.LA(1);
				if ( !(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la===ApexcodeParser.GLOBAL) ) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case ApexcodeParser.FINAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 321;
				this.match(ApexcodeParser.FINAL);
				}
				break;
			case ApexcodeParser.STATIC:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 322;
				this.match(ApexcodeParser.STATIC);
				}
				break;
			case ApexcodeParser.TRANSIENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 323;
				this.match(ApexcodeParser.TRANSIENT);
				}
				break;
			case ApexcodeParser.WEBSERVICE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 324;
				this.match(ApexcodeParser.WEBSERVICE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public variableName(): VariableNameContext {
		let _localctx: VariableNameContext = new VariableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, ApexcodeParser.RULE_variableName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 327;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classMethod(): ClassMethodContext {
		let _localctx: ClassMethodContext = new ClassMethodContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, ApexcodeParser.RULE_classMethod);
		try {
			this.state = 335;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,25,this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 329;
				this.methodHeader();
				this.state = 330;
				this.methodBody();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 332;
				this.methodHeader();
				this.state = 333;
				this.match(ApexcodeParser.T__1);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public methodParameters(): MethodParametersContext {
		let _localctx: MethodParametersContext = new MethodParametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, ApexcodeParser.RULE_methodParameters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 337;
			this.methodParameter();
			this.state = 342;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 338;
				this.match(ApexcodeParser.T__4);
				this.state = 339;
				this.methodParameter();
				}
				}
				this.state = 344;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public methodParameter(): MethodParameterContext {
		let _localctx: MethodParameterContext = new MethodParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, ApexcodeParser.RULE_methodParameter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.FINAL) {
				{
				this.state = 345;
				this.match(ApexcodeParser.FINAL);
				}
			}

			this.state = 348;
			this.dataType();
			this.state = 349;
			this.methodParameterName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public methodParameterName(): MethodParameterNameContext {
		let _localctx: MethodParameterNameContext = new MethodParameterNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, ApexcodeParser.RULE_methodParameterName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 351;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public methodHeader(): MethodHeaderContext {
		let _localctx: MethodHeaderContext = new MethodHeaderContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, ApexcodeParser.RULE_methodHeader);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 357;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.OVERRIDE - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PROTECTED - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.STATIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.TESTMETHOD - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)))) !== 0)) {
				{
				this.state = 355;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case ApexcodeParser.T__8:
					{
					this.state = 353;
					this.annotation();
					}
					break;
				case ApexcodeParser.ABSTRACT:
				case ApexcodeParser.OVERRIDE:
				case ApexcodeParser.PRIVATE:
				case ApexcodeParser.PROTECTED:
				case ApexcodeParser.PUBLIC:
				case ApexcodeParser.STATIC:
				case ApexcodeParser.VIRTUAL:
				case ApexcodeParser.GLOBAL:
				case ApexcodeParser.TESTMETHOD:
				case ApexcodeParser.WEBSERVICE:
					{
					this.state = 354;
					this.methodHeaderModifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 359;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 360;
			this.dataType();
			this.state = 361;
			this.methodName();
			this.state = 362;
			this.match(ApexcodeParser.T__5);
			this.state = 364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.FINAL || _la===ApexcodeParser.VOID || _la===ApexcodeParser.Identifier) {
				{
				this.state = 363;
				this.methodParameters();
				}
			}

			this.state = 366;
			this.match(ApexcodeParser.T__6);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public methodHeaderModifier(): MethodHeaderModifierContext {
		let _localctx: MethodHeaderModifierContext = new MethodHeaderModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, ApexcodeParser.RULE_methodHeaderModifier);
		let _la: number;
		try {
			this.state = 375;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.PRIVATE:
			case ApexcodeParser.PROTECTED:
			case ApexcodeParser.PUBLIC:
			case ApexcodeParser.GLOBAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 368;
				_la = this._input.LA(1);
				if ( !(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la===ApexcodeParser.GLOBAL) ) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case ApexcodeParser.OVERRIDE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 369;
				this.match(ApexcodeParser.OVERRIDE);
				}
				break;
			case ApexcodeParser.ABSTRACT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 370;
				this.match(ApexcodeParser.ABSTRACT);
				}
				break;
			case ApexcodeParser.VIRTUAL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 371;
				this.match(ApexcodeParser.VIRTUAL);
				}
				break;
			case ApexcodeParser.STATIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 372;
				this.match(ApexcodeParser.STATIC);
				}
				break;
			case ApexcodeParser.TESTMETHOD:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 373;
				this.match(ApexcodeParser.TESTMETHOD);
				}
				break;
			case ApexcodeParser.WEBSERVICE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 374;
				this.match(ApexcodeParser.WEBSERVICE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public methodName(): MethodNameContext {
		let _localctx: MethodNameContext = new MethodNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, ApexcodeParser.RULE_methodName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 377;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public methodBody(): MethodBodyContext {
		let _localctx: MethodBodyContext = new MethodBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, ApexcodeParser.RULE_methodBody);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 379;
			this.codeBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classProperty(): ClassPropertyContext {
		let _localctx: ClassPropertyContext = new ClassPropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, ApexcodeParser.RULE_classProperty);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__8 || ((((_la - 55)) & ~0x1F) === 0 && ((1 << (_la - 55)) & ((1 << (ApexcodeParser.FINAL - 55)) | (1 << (ApexcodeParser.PRIVATE - 55)) | (1 << (ApexcodeParser.PROTECTED - 55)) | (1 << (ApexcodeParser.PUBLIC - 55)) | (1 << (ApexcodeParser.STATIC - 55)) | (1 << (ApexcodeParser.TRANSIENT - 55)))) !== 0) || _la===ApexcodeParser.GLOBAL) {
				{
				this.state = 383;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case ApexcodeParser.T__8:
					{
					this.state = 381;
					this.annotation();
					}
					break;
				case ApexcodeParser.FINAL:
				case ApexcodeParser.PRIVATE:
				case ApexcodeParser.PROTECTED:
				case ApexcodeParser.PUBLIC:
				case ApexcodeParser.STATIC:
				case ApexcodeParser.TRANSIENT:
				case ApexcodeParser.GLOBAL:
					{
					this.state = 382;
					this.propertyModifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 388;
			this.dataType();
			this.state = 389;
			this.propertyName();
			this.state = 390;
			this.match(ApexcodeParser.T__2);
			this.state = 393; 
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 393;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,34,this._ctx) ) {
				case 1:
					{
					this.state = 391;
					this.propertyGet();
					}
					break;

				case 2:
					{
					this.state = 392;
					this.propertySet();
					}
					break;
				}
				}
				this.state = 395; 
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ( ((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)) | (1 << (ApexcodeParser.STATIC - 61)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.GET_EMPTY - 93)) | (1 << (ApexcodeParser.GET_OPEN_CURLY - 93)) | (1 << (ApexcodeParser.SET_EMPTY - 93)) | (1 << (ApexcodeParser.SET_OPEN_CURLY - 93)))) !== 0) );
			this.state = 397;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public propertyModifier(): PropertyModifierContext {
		let _localctx: PropertyModifierContext = new PropertyModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, ApexcodeParser.RULE_propertyModifier);
		let _la: number;
		try {
			this.state = 403;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.PRIVATE:
			case ApexcodeParser.PROTECTED:
			case ApexcodeParser.PUBLIC:
			case ApexcodeParser.GLOBAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 399;
				_la = this._input.LA(1);
				if ( !(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la===ApexcodeParser.GLOBAL) ) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case ApexcodeParser.FINAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 400;
				this.match(ApexcodeParser.FINAL);
				}
				break;
			case ApexcodeParser.STATIC:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 401;
				this.match(ApexcodeParser.STATIC);
				}
				break;
			case ApexcodeParser.TRANSIENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 402;
				this.match(ApexcodeParser.TRANSIENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public propertyName(): PropertyNameContext {
		let _localctx: PropertyNameContext = new PropertyNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, ApexcodeParser.RULE_propertyName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 405;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public propertyGet(): PropertyGetContext {
		let _localctx: PropertyGetContext = new PropertyGetContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, ApexcodeParser.RULE_propertyGet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 410;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)) | (1 << (ApexcodeParser.STATIC - 61)))) !== 0) || _la===ApexcodeParser.GLOBAL) {
				{
				{
				this.state = 407;
				this.propertyGetSetModifier();
				}
				}
				this.state = 412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 422;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.GET_EMPTY:
				{
				this.state = 413;
				this.match(ApexcodeParser.GET_EMPTY);
				}
				break;
			case ApexcodeParser.GET_OPEN_CURLY:
				{
				this.state = 414;
				this.match(ApexcodeParser.GET_OPEN_CURLY);
				this.state = 418;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__1) | (1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)) | (1 << (ApexcodeParser.BREAK - 49)) | (1 << (ApexcodeParser.CONTINUE - 49)) | (1 << (ApexcodeParser.DO - 49)) | (1 << (ApexcodeParser.FOR - 49)) | (1 << (ApexcodeParser.IF - 49)) | (1 << (ApexcodeParser.RETURN - 49)) | (1 << (ApexcodeParser.THROW - 49)) | (1 << (ApexcodeParser.TRY - 49)))) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (ApexcodeParser.WHILE - 83)) | (1 << (ApexcodeParser.DB_DELETE - 83)) | (1 << (ApexcodeParser.DB_INSERT - 83)) | (1 << (ApexcodeParser.DB_MERGE - 83)) | (1 << (ApexcodeParser.DB_UNDELETE - 83)) | (1 << (ApexcodeParser.DB_UPDATE - 83)) | (1 << (ApexcodeParser.DB_UPSERT - 83)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 83)) | (1 << (ApexcodeParser.StringLiteral - 83)) | (1 << (ApexcodeParser.SoqlLiteral - 83)) | (1 << (ApexcodeParser.SoslLiteral - 83)) | (1 << (ApexcodeParser.IntegerLiteral - 83)) | (1 << (ApexcodeParser.FloatingPointLiteral - 83)) | (1 << (ApexcodeParser.Identifier - 83)))) !== 0)) {
					{
					{
					this.state = 415;
					this.blockStatement();
					}
					}
					this.state = 420;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 421;
				this.match(ApexcodeParser.T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public propertySet(): PropertySetContext {
		let _localctx: PropertySetContext = new PropertySetContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, ApexcodeParser.RULE_propertySet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 427;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)) | (1 << (ApexcodeParser.STATIC - 61)))) !== 0) || _la===ApexcodeParser.GLOBAL) {
				{
				{
				this.state = 424;
				this.propertyGetSetModifier();
				}
				}
				this.state = 429;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 439;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.SET_EMPTY:
				{
				this.state = 430;
				this.match(ApexcodeParser.SET_EMPTY);
				}
				break;
			case ApexcodeParser.SET_OPEN_CURLY:
				{
				this.state = 431;
				this.match(ApexcodeParser.SET_OPEN_CURLY);
				this.state = 435;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__1) | (1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)) | (1 << (ApexcodeParser.BREAK - 49)) | (1 << (ApexcodeParser.CONTINUE - 49)) | (1 << (ApexcodeParser.DO - 49)) | (1 << (ApexcodeParser.FOR - 49)) | (1 << (ApexcodeParser.IF - 49)) | (1 << (ApexcodeParser.RETURN - 49)) | (1 << (ApexcodeParser.THROW - 49)) | (1 << (ApexcodeParser.TRY - 49)))) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (ApexcodeParser.WHILE - 83)) | (1 << (ApexcodeParser.DB_DELETE - 83)) | (1 << (ApexcodeParser.DB_INSERT - 83)) | (1 << (ApexcodeParser.DB_MERGE - 83)) | (1 << (ApexcodeParser.DB_UNDELETE - 83)) | (1 << (ApexcodeParser.DB_UPDATE - 83)) | (1 << (ApexcodeParser.DB_UPSERT - 83)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 83)) | (1 << (ApexcodeParser.StringLiteral - 83)) | (1 << (ApexcodeParser.SoqlLiteral - 83)) | (1 << (ApexcodeParser.SoslLiteral - 83)) | (1 << (ApexcodeParser.IntegerLiteral - 83)) | (1 << (ApexcodeParser.FloatingPointLiteral - 83)) | (1 << (ApexcodeParser.Identifier - 83)))) !== 0)) {
					{
					{
					this.state = 432;
					this.blockStatement();
					}
					}
					this.state = 437;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 438;
				this.match(ApexcodeParser.T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public propertyGetSetModifier(): PropertyGetSetModifierContext {
		let _localctx: PropertyGetSetModifierContext = new PropertyGetSetModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, ApexcodeParser.RULE_propertyGetSetModifier);
		let _la: number;
		try {
			this.state = 443;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.PRIVATE:
			case ApexcodeParser.PROTECTED:
			case ApexcodeParser.PUBLIC:
			case ApexcodeParser.GLOBAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 441;
				_la = this._input.LA(1);
				if ( !(((((_la - 61)) & ~0x1F) === 0 && ((1 << (_la - 61)) & ((1 << (ApexcodeParser.PRIVATE - 61)) | (1 << (ApexcodeParser.PROTECTED - 61)) | (1 << (ApexcodeParser.PUBLIC - 61)))) !== 0) || _la===ApexcodeParser.GLOBAL) ) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case ApexcodeParser.STATIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 442;
				this.match(ApexcodeParser.STATIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public enumDeclaration(): EnumDeclarationContext {
		let _localctx: EnumDeclarationContext = new EnumDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, ApexcodeParser.RULE_enumDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__8 || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (ApexcodeParser.ABSTRACT - 50)) | (1 << (ApexcodeParser.PRIVATE - 50)) | (1 << (ApexcodeParser.PUBLIC - 50)) | (1 << (ApexcodeParser.VIRTUAL - 50)))) !== 0) || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.GLOBAL - 93)) | (1 << (ApexcodeParser.WEBSERVICE - 93)) | (1 << (ApexcodeParser.WITHOUT_SHARING - 93)) | (1 << (ApexcodeParser.WITH_SHARING - 93)))) !== 0)) {
				{
				{
				this.state = 445;
				this.classOrInterfaceModifier();
				}
				}
				this.state = 450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 451;
			this.match(ApexcodeParser.ENUM);
			this.state = 452;
			this.enumName();
			this.state = 453;
			this.match(ApexcodeParser.T__2);
			this.state = 455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.Identifier) {
				{
				this.state = 454;
				this.enumConstants();
				}
			}

			this.state = 457;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public enumName(): EnumNameContext {
		let _localctx: EnumNameContext = new EnumNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, ApexcodeParser.RULE_enumName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 459;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public enumConstants(): EnumConstantsContext {
		let _localctx: EnumConstantsContext = new EnumConstantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, ApexcodeParser.RULE_enumConstants);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 461;
			this.enumConstant();
			this.state = 466;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 462;
				this.match(ApexcodeParser.T__4);
				this.state = 463;
				this.enumConstant();
				}
				}
				this.state = 468;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public enumConstant(): EnumConstantContext {
		let _localctx: EnumConstantContext = new EnumConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, ApexcodeParser.RULE_enumConstant);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 469;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public annotation(): AnnotationContext {
		let _localctx: AnnotationContext = new AnnotationContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, ApexcodeParser.RULE_annotation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 471;
			this.match(ApexcodeParser.T__8);
			this.state = 472;
			this.annotationName();
			this.state = 479;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.T__5) {
				{
				this.state = 473;
				this.match(ApexcodeParser.T__5);
				this.state = 476;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,47,this._ctx) ) {
				case 1:
					{
					this.state = 474;
					this.annotationElementValuePairs();
					}
					break;

				case 2:
					{
					this.state = 475;
					this.annotationElementValue();
					}
					break;
				}
				this.state = 478;
				this.match(ApexcodeParser.T__6);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public annotationName(): AnnotationNameContext {
		let _localctx: AnnotationNameContext = new AnnotationNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, ApexcodeParser.RULE_annotationName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 481;
			this.match(ApexcodeParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public annotationElementValuePairs(): AnnotationElementValuePairsContext {
		let _localctx: AnnotationElementValuePairsContext = new AnnotationElementValuePairsContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, ApexcodeParser.RULE_annotationElementValuePairs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 483;
			this.annotationElementValuePair();
			this.state = 487;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.Identifier) {
				{
				{
				this.state = 484;
				this.annotationElementValuePair();
				}
				}
				this.state = 489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public annotationElementValuePair(): AnnotationElementValuePairContext {
		let _localctx: AnnotationElementValuePairContext = new AnnotationElementValuePairContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, ApexcodeParser.RULE_annotationElementValuePair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 490;
			this.match(ApexcodeParser.Identifier);
			this.state = 491;
			this.match(ApexcodeParser.T__7);
			this.state = 492;
			this.annotationElementValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public annotationElementValue(): AnnotationElementValueContext {
		let _localctx: AnnotationElementValueContext = new AnnotationElementValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, ApexcodeParser.RULE_annotationElementValue);
		try {
			this.state = 496;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.T__5:
			case ApexcodeParser.T__12:
			case ApexcodeParser.T__13:
			case ApexcodeParser.T__14:
			case ApexcodeParser.T__15:
			case ApexcodeParser.T__16:
			case ApexcodeParser.BooleanLiteral:
			case ApexcodeParser.NULL:
			case ApexcodeParser.SUPER:
			case ApexcodeParser.THIS:
			case ApexcodeParser.VOID:
			case ApexcodeParser.NEW:
			case ApexcodeParser.StringLiteral:
			case ApexcodeParser.SoqlLiteral:
			case ApexcodeParser.SoslLiteral:
			case ApexcodeParser.IntegerLiteral:
			case ApexcodeParser.FloatingPointLiteral:
			case ApexcodeParser.Identifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 494;
				this.expression(0);
				}
				break;
			case ApexcodeParser.T__8:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 495;
				this.annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	@RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
		let _prevctx: ExpressionContext = _localctx;
		let _startState: number = 90;
		this.enterRecursionRule(_localctx, 90, ApexcodeParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 518;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,51,this._ctx) ) {
			case 1:
				{
				_localctx = new PrimaryExprContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 499;
				this.primary();
				}
				break;

			case 2:
				{
				_localctx = new CreatorExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 500;
				this.match(ApexcodeParser.NEW);
				this.state = 501;
				this.creator();
				}
				break;

			case 3:
				{
				_localctx = new TypeCastComplexExprContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 502;
				this.match(ApexcodeParser.T__5);
				this.state = 503;
				this.typeArguments();
				this.state = 504;
				this.match(ApexcodeParser.T__6);
				this.state = 505;
				this.expression(19);
				}
				break;

			case 4:
				{
				_localctx = new PreIncrementExprContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 507;
				(_localctx as PreIncrementExprContext)._op = this._input.LT(1);
				_la = this._input.LA(1);
				if ( !(_la===ApexcodeParser.T__12 || _la===ApexcodeParser.T__13) ) {
					(_localctx as PreIncrementExprContext)._op = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 508;
				this.expression(17);
				}
				break;

			case 5:
				{
				_localctx = new UnaryExprContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 509;
				(_localctx as UnaryExprContext)._op = this._input.LT(1);
				_la = this._input.LA(1);
				if ( !(_la===ApexcodeParser.T__14 || _la===ApexcodeParser.T__15) ) {
					(_localctx as UnaryExprContext)._op = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 510;
				this.expression(16);
				}
				break;

			case 6:
				{
				_localctx = new UnaryInequalityExprContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 511;
				(_localctx as UnaryInequalityExprContext)._op = this.match(ApexcodeParser.T__16);
				this.state = 512;
				this.expression(15);
				}
				break;

			case 7:
				{
				_localctx = new TypeCastSimpleExprContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 513;
				this.match(ApexcodeParser.T__5);
				this.state = 514;
				this.dataType();
				this.state = 515;
				this.match(ApexcodeParser.T__6);
				this.state = 516;
				this.expression(2);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 601;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input,58,this._ctx);
			while ( _alt!==2 && _alt!==ATN.INVALID_ALT_NUMBER ) {
				if ( _alt===1 ) {
					if ( this._parseListeners!=null ) this.triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					this.state = 599;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input,57,this._ctx) ) {
					case 1:
						{
						_localctx = new ExprDotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 520;
						if (!(this.precpred(this._ctx, 23))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 23)");
						this.state = 521;
						this.match(ApexcodeParser.T__9);
						this.state = 522;
						this.expression(24);
						}
						break;

					case 2:
						{
						_localctx = new InfixMulExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 523;
						if (!(this.precpred(this._ctx, 14))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 14)");
						this.state = 524;
						(_localctx as InfixMulExprContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if ( !((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__18) | (1 << ApexcodeParser.T__19))) !== 0)) ) {
							(_localctx as InfixMulExprContext)._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 525;
						this.expression(15);
						}
						break;

					case 3:
						{
						_localctx = new InfixAddExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 526;
						if (!(this.precpred(this._ctx, 13))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 13)");
						this.state = 527;
						_la = this._input.LA(1);
						if ( !(_la===ApexcodeParser.T__14 || _la===ApexcodeParser.T__15) ) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 528;
						this.expression(14);
						}
						break;

					case 4:
						{
						_localctx = new InfixShiftExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 529;
						if (!(this.precpred(this._ctx, 12))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 12)");
						this.state = 537;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input,52,this._ctx) ) {
						case 1:
							{
							this.state = 530;
							this.match(ApexcodeParser.T__20);
							this.state = 531;
							this.match(ApexcodeParser.T__20);
							}
							break;

						case 2:
							{
							this.state = 532;
							this.match(ApexcodeParser.T__21);
							this.state = 533;
							this.match(ApexcodeParser.T__21);
							this.state = 534;
							this.match(ApexcodeParser.T__21);
							}
							break;

						case 3:
							{
							this.state = 535;
							this.match(ApexcodeParser.T__21);
							this.state = 536;
							this.match(ApexcodeParser.T__21);
							}
							break;
						}
						this.state = 539;
						this.expression(13);
						}
						break;

					case 5:
						{
						_localctx = new ComparisonExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 540;
						if (!(this.precpred(this._ctx, 11))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 11)");
						this.state = 553;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input,55,this._ctx) ) {
						case 1:
							{
							this.state = 541;
							this.match(ApexcodeParser.T__20);
							this.state = 543;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la===ApexcodeParser.WS) {
								{
								this.state = 542;
								this.match(ApexcodeParser.WS);
								}
							}

							this.state = 545;
							this.match(ApexcodeParser.T__7);
							}
							break;

						case 2:
							{
							this.state = 546;
							this.match(ApexcodeParser.T__21);
							this.state = 548;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la===ApexcodeParser.WS) {
								{
								this.state = 547;
								this.match(ApexcodeParser.WS);
								}
							}

							this.state = 550;
							this.match(ApexcodeParser.T__7);
							}
							break;

						case 3:
							{
							this.state = 551;
							this.match(ApexcodeParser.T__21);
							}
							break;

						case 4:
							{
							this.state = 552;
							this.match(ApexcodeParser.T__20);
							}
							break;
						}
						this.state = 555;
						this.expression(12);
						}
						break;

					case 6:
						{
						_localctx = new InfixEqualityExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 556;
						if (!(this.precpred(this._ctx, 9))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 9)");
						this.state = 557;
						_la = this._input.LA(1);
						if ( !((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__22) | (1 << ApexcodeParser.T__23) | (1 << ApexcodeParser.T__24) | (1 << ApexcodeParser.T__25))) !== 0)) ) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 558;
						this.expression(10);
						}
						break;

					case 7:
						{
						_localctx = new BitwiseAndExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 559;
						if (!(this.precpred(this._ctx, 8))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 8)");
						this.state = 560;
						this.match(ApexcodeParser.T__26);
						this.state = 561;
						this.expression(9);
						}
						break;

					case 8:
						{
						_localctx = new BitwiseXorExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 562;
						if (!(this.precpred(this._ctx, 7))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 7)");
						this.state = 563;
						this.match(ApexcodeParser.T__27);
						this.state = 564;
						this.expression(8);
						}
						break;

					case 9:
						{
						_localctx = new BitwiseOrExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 565;
						if (!(this.precpred(this._ctx, 6))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
						this.state = 566;
						this.match(ApexcodeParser.T__28);
						this.state = 567;
						this.expression(7);
						}
						break;

					case 10:
						{
						_localctx = new InfixAndExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 568;
						if (!(this.precpred(this._ctx, 5))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 5)");
						this.state = 569;
						this.match(ApexcodeParser.T__29);
						this.state = 570;
						this.expression(6);
						}
						break;

					case 11:
						{
						_localctx = new InfixOrExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 571;
						if (!(this.precpred(this._ctx, 4))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
						this.state = 572;
						this.match(ApexcodeParser.T__30);
						this.state = 573;
						this.expression(5);
						}
						break;

					case 12:
						{
						_localctx = new TernaryExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 574;
						if (!(this.precpred(this._ctx, 3))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						this.state = 575;
						this.match(ApexcodeParser.T__31);
						this.state = 576;
						this.expression(0);
						this.state = 577;
						this.match(ApexcodeParser.T__32);
						this.state = 578;
						this.expression(4);
						}
						break;

					case 13:
						{
						_localctx = new AssignmentExprContext(new ExpressionContext(_parentctx, _parentState));
						(_localctx as AssignmentExprContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 580;
						if (!(this.precpred(this._ctx, 1))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
						this.state = 581;
						(_localctx as AssignmentExprContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if ( !(_la===ApexcodeParser.T__7 || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (ApexcodeParser.T__33 - 34)) | (1 << (ApexcodeParser.T__34 - 34)) | (1 << (ApexcodeParser.T__35 - 34)) | (1 << (ApexcodeParser.T__36 - 34)) | (1 << (ApexcodeParser.T__37 - 34)) | (1 << (ApexcodeParser.T__38 - 34)) | (1 << (ApexcodeParser.T__39 - 34)) | (1 << (ApexcodeParser.T__40 - 34)) | (1 << (ApexcodeParser.T__41 - 34)) | (1 << (ApexcodeParser.T__42 - 34)))) !== 0)) ) {
							(_localctx as AssignmentExprContext)._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 582;
						(_localctx as AssignmentExprContext)._right = this.expression(1);
						}
						break;

					case 14:
						{
						_localctx = new MethodCallExprContext(new ExpressionContext(_parentctx, _parentState));
						(_localctx as MethodCallExprContext)._func = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 583;
						if (!(this.precpred(this._ctx, 22))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 22)");
						this.state = 584;
						this.match(ApexcodeParser.T__5);
						this.state = 586;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
							{
							this.state = 585;
							this.expressionList();
							}
						}

						this.state = 588;
						this.match(ApexcodeParser.T__6);
						}
						break;

					case 15:
						{
						_localctx = new ArrayIndexExprContext(new ExpressionContext(_parentctx, _parentState));
						(_localctx as ArrayIndexExprContext)._arr = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 589;
						if (!(this.precpred(this._ctx, 21))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 21)");
						this.state = 590;
						this.match(ApexcodeParser.T__10);
						this.state = 591;
						this.expression(0);
						this.state = 592;
						this.match(ApexcodeParser.T__11);
						}
						break;

					case 16:
						{
						_localctx = new PostIncrementExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 594;
						if (!(this.precpred(this._ctx, 18))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 18)");
						this.state = 595;
						(_localctx as PostIncrementExprContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if ( !(_la===ApexcodeParser.T__12 || _la===ApexcodeParser.T__13) ) {
							(_localctx as PostIncrementExprContext)._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;

					case 17:
						{
						_localctx = new InstanceOfExprContext(new ExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, ApexcodeParser.RULE_expression);
						this.state = 596;
						if (!(this.precpred(this._ctx, 10))) throw new FailedPredicateException(this, "this.precpred(this._ctx, 10)");
						this.state = 597;
						this.match(ApexcodeParser.INSTANCE_OF);
						this.state = 598;
						this.dataType();
						}
						break;
					}
					} 
				}
				this.state = 603;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input,58,this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	@RuleVersion(0)
	public primary(): PrimaryContext {
		let _localctx: PrimaryContext = new PrimaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, ApexcodeParser.RULE_primary);
		try {
			this.state = 613;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,59,this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 604;
				this.parExpression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 605;
				this.match(ApexcodeParser.THIS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 606;
				this.match(ApexcodeParser.SUPER);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 607;
				this.literal();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 608;
				this.match(ApexcodeParser.Identifier);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 609;
				this.dataType();
				this.state = 610;
				this.match(ApexcodeParser.T__9);
				this.state = 611;
				this.match(ApexcodeParser.CLASS);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public parExpression(): ParExpressionContext {
		let _localctx: ParExpressionContext = new ParExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, ApexcodeParser.RULE_parExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 615;
			this.match(ApexcodeParser.T__5);
			this.state = 616;
			this.expression(0);
			this.state = 617;
			this.match(ApexcodeParser.T__6);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public expressionList(): ExpressionListContext {
		let _localctx: ExpressionListContext = new ExpressionListContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, ApexcodeParser.RULE_expressionList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 619;
			this.expression(0);
			this.state = 624;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 620;
				this.match(ApexcodeParser.T__4);
				this.state = 621;
				this.expression(0);
				}
				}
				this.state = 626;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public runas_expression(): Runas_expressionContext {
		let _localctx: Runas_expressionContext = new Runas_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, ApexcodeParser.RULE_runas_expression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 627;
			this.match(ApexcodeParser.SYSTEM_RUNAS);
			this.state = 628;
			this.match(ApexcodeParser.T__5);
			this.state = 630;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
				{
				this.state = 629;
				this.expressionList();
				}
			}

			this.state = 632;
			this.match(ApexcodeParser.T__6);
			this.state = 633;
			this.codeBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public db_shortcut_expression(): Db_shortcut_expressionContext {
		let _localctx: Db_shortcut_expressionContext = new Db_shortcut_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, ApexcodeParser.RULE_db_shortcut_expression);
		let _la: number;
		try {
			this.state = 645;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,62,this._ctx) ) {
			case 1:
				_localctx = new DbShortcutMergeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 635;
				this.match(ApexcodeParser.DB_MERGE);
				this.state = 636;
				this.expression(0);
				this.state = 637;
				this.expression(0);
				}
				break;

			case 2:
				_localctx = new DbShortcutTwoOpContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 639;
				this.match(ApexcodeParser.DB_UPSERT);
				this.state = 640;
				this.expression(0);
				this.state = 641;
				this.expression(0);
				}
				break;

			case 3:
				_localctx = new DbShortcutOneOpContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 643;
				_la = this._input.LA(1);
				if ( !(((((_la - 86)) & ~0x1F) === 0 && ((1 << (_la - 86)) & ((1 << (ApexcodeParser.DB_DELETE - 86)) | (1 << (ApexcodeParser.DB_INSERT - 86)) | (1 << (ApexcodeParser.DB_UNDELETE - 86)) | (1 << (ApexcodeParser.DB_UPDATE - 86)) | (1 << (ApexcodeParser.DB_UPSERT - 86)))) !== 0)) ) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 644;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public creator(): CreatorContext {
		let _localctx: CreatorContext = new CreatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, ApexcodeParser.RULE_creator);
		try {
			this.state = 661;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,64,this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 647;
				this.dataType();
				this.state = 648;
				this.match(ApexcodeParser.T__5);
				this.state = 649;
				this.match(ApexcodeParser.T__6);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 651;
				this.dataType();
				this.state = 652;
				this.parExpression();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 654;
				this.dataType();
				this.state = 659;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,63,this._ctx) ) {
				case 1:
					{
					this.state = 655;
					this.classCreatorRest();
					}
					break;

				case 2:
					{
					this.state = 656;
					this.arrayCreatorRest();
					}
					break;

				case 3:
					{
					this.state = 657;
					this.mapCreatorRest();
					}
					break;

				case 4:
					{
					this.state = 658;
					this.setCreatorRest();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public typeArguments(): TypeArgumentsContext {
		let _localctx: TypeArgumentsContext = new TypeArgumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, ApexcodeParser.RULE_typeArguments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 663;
			this.match(ApexcodeParser.T__20);
			this.state = 664;
			this.dataType();
			this.state = 669;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 665;
				this.match(ApexcodeParser.T__4);
				this.state = 666;
				this.dataType();
				}
				}
				this.state = 671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 672;
			this.match(ApexcodeParser.T__21);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public arrayCreatorRest(): ArrayCreatorRestContext {
		let _localctx: ArrayCreatorRestContext = new ArrayCreatorRestContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, ApexcodeParser.RULE_arrayCreatorRest);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 674;
			this.match(ApexcodeParser.T__10);
			this.state = 702;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.T__11:
				{
				this.state = 675;
				this.match(ApexcodeParser.T__11);
				this.state = 680;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===ApexcodeParser.T__10) {
					{
					{
					this.state = 676;
					this.match(ApexcodeParser.T__10);
					this.state = 677;
					this.match(ApexcodeParser.T__11);
					}
					}
					this.state = 682;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 683;
				this.arrayInitializer();
				}
				break;
			case ApexcodeParser.T__5:
			case ApexcodeParser.T__12:
			case ApexcodeParser.T__13:
			case ApexcodeParser.T__14:
			case ApexcodeParser.T__15:
			case ApexcodeParser.T__16:
			case ApexcodeParser.BooleanLiteral:
			case ApexcodeParser.NULL:
			case ApexcodeParser.SUPER:
			case ApexcodeParser.THIS:
			case ApexcodeParser.VOID:
			case ApexcodeParser.NEW:
			case ApexcodeParser.StringLiteral:
			case ApexcodeParser.SoqlLiteral:
			case ApexcodeParser.SoslLiteral:
			case ApexcodeParser.IntegerLiteral:
			case ApexcodeParser.FloatingPointLiteral:
			case ApexcodeParser.Identifier:
				{
				this.state = 684;
				this.expression(0);
				this.state = 685;
				this.match(ApexcodeParser.T__11);
				this.state = 692;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input,67,this._ctx);
				while ( _alt!==2 && _alt!==ATN.INVALID_ALT_NUMBER ) {
					if ( _alt===1 ) {
						{
						{
						this.state = 686;
						this.match(ApexcodeParser.T__10);
						this.state = 687;
						this.expression(0);
						this.state = 688;
						this.match(ApexcodeParser.T__11);
						}
						} 
					}
					this.state = 694;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input,67,this._ctx);
				}
				this.state = 699;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input,68,this._ctx);
				while ( _alt!==2 && _alt!==ATN.INVALID_ALT_NUMBER ) {
					if ( _alt===1 ) {
						{
						{
						this.state = 695;
						this.match(ApexcodeParser.T__10);
						this.state = 696;
						this.match(ApexcodeParser.T__11);
						}
						} 
					}
					this.state = 701;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input,68,this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public mapCreatorRest(): MapCreatorRestContext {
		let _localctx: MapCreatorRestContext = new MapCreatorRestContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, ApexcodeParser.RULE_mapCreatorRest);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 704;
			this.match(ApexcodeParser.T__2);
			this.state = 729;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
				{
				this.state = 707;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,70,this._ctx) ) {
				case 1:
					{
					this.state = 705;
					this.literal();
					}
					break;

				case 2:
					{
					this.state = 706;
					this.expression(0);
					}
					break;
				}
				this.state = 709;
				this.match(ApexcodeParser.T__43);
				this.state = 712;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,71,this._ctx) ) {
				case 1:
					{
					this.state = 710;
					this.literal();
					}
					break;

				case 2:
					{
					this.state = 711;
					this.expression(0);
					}
					break;
				}
				this.state = 726;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===ApexcodeParser.T__4) {
					{
					{
					this.state = 714;
					this.match(ApexcodeParser.T__4);
					this.state = 717;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input,72,this._ctx) ) {
					case 1:
						{
						this.state = 715;
						this.literal();
						}
						break;

					case 2:
						{
						this.state = 716;
						this.expression(0);
						}
						break;
					}
					this.state = 719;
					this.match(ApexcodeParser.T__43);
					this.state = 722;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input,73,this._ctx) ) {
					case 1:
						{
						this.state = 720;
						this.literal();
						}
						break;

					case 2:
						{
						this.state = 721;
						this.expression(0);
						}
						break;
					}
					}
					}
					this.state = 728;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 731;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public setCreatorRest(): SetCreatorRestContext {
		let _localctx: SetCreatorRestContext = new SetCreatorRestContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, ApexcodeParser.RULE_setCreatorRest);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 733;
			this.match(ApexcodeParser.T__2);
			this.state = 736;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,76,this._ctx) ) {
			case 1:
				{
				this.state = 734;
				this.literal();
				}
				break;

			case 2:
				{
				this.state = 735;
				this.expression(0);
				}
				break;
			}
			this.state = 745;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 738;
				this.match(ApexcodeParser.T__4);
				this.state = 741;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,77,this._ctx) ) {
				case 1:
					{
					this.state = 739;
					this.literal();
					}
					break;

				case 2:
					{
					this.state = 740;
					this.expression(0);
					}
					break;
				}
				}
				}
				this.state = 747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 748;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public classCreatorRest(): ClassCreatorRestContext {
		let _localctx: ClassCreatorRestContext = new ClassCreatorRestContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, ApexcodeParser.RULE_classCreatorRest);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 750;
			this.arguments();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public variableInitializer(): VariableInitializerContext {
		let _localctx: VariableInitializerContext = new VariableInitializerContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, ApexcodeParser.RULE_variableInitializer);
		try {
			this.state = 754;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.T__2:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 752;
				this.arrayInitializer();
				}
				break;
			case ApexcodeParser.T__5:
			case ApexcodeParser.T__12:
			case ApexcodeParser.T__13:
			case ApexcodeParser.T__14:
			case ApexcodeParser.T__15:
			case ApexcodeParser.T__16:
			case ApexcodeParser.BooleanLiteral:
			case ApexcodeParser.NULL:
			case ApexcodeParser.SUPER:
			case ApexcodeParser.THIS:
			case ApexcodeParser.VOID:
			case ApexcodeParser.NEW:
			case ApexcodeParser.StringLiteral:
			case ApexcodeParser.SoqlLiteral:
			case ApexcodeParser.SoslLiteral:
			case ApexcodeParser.IntegerLiteral:
			case ApexcodeParser.FloatingPointLiteral:
			case ApexcodeParser.Identifier:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 753;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public arrayInitializer(): ArrayInitializerContext {
		let _localctx: ArrayInitializerContext = new ArrayInitializerContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, ApexcodeParser.RULE_arrayInitializer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 756;
			this.match(ApexcodeParser.T__2);
			this.state = 768;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
				{
				this.state = 757;
				this.variableInitializer();
				this.state = 762;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input,80,this._ctx);
				while ( _alt!==2 && _alt!==ATN.INVALID_ALT_NUMBER ) {
					if ( _alt===1 ) {
						{
						{
						this.state = 758;
						this.match(ApexcodeParser.T__4);
						this.state = 759;
						this.variableInitializer();
						}
						} 
					}
					this.state = 764;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input,80,this._ctx);
				}
				this.state = 766;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===ApexcodeParser.T__4) {
					{
					this.state = 765;
					this.match(ApexcodeParser.T__4);
					}
				}

				}
			}

			this.state = 770;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public arguments(): ArgumentsContext {
		let _localctx: ArgumentsContext = new ArgumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, ApexcodeParser.RULE_arguments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 772;
			this.match(ApexcodeParser.T__5);
			this.state = 774;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
				{
				this.state = 773;
				this.expressionList();
				}
			}

			this.state = 776;
			this.match(ApexcodeParser.T__6);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public codeBlock(): CodeBlockContext {
		let _localctx: CodeBlockContext = new CodeBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, ApexcodeParser.RULE_codeBlock);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 778;
			this.match(ApexcodeParser.T__2);
			this.state = 782;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__1) | (1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)) | (1 << (ApexcodeParser.BREAK - 49)) | (1 << (ApexcodeParser.CONTINUE - 49)) | (1 << (ApexcodeParser.DO - 49)) | (1 << (ApexcodeParser.FOR - 49)) | (1 << (ApexcodeParser.IF - 49)) | (1 << (ApexcodeParser.RETURN - 49)) | (1 << (ApexcodeParser.THROW - 49)) | (1 << (ApexcodeParser.TRY - 49)))) !== 0) || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (ApexcodeParser.WHILE - 83)) | (1 << (ApexcodeParser.DB_DELETE - 83)) | (1 << (ApexcodeParser.DB_INSERT - 83)) | (1 << (ApexcodeParser.DB_MERGE - 83)) | (1 << (ApexcodeParser.DB_UNDELETE - 83)) | (1 << (ApexcodeParser.DB_UPDATE - 83)) | (1 << (ApexcodeParser.DB_UPSERT - 83)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 83)) | (1 << (ApexcodeParser.StringLiteral - 83)) | (1 << (ApexcodeParser.SoqlLiteral - 83)) | (1 << (ApexcodeParser.SoslLiteral - 83)) | (1 << (ApexcodeParser.IntegerLiteral - 83)) | (1 << (ApexcodeParser.FloatingPointLiteral - 83)) | (1 << (ApexcodeParser.Identifier - 83)))) !== 0)) {
				{
				{
				this.state = 779;
				this.blockStatement();
				}
				}
				this.state = 784;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 785;
			this.match(ApexcodeParser.T__3);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public staticCodeBlock(): StaticCodeBlockContext {
		let _localctx: StaticCodeBlockContext = new StaticCodeBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, ApexcodeParser.RULE_staticCodeBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 787;
			this.match(ApexcodeParser.STATIC);
			this.state = 788;
			this.codeBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public localVariableDeclaration(): LocalVariableDeclarationContext {
		let _localctx: LocalVariableDeclarationContext = new LocalVariableDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, ApexcodeParser.RULE_localVariableDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.FINAL || _la===ApexcodeParser.TRANSIENT) {
				{
				{
				this.state = 790;
				this.localVariableModifier();
				}
				}
				this.state = 795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 796;
			this.dataType();
			this.state = 797;
			this.variableName();
			this.state = 800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===ApexcodeParser.T__7) {
				{
				this.state = 798;
				this.match(ApexcodeParser.T__7);
				this.state = 799;
				this.expression(0);
				}
			}

			this.state = 810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__4) {
				{
				{
				this.state = 802;
				this.match(ApexcodeParser.T__4);
				this.state = 803;
				this.variableName();
				this.state = 806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===ApexcodeParser.T__7) {
					{
					this.state = 804;
					this.match(ApexcodeParser.T__7);
					this.state = 805;
					this.expression(0);
					}
				}

				}
				}
				this.state = 812;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public localVariableModifier(): LocalVariableModifierContext {
		let _localctx: LocalVariableModifierContext = new LocalVariableModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, ApexcodeParser.RULE_localVariableModifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 813;
			_la = this._input.LA(1);
			if ( !(_la===ApexcodeParser.FINAL || _la===ApexcodeParser.TRANSIENT) ) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public blockStatement(): BlockStatementContext {
		let _localctx: BlockStatementContext = new BlockStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, ApexcodeParser.RULE_blockStatement);
		try {
			this.state = 819;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,89,this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 815;
				this.localVariableDeclaration();
				this.state = 816;
				this.match(ApexcodeParser.T__1);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 818;
				this.statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public qualifiedName(): QualifiedNameContext {
		let _localctx: QualifiedNameContext = new QualifiedNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, ApexcodeParser.RULE_qualifiedName);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 821;
			this.match(ApexcodeParser.Identifier);
			this.state = 826;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input,90,this._ctx);
			while ( _alt!==2 && _alt!==ATN.INVALID_ALT_NUMBER ) {
				if ( _alt===1 ) {
					{
					{
					this.state = 822;
					this.match(ApexcodeParser.T__9);
					this.state = 823;
					this.match(ApexcodeParser.Identifier);
					}
					} 
				}
				this.state = 828;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input,90,this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public forControl(): ForControlContext {
		let _localctx: ForControlContext = new ForControlContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, ApexcodeParser.RULE_forControl);
		let _la: number;
		try {
			this.state = 841;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,94,this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 829;
				this.enhancedForControl();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 831;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.FINAL - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.TRANSIENT - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
					{
					this.state = 830;
					this.forInit();
					}
				}

				this.state = 833;
				this.match(ApexcodeParser.T__1);
				this.state = 835;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
					{
					this.state = 834;
					this.expression(0);
					}
				}

				this.state = 837;
				this.match(ApexcodeParser.T__1);
				this.state = 839;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
					{
					this.state = 838;
					this.forUpdate();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public forInit(): ForInitContext {
		let _localctx: ForInitContext = new ForInitContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, ApexcodeParser.RULE_forInit);
		try {
			this.state = 845;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,95,this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 843;
				this.localVariableDeclaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 844;
				this.expressionList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public enhancedForControl(): EnhancedForControlContext {
		let _localctx: EnhancedForControlContext = new EnhancedForControlContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, ApexcodeParser.RULE_enhancedForControl);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 847;
			this.dataType();
			this.state = 848;
			this.variableName();
			this.state = 849;
			this.match(ApexcodeParser.T__32);
			this.state = 850;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public forUpdate(): ForUpdateContext {
		let _localctx: ForUpdateContext = new ForUpdateContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, ApexcodeParser.RULE_forUpdate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 852;
			this.expressionList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public catchClause(): CatchClauseContext {
		let _localctx: CatchClauseContext = new CatchClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, ApexcodeParser.RULE_catchClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 854;
			this.match(ApexcodeParser.CATCH);
			this.state = 855;
			this.match(ApexcodeParser.T__5);
			this.state = 856;
			this.catchType();
			this.state = 857;
			this.variableName();
			this.state = 858;
			this.match(ApexcodeParser.T__6);
			this.state = 859;
			this.codeBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public catchType(): CatchTypeContext {
		let _localctx: CatchTypeContext = new CatchTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, ApexcodeParser.RULE_catchType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 861;
			this.qualifiedName();
			this.state = 866;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===ApexcodeParser.T__28) {
				{
				{
				this.state = 862;
				this.match(ApexcodeParser.T__28);
				this.state = 863;
				this.qualifiedName();
				}
				}
				this.state = 868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public finallyBlock(): FinallyBlockContext {
		let _localctx: FinallyBlockContext = new FinallyBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, ApexcodeParser.RULE_finallyBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 869;
			this.match(ApexcodeParser.FINALLY);
			this.state = 870;
			this.codeBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, ApexcodeParser.RULE_statement);
		let _la: number;
		try {
			this.state = 930;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.T__2:
				_localctx = new BlockStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 872;
				this.codeBlock();
				}
				break;
			case ApexcodeParser.BREAK:
				_localctx = new BreakStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 873;
				this.match(ApexcodeParser.BREAK);
				this.state = 874;
				this.match(ApexcodeParser.T__1);
				}
				break;
			case ApexcodeParser.CONTINUE:
				_localctx = new ContinueStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 875;
				this.match(ApexcodeParser.CONTINUE);
				this.state = 876;
				this.match(ApexcodeParser.T__1);
				}
				break;
			case ApexcodeParser.DO:
				_localctx = new DoWhileStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 877;
				this.match(ApexcodeParser.DO);
				this.state = 878;
				this.statement();
				this.state = 879;
				this.match(ApexcodeParser.WHILE);
				this.state = 880;
				this.parExpression();
				this.state = 881;
				this.match(ApexcodeParser.T__1);
				}
				break;
			case ApexcodeParser.FOR:
				_localctx = new ForStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 883;
				this.match(ApexcodeParser.FOR);
				this.state = 884;
				this.match(ApexcodeParser.T__5);
				this.state = 885;
				this.forControl();
				this.state = 886;
				this.match(ApexcodeParser.T__6);
				this.state = 887;
				this.statement();
				}
				break;
			case ApexcodeParser.IF:
				_localctx = new IfElseStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 889;
				this.match(ApexcodeParser.IF);
				this.state = 890;
				this.parExpression();
				this.state = 891;
				this.statement();
				this.state = 894;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,97,this._ctx) ) {
				case 1:
					{
					this.state = 892;
					this.match(ApexcodeParser.ELSE);
					this.state = 893;
					this.statement();
					}
					break;
				}
				}
				break;
			case ApexcodeParser.RETURN:
				_localctx = new ReturnStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 896;
				this.match(ApexcodeParser.RETURN);
				this.state = 898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (ApexcodeParser.BooleanLiteral - 49)) | (1 << (ApexcodeParser.NULL - 49)) | (1 << (ApexcodeParser.SUPER - 49)) | (1 << (ApexcodeParser.THIS - 49)) | (1 << (ApexcodeParser.VOID - 49)) | (1 << (ApexcodeParser.NEW - 49)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (ApexcodeParser.StringLiteral - 105)) | (1 << (ApexcodeParser.SoqlLiteral - 105)) | (1 << (ApexcodeParser.SoslLiteral - 105)) | (1 << (ApexcodeParser.IntegerLiteral - 105)) | (1 << (ApexcodeParser.FloatingPointLiteral - 105)) | (1 << (ApexcodeParser.Identifier - 105)))) !== 0)) {
					{
					this.state = 897;
					this.expression(0);
					}
				}

				this.state = 900;
				this.match(ApexcodeParser.T__1);
				}
				break;
			case ApexcodeParser.THROW:
				_localctx = new ThrowStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 901;
				this.match(ApexcodeParser.THROW);
				this.state = 902;
				this.expression(0);
				this.state = 903;
				this.match(ApexcodeParser.T__1);
				}
				break;
			case ApexcodeParser.TRY:
				_localctx = new TryCatchFinallyStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 905;
				this.match(ApexcodeParser.TRY);
				this.state = 906;
				this.codeBlock();
				this.state = 916;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case ApexcodeParser.CATCH:
					{
					this.state = 908; 
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 907;
						this.catchClause();
						}
						}
						this.state = 910; 
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while ( _la===ApexcodeParser.CATCH );
					this.state = 913;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===ApexcodeParser.FINALLY) {
						{
						this.state = 912;
						this.finallyBlock();
						}
					}

					}
					break;
				case ApexcodeParser.FINALLY:
					{
					this.state = 915;
					this.finallyBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ApexcodeParser.WHILE:
				_localctx = new WhileStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 918;
				this.match(ApexcodeParser.WHILE);
				this.state = 919;
				this.parExpression();
				this.state = 920;
				this.statement();
				}
				break;
			case ApexcodeParser.T__1:
				_localctx = new EmptyStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 922;
				this.match(ApexcodeParser.T__1);
				}
				break;
			case ApexcodeParser.SYSTEM_RUNAS:
				_localctx = new RunAsStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 923;
				this.runas_expression();
				}
				break;
			case ApexcodeParser.DB_DELETE:
			case ApexcodeParser.DB_INSERT:
			case ApexcodeParser.DB_MERGE:
			case ApexcodeParser.DB_UNDELETE:
			case ApexcodeParser.DB_UPDATE:
			case ApexcodeParser.DB_UPSERT:
				_localctx = new DbShortcutStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 924;
				this.db_shortcut_expression();
				this.state = 925;
				this.match(ApexcodeParser.T__1);
				}
				break;
			case ApexcodeParser.T__5:
			case ApexcodeParser.T__12:
			case ApexcodeParser.T__13:
			case ApexcodeParser.T__14:
			case ApexcodeParser.T__15:
			case ApexcodeParser.T__16:
			case ApexcodeParser.BooleanLiteral:
			case ApexcodeParser.NULL:
			case ApexcodeParser.SUPER:
			case ApexcodeParser.THIS:
			case ApexcodeParser.VOID:
			case ApexcodeParser.NEW:
			case ApexcodeParser.StringLiteral:
			case ApexcodeParser.SoqlLiteral:
			case ApexcodeParser.SoslLiteral:
			case ApexcodeParser.IntegerLiteral:
			case ApexcodeParser.FloatingPointLiteral:
			case ApexcodeParser.Identifier:
				_localctx = new ExpressionStmtContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 927;
				this.expression(0);
				this.state = 928;
				this.match(ApexcodeParser.T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public literal(): LiteralContext {
		let _localctx: LiteralContext = new LiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, ApexcodeParser.RULE_literal);
		try {
			this.state = 939;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case ApexcodeParser.IntegerLiteral:
				_localctx = new IntLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 932;
				this.match(ApexcodeParser.IntegerLiteral);
				}
				break;
			case ApexcodeParser.FloatingPointLiteral:
				_localctx = new FpLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 933;
				this.match(ApexcodeParser.FloatingPointLiteral);
				}
				break;
			case ApexcodeParser.StringLiteral:
				_localctx = new StrLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 934;
				this.match(ApexcodeParser.StringLiteral);
				}
				break;
			case ApexcodeParser.BooleanLiteral:
				_localctx = new BoolLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 935;
				this.match(ApexcodeParser.BooleanLiteral);
				}
				break;
			case ApexcodeParser.NULL:
				_localctx = new NullLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 936;
				this.match(ApexcodeParser.NULL);
				}
				break;
			case ApexcodeParser.SoslLiteral:
				_localctx = new SoslLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 937;
				this.match(ApexcodeParser.SoslLiteral);
				}
				break;
			case ApexcodeParser.SoqlLiteral:
				_localctx = new SoqlLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 938;
				this.match(ApexcodeParser.SoqlLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	@RuleVersion(0)
	public dataType(): DataTypeContext {
		let _localctx: DataTypeContext = new DataTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, ApexcodeParser.RULE_dataType);
		try {
			this.state = 950;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input,105,this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 941;
				this.match(ApexcodeParser.VOID);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 942;
				_localctx._arrayType = this.qualifiedName();
				this.state = 943;
				this.match(ApexcodeParser.T__10);
				this.state = 944;
				this.match(ApexcodeParser.T__11);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 946;
				this.qualifiedName();
				this.state = 948;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input,104,this._ctx) ) {
				case 1:
					{
					this.state = 947;
					this.typeArguments();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 45:
			return this.expression_sempred(_localctx as ExpressionContext, predIndex);
		}
		return true;
	}
	private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 23);

		case 1:
			return this.precpred(this._ctx, 14);

		case 2:
			return this.precpred(this._ctx, 13);

		case 3:
			return this.precpred(this._ctx, 12);

		case 4:
			return this.precpred(this._ctx, 11);

		case 5:
			return this.precpred(this._ctx, 9);

		case 6:
			return this.precpred(this._ctx, 8);

		case 7:
			return this.precpred(this._ctx, 7);

		case 8:
			return this.precpred(this._ctx, 6);

		case 9:
			return this.precpred(this._ctx, 5);

		case 10:
			return this.precpred(this._ctx, 4);

		case 11:
			return this.precpred(this._ctx, 3);

		case 12:
			return this.precpred(this._ctx, 1);

		case 13:
			return this.precpred(this._ctx, 22);

		case 14:
			return this.precpred(this._ctx, 21);

		case 15:
			return this.precpred(this._ctx, 18);

		case 16:
			return this.precpred(this._ctx, 10);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 2;
	private static readonly _serializedATNSegment0: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x03p\u03BB\x04\x02"+
		"\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07"+
		"\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04"+
		"\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04"+
		"\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04"+
		"\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x04"+
		"\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#"+
		"\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+"+
		"\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044"+
		"\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04"+
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04"+
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x03\x02\x03"+
		"\x02\x03\x02\x07\x02\x9E\n\x02\f\x02\x0E\x02\xA1\v\x02\x03\x02\x05\x02"+
		"\xA4\n\x02\x03\x03\x03\x03\x07\x03\xA8\n\x03\f\x03\x0E\x03\xAB\v\x03\x03"+
		"\x03\x03\x03\x07\x03\xAF\n\x03\f\x03\x0E\x03\xB2\v\x03\x03\x03\x03\x03"+
		"\x03\x03\x05\x03\xB7\n\x03\x03\x04\x03\x04\x03\x04\x05\x04\xBC\n\x04\x03"+
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x05\x07\xC5\n\x07"+
		"\x03\x07\x05\x07\xC8\n\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b"+
		"\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x07\n\xD7\n\n\f\n\x0E\n\xDA"+
		"\v\n\x03\v\x03\v\x03\v\x07\v\xDF\n\v\f\v\x0E\v\xE2\v\v\x03\f\x03\f\x03"+
		"\f\x03\f\x03\f\x03\f\x05\f\xEA\n\f\x03\r\x03\r\x07\r\xEE\n\r\f\r\x0E\r"+
		"\xF1\v\r\x03\r\x03\r\x03\r\x05\r\xF6\n\r\x03\r\x03\r\x03\r\x03\x0E\x03"+
		"\x0E\x03\x0E\x05\x0E\xFE\n\x0E\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u0103\n"+
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03"+
		"\x11\x07\x11\u010E\n\x11\f\x11\x0E\x11\u0111\v\x11\x03\x12\x03\x12\x03"+
		"\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\u011B\n\x12\f\x12"+
		"\x0E\x12\u011E\v\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03"+
		"\x13\x03\x14\x03\x14\x03\x15\x03\x15\x07\x15\u012B\n\x15\f\x15\x0E\x15"+
		"\u012E\v\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\u0134\n\x15\x03\x15"+
		"\x03\x15\x03\x15\x03\x15\x05\x15\u013A\n\x15\x07\x15\u013C\n\x15\f\x15"+
		"\x0E\x15\u013F\v\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03"+
		"\x16\x05\x16\u0148\n\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18"+
		"\x03\x18\x03\x18\x05\x18\u0152\n\x18\x03\x19\x03\x19\x03\x19\x07\x19\u0157"+
		"\n\x19\f\x19\x0E\x19\u015A\v\x19\x03\x1A\x05\x1A\u015D\n\x1A\x03\x1A\x03"+
		"\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x07\x1C\u0166\n\x1C\f\x1C"+
		"\x0E\x1C\u0169\v\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u016F\n\x1C"+
		"\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D"+
		"\x05\x1D\u017A\n\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x07 \u0182"+
		"\n \f \x0E \u0185\v \x03 \x03 \x03 \x03 \x03 \x06 \u018C\n \r \x0E \u018D"+
		"\x03 \x03 \x03!\x03!\x03!\x03!\x05!\u0196\n!\x03\"\x03\"\x03#\x07#\u019B"+
		"\n#\f#\x0E#\u019E\v#\x03#\x03#\x03#\x07#\u01A3\n#\f#\x0E#\u01A6\v#\x03"+
		"#\x05#\u01A9\n#\x03$\x07$\u01AC\n$\f$\x0E$\u01AF\v$\x03$\x03$\x03$\x07"+
		"$\u01B4\n$\f$\x0E$\u01B7\v$\x03$\x05$\u01BA\n$\x03%\x03%\x05%\u01BE\n"+
		"%\x03&\x07&\u01C1\n&\f&\x0E&\u01C4\v&\x03&\x03&\x03&\x03&\x05&\u01CA\n"+
		"&\x03&\x03&\x03\'\x03\'\x03(\x03(\x03(\x07(\u01D3\n(\f(\x0E(\u01D6\v("+
		"\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x05*\u01DF\n*\x03*\x05*\u01E2\n*\x03"+
		"+\x03+\x03,\x03,\x07,\u01E8\n,\f,\x0E,\u01EB\v,\x03-\x03-\x03-\x03-\x03"+
		".\x03.\x05.\u01F3\n.\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03"+
		"/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x05/\u0209\n/\x03"+
		"/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03"+
		"/\x03/\x03/\x05/\u021C\n/\x03/\x03/\x03/\x03/\x05/\u0222\n/\x03/\x03/"+
		"\x03/\x05/\u0227\n/\x03/\x03/\x03/\x05/\u022C\n/\x03/\x03/\x03/\x03/\x03"+
		"/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03"+
		"/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x05/\u024D"+
		"\n/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x07/\u025A"+
		"\n/\f/\x0E/\u025D\v/\x030\x030\x030\x030\x030\x030\x030\x030\x030\x05"+
		"0\u0268\n0\x031\x031\x031\x031\x032\x032\x032\x072\u0271\n2\f2\x0E2\u0274"+
		"\v2\x033\x033\x033\x053\u0279\n3\x033\x033\x033\x034\x034\x034\x034\x03"+
		"4\x034\x034\x034\x034\x034\x054\u0288\n4\x035\x035\x035\x035\x035\x03"+
		"5\x035\x035\x035\x035\x035\x035\x055\u0296\n5\x055\u0298\n5\x036\x036"+
		"\x036\x036\x076\u029E\n6\f6\x0E6\u02A1\v6\x036\x036\x037\x037\x037\x03"+
		"7\x077\u02A9\n7\f7\x0E7\u02AC\v7\x037\x037\x037\x037\x037\x037\x037\x07"+
		"7\u02B5\n7\f7\x0E7\u02B8\v7\x037\x037\x077\u02BC\n7\f7\x0E7\u02BF\v7\x05"+
		"7\u02C1\n7\x038\x038\x038\x058\u02C6\n8\x038\x038\x038\x058\u02CB\n8\x03"+
		"8\x038\x038\x058\u02D0\n8\x038\x038\x038\x058\u02D5\n8\x078\u02D7\n8\f"+
		"8\x0E8\u02DA\v8\x058\u02DC\n8\x038\x038\x039\x039\x039\x059\u02E3\n9\x03"+
		"9\x039\x039\x059\u02E8\n9\x079\u02EA\n9\f9\x0E9\u02ED\v9\x039\x039\x03"+
		":\x03:\x03;\x03;\x05;\u02F5\n;\x03<\x03<\x03<\x03<\x07<\u02FB\n<\f<\x0E"+
		"<\u02FE\v<\x03<\x05<\u0301\n<\x05<\u0303\n<\x03<\x03<\x03=\x03=\x05=\u0309"+
		"\n=\x03=\x03=\x03>\x03>\x07>\u030F\n>\f>\x0E>\u0312\v>\x03>\x03>\x03?"+
		"\x03?\x03?\x03@\x07@\u031A\n@\f@\x0E@\u031D\v@\x03@\x03@\x03@\x03@\x05"+
		"@\u0323\n@\x03@\x03@\x03@\x03@\x05@\u0329\n@\x07@\u032B\n@\f@\x0E@\u032E"+
		"\v@\x03A\x03A\x03B\x03B\x03B\x03B\x05B\u0336\nB\x03C\x03C\x03C\x07C\u033B"+
		"\nC\fC\x0EC\u033E\vC\x03D\x03D\x05D\u0342\nD\x03D\x03D\x05D\u0346\nD\x03"+
		"D\x03D\x05D\u034A\nD\x05D\u034C\nD\x03E\x03E\x05E\u0350\nE\x03F\x03F\x03"+
		"F\x03F\x03F\x03G\x03G\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03I\x03I\x03"+
		"I\x07I\u0363\nI\fI\x0EI\u0366\vI\x03J\x03J\x03J\x03K\x03K\x03K\x03K\x03"+
		"K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03"+
		"K\x03K\x03K\x03K\x05K\u0381\nK\x03K\x03K\x05K\u0385\nK\x03K\x03K\x03K"+
		"\x03K\x03K\x03K\x03K\x03K\x06K\u038F\nK\rK\x0EK\u0390\x03K\x05K\u0394"+
		"\nK\x03K\x05K\u0397\nK\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03"+
		"K\x03K\x03K\x05K\u03A5\nK\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x05L\u03AE"+
		"\nL\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x05M\u03B7\nM\x05M\u03B9\nM\x03"+
		"M\x02\x02\x03\\N\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10"+
		"\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02"+
		"$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02"+
		"@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02"+
		"\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02"+
		"x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C"+
		"\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x02\f\b\x0244??A"+
		"AGG__dd\x03\x02ef\x04\x02?A__\x03\x02\x0F\x10\x03\x02\x11\x12\x03\x02"+
		"\x14\x16\x03\x02\x19\x1C\x04\x02\n\n$-\x04\x02XY[]\x04\x0299EE\u041E\x02"+
		"\xA3\x03\x02\x02\x02\x04\xB6\x03\x02\x02\x02\x06\xBB\x03\x02\x02\x02\b"+
		"\xBD\x03\x02\x02\x02\n\xBF\x03\x02\x02\x02\f\xC1\x03\x02\x02\x02\x0E\xCD"+
		"\x03\x02\x02\x02\x10\xCF\x03\x02\x02\x02\x12\xD2\x03\x02\x02\x02\x14\xE0"+
		"\x03\x02\x02\x02\x16\xE9\x03\x02\x02\x02\x18\xEF\x03\x02\x02\x02\x1A\xFD"+
		"\x03\x02\x02\x02\x1C\xFF\x03\x02\x02\x02\x1E\u0108\x03\x02\x02\x02 \u010F"+
		"\x03\x02\x02\x02\"\u0112\x03\x02\x02\x02$\u0124\x03\x02\x02\x02&\u0126"+
		"\x03\x02\x02\x02(\u012C\x03\x02\x02\x02*\u0147\x03\x02\x02\x02,\u0149"+
		"\x03\x02\x02\x02.\u0151\x03\x02\x02\x020\u0153\x03\x02\x02\x022\u015C"+
		"\x03\x02\x02\x024\u0161\x03\x02\x02\x026\u0167\x03\x02\x02\x028\u0179"+
		"\x03\x02\x02\x02:\u017B\x03\x02\x02\x02<\u017D\x03\x02\x02\x02>\u0183"+
		"\x03\x02\x02\x02@\u0195\x03\x02\x02\x02B\u0197\x03\x02\x02\x02D\u019C"+
		"\x03\x02\x02\x02F\u01AD\x03\x02\x02\x02H\u01BD\x03\x02\x02\x02J\u01C2"+
		"\x03\x02\x02\x02L\u01CD\x03\x02\x02\x02N\u01CF\x03\x02\x02\x02P\u01D7"+
		"\x03\x02\x02\x02R\u01D9\x03\x02\x02\x02T\u01E3\x03\x02\x02\x02V\u01E5"+
		"\x03\x02\x02\x02X\u01EC\x03\x02\x02\x02Z\u01F2\x03\x02\x02\x02\\\u0208"+
		"\x03\x02\x02\x02^\u0267\x03\x02\x02\x02`\u0269\x03\x02\x02\x02b\u026D"+
		"\x03\x02\x02\x02d\u0275\x03\x02\x02\x02f\u0287\x03\x02\x02\x02h\u0297"+
		"\x03\x02\x02\x02j\u0299\x03\x02\x02\x02l\u02A4\x03\x02\x02\x02n\u02C2"+
		"\x03\x02\x02\x02p\u02DF\x03\x02\x02\x02r\u02F0\x03\x02\x02\x02t\u02F4"+
		"\x03\x02\x02\x02v\u02F6\x03\x02\x02\x02x\u0306\x03\x02\x02\x02z\u030C"+
		"\x03\x02\x02\x02|\u0315\x03\x02\x02\x02~\u031B\x03\x02\x02\x02\x80\u032F"+
		"\x03\x02\x02\x02\x82\u0335\x03\x02\x02\x02\x84\u0337\x03\x02\x02\x02\x86"+
		"\u034B\x03\x02\x02\x02\x88\u034F\x03\x02\x02\x02\x8A\u0351\x03\x02\x02"+
		"\x02\x8C\u0356\x03\x02\x02\x02\x8E\u0358\x03\x02\x02\x02\x90\u035F\x03"+
		"\x02\x02\x02\x92\u0367\x03\x02\x02\x02\x94\u03A4\x03\x02\x02\x02\x96\u03AD"+
		"\x03\x02\x02\x02\x98\u03B8\x03\x02\x02\x02\x9A\x9B\x07\x03\x02\x02\x9B"+
		"\xA4\x07\x02\x02\x03\x9C\x9E\x05\x04\x03\x02\x9D\x9C\x03\x02\x02\x02\x9E"+
		"\xA1\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0"+
		"\xA2\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xA4\x07\x02\x02\x03\xA3"+
		"\x9A\x03\x02\x02\x02\xA3\x9F\x03\x02\x02\x02\xA4\x03\x03\x02\x02\x02\xA5"+
		"\xB7\x05\"\x12\x02\xA6\xA8\x05\x06\x04\x02\xA7\xA6\x03\x02\x02\x02\xA8"+
		"\xAB\x03\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA"+
		"\xAC\x03\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAC\xB7\x05\f\x07\x02\xAD"+
		"\xAF\x05\x06\x04\x02\xAE\xAD\x03\x02\x02\x02\xAF\xB2\x03\x02\x02\x02\xB0"+
		"\xAE\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1\xB3\x03\x02\x02\x02\xB2"+
		"\xB0\x03\x02\x02\x02\xB3\xB7\x05\x1C\x0F\x02\xB4\xB7\x05J&\x02\xB5\xB7"+
		"\x07\x04\x02\x02\xB6\xA5\x03\x02\x02\x02\xB6\xA9\x03\x02\x02\x02\xB6\xB0"+
		"\x03\x02\x02\x02\xB6\xB4\x03\x02\x02\x02\xB6\xB5\x03\x02\x02\x02\xB7\x05"+
		"\x03\x02\x02\x02\xB8\xBC\x05R*\x02\xB9\xBC\x05\b\x05\x02\xBA\xBC\x05\n"+
		"\x06\x02\xBB\xB8\x03\x02\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBA\x03\x02"+
		"\x02\x02\xBC\x07\x03\x02\x02\x02\xBD\xBE\t\x02\x02\x02\xBE\t\x03\x02\x02"+
		"\x02\xBF\xC0\t\x03\x02\x02\xC0\v\x03\x02\x02\x02\xC1\xC2\x075\x02\x02"+
		"\xC2\xC4\x05\x0E\b\x02\xC3\xC5\x05\x10\t\x02\xC4\xC3\x03\x02\x02\x02\xC4"+
		"\xC5\x03\x02\x02\x02\xC5\xC7\x03\x02\x02\x02\xC6\xC8\x05\x12\n\x02\xC7"+
		"\xC6\x03\x02\x02\x02\xC7\xC8\x03\x02\x02\x02\xC8\xC9\x03\x02\x02\x02\xC9"+
		"\xCA\x07\x05\x02\x02\xCA\xCB\x05\x14\v\x02\xCB\xCC\x07\x06\x02\x02\xCC"+
		"\r\x03\x02\x02\x02\xCD\xCE\x07p\x02\x02\xCE\x0F\x03\x02\x02\x02\xCF\xD0"+
		"\x077\x02\x02\xD0\xD1\x05\x98M\x02\xD1\x11\x03\x02\x02\x02\xD2\xD3\x07"+
		";\x02\x02\xD3\xD8\x05\x98M\x02\xD4\xD5\x07\x07\x02\x02\xD5\xD7\x05\x98"+
		"M\x02\xD6\xD4\x03\x02\x02\x02\xD7\xDA\x03\x02\x02\x02\xD8\xD6\x03\x02"+
		"\x02\x02\xD8\xD9\x03\x02\x02\x02\xD9\x13\x03\x02\x02\x02\xDA\xD8\x03\x02"+
		"\x02\x02\xDB\xDF\x05|?\x02\xDC\xDF\x05\x16\f\x02\xDD\xDF\x05\x82B\x02"+
		"\xDE\xDB\x03\x02\x02\x02\xDE\xDC\x03\x02\x02\x02\xDE\xDD\x03\x02\x02\x02"+
		"\xDF\xE2\x03\x02\x02\x02\xE0\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02\x02\x02"+
		"\xE1\x15\x03\x02\x02\x02\xE2\xE0\x03\x02\x02\x02\xE3\xEA\x05J&\x02\xE4"+
		"\xEA\x05\x18\r\x02\xE5\xEA\x05.\x18\x02\xE6\xEA\x05(\x15\x02\xE7\xEA\x05"+
		"> \x02\xE8\xEA\x05\x04\x03\x02\xE9\xE3\x03\x02\x02\x02\xE9\xE4\x03\x02"+
		"\x02\x02\xE9\xE5\x03\x02\x02\x02\xE9\xE6\x03\x02\x02\x02\xE9\xE7\x03\x02"+
		"\x02\x02\xE9\xE8\x03\x02\x02\x02\xEA\x17\x03\x02\x02\x02\xEB\xEE\x05R"+
		"*\x02\xEC\xEE\x05\x1A\x0E\x02\xED\xEB\x03\x02\x02\x02\xED\xEC\x03\x02"+
		"\x02\x02\xEE\xF1\x03\x02\x02\x02\xEF\xED\x03\x02\x02\x02\xEF\xF0\x03\x02"+
		"\x02\x02\xF0\xF2\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF2\xF3\x05\x84"+
		"C\x02\xF3\xF5\x07\b\x02\x02\xF4\xF6\x050\x19\x02\xF5\xF4\x03\x02\x02\x02"+
		"\xF5\xF6\x03\x02\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7\xF8\x07\t\x02\x02"+
		"\xF8\xF9\x05<\x1F\x02\xF9\x19\x03\x02\x02\x02\xFA\xFE\t\x04\x02\x02\xFB"+
		"\xFE\x07>\x02\x02\xFC\xFE\x07G\x02\x02\xFD\xFA\x03\x02\x02\x02\xFD\xFB"+
		"\x03\x02\x02\x02\xFD\xFC\x03\x02\x02\x02\xFE\x1B\x03\x02\x02\x02\xFF\u0100"+
		"\x07=\x02\x02\u0100\u0102\x05\x1E\x10\x02\u0101\u0103\x05\x10\t\x02\u0102"+
		"\u0101\x03\x02\x02\x02\u0102\u0103\x03\x02\x02\x02\u0103\u0104\x03\x02"+
		"\x02\x02\u0104\u0105\x07\x05\x02\x02\u0105\u0106\x05 \x11\x02\u0106\u0107"+
		"\x07\x06\x02\x02\u0107\x1D\x03\x02\x02\x02\u0108\u0109\x07p\x02\x02\u0109"+
		"\x1F\x03\x02\x02\x02\u010A\u010B\x056\x1C\x02\u010B\u010C\x07\x04\x02"+
		"\x02\u010C\u010E\x03\x02\x02\x02\u010D\u010A\x03\x02\x02\x02\u010E\u0111"+
		"\x03\x02\x02\x02\u010F\u010D\x03\x02\x02\x02\u010F\u0110\x03\x02\x02\x02"+
		"\u0110!\x03\x02\x02\x02\u0111\u010F\x03\x02\x02\x02\u0112\u0113\x07a\x02"+
		"\x02\u0113\u0114\x05$\x13\x02\u0114\u0115\x07b\x02\x02\u0115\u0116\x05"+
		"&\x14\x02\u0116\u0117\x07\b\x02\x02\u0117\u011C\x07^\x02\x02\u0118\u0119"+
		"\x07\x07\x02\x02\u0119\u011B\x07^\x02\x02\u011A\u0118\x03\x02\x02\x02"+
		"\u011B\u011E\x03\x02\x02\x02\u011C\u011A\x03\x02\x02\x02\u011C\u011D\x03"+
		"\x02\x02\x02\u011D\u011F\x03\x02\x02\x02\u011E\u011C\x03\x02\x02\x02\u011F"+
		"\u0120\x07\t\x02\x02\u0120\u0121\x07\x05\x02\x02\u0121\u0122\x05\x14\v"+
		"\x02\u0122\u0123\x07\x06\x02\x02\u0123#\x03\x02\x02\x02\u0124\u0125\x07"+
		"p\x02\x02\u0125%\x03\x02\x02\x02\u0126\u0127\x07p\x02\x02\u0127\'\x03"+
		"\x02\x02\x02\u0128\u012B\x05R*\x02\u0129\u012B\x05*\x16\x02\u012A\u0128"+
		"\x03\x02\x02\x02\u012A\u0129\x03\x02\x02\x02\u012B\u012E\x03\x02\x02\x02"+
		"\u012C\u012A\x03\x02\x02\x02\u012C\u012D\x03\x02\x02\x02\u012D\u012F\x03"+
		"\x02\x02\x02\u012E\u012C\x03\x02\x02\x02\u012F\u0130\x05\x98M\x02\u0130"+
		"\u0133\x05,\x17\x02\u0131\u0132\x07\n\x02\x02\u0132\u0134\x05\\/\x02\u0133"+
		"\u0131\x03\x02\x02\x02\u0133\u0134\x03\x02\x02\x02\u0134\u013D\x03\x02"+
		"\x02\x02\u0135\u0136\x07\x07\x02\x02\u0136\u0139\x05,\x17\x02\u0137\u0138"+
		"\x07\n\x02\x02\u0138\u013A\x05\\/\x02\u0139\u0137\x03\x02\x02\x02\u0139"+
		"\u013A\x03\x02\x02\x02\u013A\u013C\x03\x02\x02\x02\u013B\u0135\x03\x02"+
		"\x02\x02\u013C\u013F\x03\x02\x02\x02\u013D\u013B\x03\x02\x02\x02\u013D"+
		"\u013E\x03\x02\x02\x02\u013E\u0140\x03\x02\x02\x02\u013F\u013D\x03\x02"+
		"\x02\x02\u0140\u0141\x07\x04\x02\x02\u0141)\x03\x02\x02\x02\u0142\u0148"+
		"\t\x04\x02\x02\u0143\u0148\x079\x02\x02\u0144\u0148\x07B\x02\x02\u0145"+
		"\u0148\x07E\x02\x02\u0146\u0148\x07d\x02\x02\u0147\u0142\x03\x02\x02\x02"+
		"\u0147\u0143\x03\x02\x02\x02\u0147\u0144\x03\x02\x02\x02\u0147\u0145\x03"+
		"\x02\x02\x02\u0147\u0146\x03\x02\x02\x02\u0148+\x03\x02\x02\x02\u0149"+
		"\u014A\x07p\x02\x02\u014A-\x03\x02\x02\x02\u014B\u014C\x056\x1C\x02\u014C"+
		"\u014D\x05<\x1F\x02\u014D\u0152\x03\x02\x02\x02\u014E\u014F\x056\x1C\x02"+
		"\u014F\u0150\x07\x04\x02\x02\u0150\u0152\x03\x02\x02\x02\u0151\u014B\x03"+
		"\x02\x02\x02\u0151\u014E\x03\x02\x02\x02\u0152/\x03\x02\x02\x02\u0153"+
		"\u0158\x052\x1A\x02\u0154\u0155\x07\x07\x02\x02\u0155\u0157\x052\x1A\x02"+
		"\u0156\u0154\x03\x02\x02\x02\u0157\u015A\x03\x02\x02\x02\u0158\u0156\x03"+
		"\x02\x02\x02\u0158\u0159\x03\x02\x02\x02\u01591\x03\x02\x02\x02\u015A"+
		"\u0158\x03\x02\x02\x02\u015B\u015D\x079\x02\x02\u015C\u015B\x03\x02\x02"+
		"\x02\u015C\u015D\x03\x02\x02\x02\u015D\u015E\x03\x02\x02\x02\u015E\u015F"+
		"\x05\x98M\x02\u015F\u0160\x054\x1B\x02\u01603\x03\x02\x02\x02\u0161\u0162"+
		"\x07p\x02\x02\u01625\x03\x02\x02\x02\u0163\u0166\x05R*\x02\u0164\u0166"+
		"\x058\x1D\x02\u0165\u0163\x03\x02\x02\x02\u0165\u0164\x03\x02\x02\x02"+
		"\u0166\u0169\x03\x02\x02\x02\u0167\u0165\x03\x02\x02\x02\u0167\u0168\x03"+
		"\x02\x02\x02\u0168\u016A\x03\x02\x02\x02\u0169\u0167\x03\x02\x02\x02\u016A"+
		"\u016B\x05\x98M\x02\u016B\u016C\x05:\x1E\x02\u016C\u016E\x07\b\x02\x02"+
		"\u016D\u016F\x050\x19\x02\u016E\u016D\x03\x02\x02\x02\u016E\u016F\x03"+
		"\x02\x02\x02\u016F\u0170\x03\x02\x02\x02\u0170\u0171\x07\t\x02\x02\u0171"+
		"7\x03\x02\x02\x02\u0172\u017A\t\x04\x02\x02\u0173\u017A\x07>\x02\x02\u0174"+
		"\u017A\x074\x02\x02\u0175\u017A\x07G\x02\x02\u0176\u017A\x07B\x02\x02"+
		"\u0177\u017A\x07c\x02\x02\u0178\u017A\x07d\x02\x02\u0179\u0172\x03\x02"+
		"\x02\x02\u0179\u0173\x03\x02\x02\x02\u0179\u0174\x03\x02\x02\x02\u0179"+
		"\u0175\x03\x02\x02\x02\u0179\u0176\x03\x02\x02\x02\u0179\u0177\x03\x02"+
		"\x02\x02\u0179\u0178\x03\x02\x02\x02\u017A9\x03\x02\x02\x02\u017B\u017C"+
		"\x07p\x02\x02\u017C;\x03\x02\x02\x02\u017D\u017E\x05z>\x02\u017E=\x03"+
		"\x02\x02\x02\u017F\u0182\x05R*\x02\u0180\u0182\x05@!\x02\u0181\u017F\x03"+
		"\x02\x02\x02\u0181\u0180\x03\x02\x02\x02\u0182\u0185\x03\x02\x02\x02\u0183"+
		"\u0181\x03\x02\x02\x02\u0183\u0184\x03\x02\x02\x02\u0184\u0186\x03\x02"+
		"\x02\x02\u0185\u0183\x03\x02\x02\x02\u0186\u0187\x05\x98M\x02\u0187\u0188"+
		"\x05B\"\x02\u0188\u018B\x07\x05\x02\x02\u0189\u018C\x05D#\x02\u018A\u018C"+
		"\x05F$\x02\u018B\u0189\x03\x02\x02\x02\u018B\u018A\x03\x02\x02\x02\u018C"+
		"\u018D\x03\x02\x02\x02\u018D\u018B\x03\x02\x02\x02\u018D\u018E\x03\x02"+
		"\x02\x02\u018E\u018F\x03\x02\x02\x02\u018F\u0190\x07\x06\x02\x02\u0190"+
		"?\x03\x02\x02\x02\u0191\u0196\t\x04\x02\x02\u0192\u0196\x079\x02\x02\u0193"+
		"\u0196\x07B\x02\x02\u0194\u0196\x07E\x02\x02\u0195\u0191\x03\x02\x02\x02"+
		"\u0195\u0192\x03\x02\x02\x02\u0195\u0193\x03\x02\x02\x02\u0195\u0194\x03"+
		"\x02\x02\x02\u0196A\x03\x02\x02\x02\u0197\u0198\x07p\x02\x02\u0198C\x03"+
		"\x02\x02\x02\u0199\u019B\x05H%\x02\u019A\u0199\x03\x02\x02\x02\u019B\u019E"+
		"\x03\x02\x02\x02\u019C\u019A\x03\x02\x02\x02\u019C\u019D\x03\x02\x02\x02"+
		"\u019D\u01A8\x03\x02\x02\x02\u019E\u019C\x03\x02\x02\x02\u019F\u01A9\x07"+
		"g\x02\x02\u01A0\u01A4\x07h\x02\x02\u01A1\u01A3\x05\x82B\x02\u01A2\u01A1"+
		"\x03\x02\x02\x02\u01A3\u01A6\x03\x02\x02\x02\u01A4\u01A2\x03\x02\x02\x02"+
		"\u01A4\u01A5\x03\x02\x02\x02\u01A5\u01A7\x03\x02\x02\x02\u01A6\u01A4\x03"+
		"\x02\x02\x02\u01A7\u01A9\x07\x06\x02\x02\u01A8\u019F\x03\x02\x02\x02\u01A8"+
		"\u01A0\x03\x02\x02\x02\u01A9E\x03\x02\x02\x02\u01AA\u01AC\x05H%\x02\u01AB"+
		"\u01AA\x03\x02\x02\x02\u01AC\u01AF\x03\x02\x02\x02\u01AD\u01AB\x03\x02"+
		"\x02\x02\u01AD\u01AE\x03\x02\x02\x02\u01AE\u01B9\x03\x02\x02\x02\u01AF"+
		"\u01AD\x03\x02\x02\x02\u01B0\u01BA\x07i\x02\x02\u01B1\u01B5\x07j\x02\x02"+
		"\u01B2\u01B4\x05\x82B\x02\u01B3\u01B2\x03\x02\x02\x02\u01B4\u01B7\x03"+
		"\x02\x02\x02\u01B5\u01B3\x03\x02\x02\x02\u01B5\u01B6\x03\x02\x02\x02\u01B6"+
		"\u01B8\x03\x02\x02\x02\u01B7\u01B5\x03\x02\x02\x02\u01B8\u01BA\x07\x06"+
		"\x02\x02\u01B9\u01B0\x03\x02\x02\x02\u01B9\u01B1\x03\x02\x02\x02\u01BA"+
		"G\x03\x02\x02\x02\u01BB\u01BE\t\x04\x02\x02\u01BC\u01BE\x07B\x02\x02\u01BD"+
		"\u01BB\x03\x02\x02\x02\u01BD\u01BC\x03\x02\x02\x02\u01BEI\x03\x02\x02"+
		"\x02\u01BF\u01C1\x05\x06\x04\x02\u01C0\u01BF\x03\x02\x02\x02\u01C1\u01C4"+
		"\x03\x02\x02\x02\u01C2\u01C0\x03\x02\x02\x02\u01C2\u01C3\x03\x02\x02\x02"+
		"\u01C3\u01C5\x03\x02\x02\x02\u01C4\u01C2\x03\x02\x02\x02\u01C5\u01C6\x07"+
		"6\x02\x02\u01C6\u01C7\x05L\'\x02\u01C7\u01C9\x07\x05\x02\x02\u01C8\u01CA"+
		"\x05N(\x02\u01C9\u01C8\x03\x02\x02\x02\u01C9\u01CA\x03\x02\x02\x02\u01CA"+
		"\u01CB\x03\x02\x02\x02\u01CB\u01CC\x07\x06\x02\x02\u01CCK\x03\x02\x02"+
		"\x02\u01CD\u01CE\x07p\x02\x02\u01CEM\x03\x02\x02\x02\u01CF\u01D4\x05P"+
		")\x02\u01D0\u01D1\x07\x07\x02\x02\u01D1\u01D3\x05P)\x02\u01D2\u01D0\x03"+
		"\x02\x02";
	private static readonly _serializedATNSegment1: string =
		"\x02\u01D3\u01D6\x03\x02\x02\x02\u01D4\u01D2\x03\x02\x02\x02\u01D4\u01D5"+
		"\x03\x02\x02\x02\u01D5O\x03\x02\x02\x02\u01D6\u01D4\x03\x02\x02\x02\u01D7"+
		"\u01D8\x07p\x02\x02\u01D8Q\x03\x02\x02\x02\u01D9\u01DA\x07\v\x02\x02\u01DA"+
		"\u01E1\x05T+\x02\u01DB\u01DE\x07\b\x02\x02\u01DC\u01DF\x05V,\x02\u01DD"+
		"\u01DF\x05Z.\x02\u01DE\u01DC\x03\x02\x02\x02\u01DE\u01DD\x03\x02\x02\x02"+
		"\u01DE\u01DF\x03\x02\x02\x02\u01DF\u01E0\x03\x02\x02\x02\u01E0\u01E2\x07"+
		"\t\x02\x02\u01E1\u01DB\x03\x02\x02\x02\u01E1\u01E2\x03\x02\x02\x02\u01E2"+
		"S\x03\x02\x02\x02\u01E3\u01E4\x07p\x02\x02\u01E4U\x03\x02\x02\x02\u01E5"+
		"\u01E9\x05X-\x02\u01E6\u01E8\x05X-\x02\u01E7\u01E6\x03\x02\x02\x02\u01E8"+
		"\u01EB\x03\x02\x02\x02\u01E9\u01E7\x03\x02\x02\x02\u01E9\u01EA\x03\x02"+
		"\x02\x02\u01EAW\x03\x02\x02\x02\u01EB\u01E9\x03\x02\x02\x02\u01EC\u01ED"+
		"\x07p\x02\x02\u01ED\u01EE\x07\n\x02\x02\u01EE\u01EF\x05Z.\x02\u01EFY\x03"+
		"\x02\x02\x02\u01F0\u01F3\x05\\/\x02\u01F1\u01F3\x05R*\x02\u01F2\u01F0"+
		"\x03\x02\x02\x02\u01F2\u01F1\x03\x02\x02\x02\u01F3[\x03\x02\x02\x02\u01F4"+
		"\u01F5\b/\x01\x02\u01F5\u0209\x05^0\x02\u01F6\u01F7\x07I\x02\x02\u01F7"+
		"\u0209\x05h5\x02\u01F8\u01F9\x07\b\x02\x02\u01F9\u01FA\x05j6\x02\u01FA"+
		"\u01FB\x07\t\x02\x02\u01FB\u01FC\x05\\/\x15\u01FC\u0209\x03\x02\x02\x02"+
		"\u01FD\u01FE\t\x05\x02\x02\u01FE\u0209\x05\\/\x13\u01FF\u0200\t\x06\x02"+
		"\x02\u0200\u0209\x05\\/\x12\u0201\u0202\x07\x13\x02\x02\u0202\u0209\x05"+
		"\\/\x11\u0203\u0204\x07\b\x02\x02\u0204\u0205\x05\x98M\x02\u0205\u0206"+
		"\x07\t\x02\x02\u0206\u0207\x05\\/\x04\u0207\u0209\x03\x02\x02\x02\u0208"+
		"\u01F4\x03\x02\x02\x02\u0208\u01F6\x03\x02\x02\x02\u0208\u01F8\x03\x02"+
		"\x02\x02\u0208\u01FD\x03\x02\x02\x02\u0208\u01FF\x03\x02\x02\x02\u0208"+
		"\u0201\x03\x02\x02\x02\u0208\u0203\x03\x02\x02\x02\u0209\u025B\x03\x02"+
		"\x02\x02\u020A\u020B\f\x19\x02\x02\u020B\u020C\x07\f\x02\x02\u020C\u025A"+
		"\x05\\/\x1A\u020D\u020E\f\x10\x02\x02\u020E\u020F\t\x07\x02\x02\u020F"+
		"\u025A\x05\\/\x11\u0210\u0211\f\x0F\x02\x02\u0211\u0212\t\x06\x02\x02"+
		"\u0212\u025A\x05\\/\x10\u0213\u021B\f\x0E\x02\x02\u0214\u0215\x07\x17"+
		"\x02\x02\u0215\u021C\x07\x17\x02\x02\u0216\u0217\x07\x18\x02\x02\u0217"+
		"\u0218\x07\x18\x02\x02\u0218\u021C\x07\x18\x02\x02\u0219\u021A\x07\x18"+
		"\x02\x02\u021A\u021C\x07\x18\x02\x02\u021B\u0214\x03\x02\x02\x02\u021B"+
		"\u0216\x03\x02\x02\x02\u021B\u0219\x03\x02\x02\x02\u021C\u021D\x03\x02"+
		"\x02\x02\u021D\u025A\x05\\/\x0F\u021E\u022B\f\r\x02\x02\u021F\u0221\x07"+
		"\x17\x02\x02\u0220\u0222\x072\x02\x02\u0221\u0220\x03\x02\x02\x02\u0221"+
		"\u0222\x03\x02\x02\x02\u0222\u0223\x03\x02\x02\x02\u0223\u022C\x07\n\x02"+
		"\x02\u0224\u0226\x07\x18\x02\x02\u0225\u0227\x072\x02\x02\u0226\u0225"+
		"\x03\x02\x02\x02\u0226\u0227\x03\x02\x02\x02\u0227\u0228\x03\x02\x02\x02"+
		"\u0228\u022C\x07\n\x02\x02\u0229\u022C\x07\x18\x02\x02\u022A\u022C\x07"+
		"\x17\x02\x02\u022B\u021F\x03\x02\x02\x02\u022B\u0224\x03\x02\x02\x02\u022B"+
		"\u0229\x03\x02\x02\x02\u022B\u022A\x03\x02\x02\x02\u022C\u022D\x03\x02"+
		"\x02\x02\u022D\u025A\x05\\/\x0E\u022E\u022F\f\v\x02\x02\u022F\u0230\t"+
		"\b\x02\x02\u0230\u025A\x05\\/\f\u0231\u0232\f\n\x02\x02\u0232\u0233\x07"+
		"\x1D\x02\x02\u0233\u025A\x05\\/\v\u0234\u0235\f\t\x02\x02\u0235\u0236"+
		"\x07\x1E\x02\x02\u0236\u025A\x05\\/\n\u0237\u0238\f\b\x02\x02\u0238\u0239"+
		"\x07\x1F\x02\x02\u0239\u025A\x05\\/\t\u023A\u023B\f\x07\x02\x02\u023B"+
		"\u023C\x07 \x02\x02\u023C\u025A\x05\\/\b\u023D\u023E\f\x06\x02\x02\u023E"+
		"\u023F\x07!\x02\x02\u023F\u025A\x05\\/\x07\u0240\u0241\f\x05\x02\x02\u0241"+
		"\u0242\x07\"\x02\x02\u0242\u0243\x05\\/\x02\u0243\u0244\x07#\x02\x02\u0244"+
		"\u0245\x05\\/\x06\u0245\u025A\x03\x02\x02\x02\u0246\u0247\f\x03\x02\x02"+
		"\u0247\u0248\t\t\x02\x02\u0248\u025A\x05\\/\x03\u0249\u024A\f\x18\x02"+
		"\x02\u024A\u024C\x07\b\x02\x02\u024B\u024D\x05b2\x02\u024C\u024B\x03\x02"+
		"\x02\x02\u024C\u024D\x03\x02\x02\x02\u024D\u024E\x03\x02\x02\x02\u024E"+
		"\u025A\x07\t\x02\x02\u024F\u0250\f\x17\x02\x02\u0250\u0251\x07\r\x02\x02"+
		"\u0251\u0252\x05\\/\x02\u0252\u0253\x07\x0E\x02\x02\u0253\u025A\x03\x02"+
		"\x02\x02\u0254\u0255\f\x14\x02\x02\u0255\u025A\t\x05\x02\x02\u0256\u0257"+
		"\f\f\x02\x02\u0257\u0258\x07<\x02\x02\u0258\u025A\x05\x98M\x02\u0259\u020A"+
		"\x03\x02\x02\x02\u0259\u020D\x03\x02\x02\x02\u0259\u0210\x03\x02\x02\x02"+
		"\u0259\u0213\x03\x02\x02\x02\u0259\u021E\x03\x02\x02\x02\u0259\u022E\x03"+
		"\x02\x02\x02\u0259\u0231\x03\x02\x02\x02\u0259\u0234\x03\x02\x02\x02\u0259"+
		"\u0237\x03\x02\x02\x02\u0259\u023A\x03\x02\x02\x02\u0259\u023D\x03\x02"+
		"\x02\x02\u0259\u0240\x03\x02\x02\x02\u0259\u0246\x03\x02\x02\x02\u0259"+
		"\u0249\x03\x02\x02\x02\u0259\u024F\x03\x02\x02\x02\u0259\u0254\x03\x02"+
		"\x02\x02\u0259\u0256\x03\x02\x02\x02\u025A\u025D\x03\x02\x02\x02\u025B"+
		"\u0259\x03\x02\x02\x02\u025B\u025C\x03\x02\x02\x02\u025C]\x03\x02\x02"+
		"\x02\u025D\u025B\x03\x02\x02\x02\u025E\u0268\x05`1\x02\u025F\u0268\x07"+
		"D\x02\x02\u0260\u0268\x07C\x02\x02\u0261\u0268\x05\x96L\x02\u0262\u0268"+
		"\x07p\x02\x02\u0263\u0264\x05\x98M\x02\u0264\u0265\x07\f\x02\x02\u0265"+
		"\u0266\x075\x02\x02\u0266\u0268\x03\x02\x02\x02\u0267\u025E\x03\x02\x02"+
		"\x02\u0267\u025F\x03\x02\x02\x02\u0267\u0260\x03\x02\x02\x02\u0267\u0261"+
		"\x03\x02\x02\x02\u0267\u0262\x03\x02\x02\x02\u0267\u0263\x03\x02\x02\x02"+
		"\u0268_\x03\x02\x02\x02\u0269\u026A\x07\b\x02\x02\u026A\u026B\x05\\/\x02"+
		"\u026B\u026C\x07\t\x02\x02\u026Ca\x03\x02\x02\x02\u026D\u0272\x05\\/\x02"+
		"\u026E\u026F\x07\x07\x02\x02\u026F\u0271\x05\\/\x02\u0270\u026E\x03\x02"+
		"\x02\x02\u0271\u0274\x03\x02\x02\x02\u0272\u0270\x03\x02\x02\x02\u0272"+
		"\u0273\x03\x02\x02\x02\u0273c\x03\x02\x02\x02\u0274\u0272\x03\x02\x02"+
		"\x02\u0275\u0276\x07`\x02\x02\u0276\u0278\x07\b\x02\x02\u0277\u0279\x05"+
		"b2\x02\u0278\u0277\x03\x02\x02\x02\u0278\u0279\x03\x02\x02\x02\u0279\u027A"+
		"\x03\x02\x02\x02\u027A\u027B\x07\t\x02\x02\u027B\u027C\x05z>\x02\u027C"+
		"e\x03\x02\x02\x02\u027D\u027E\x07Z\x02\x02\u027E\u027F\x05\\/\x02\u027F"+
		"\u0280\x05\\/\x02\u0280\u0288\x03\x02\x02\x02\u0281\u0282\x07]\x02\x02"+
		"\u0282\u0283\x05\\/\x02\u0283\u0284\x05\\/\x02\u0284\u0288\x03\x02\x02"+
		"\x02\u0285\u0286\t\n\x02\x02\u0286\u0288\x05\\/\x02\u0287\u027D\x03\x02"+
		"\x02\x02\u0287\u0281\x03\x02\x02\x02\u0287\u0285\x03\x02\x02\x02\u0288"+
		"g\x03\x02\x02\x02\u0289\u028A\x05\x98M\x02\u028A\u028B\x07\b\x02\x02\u028B"+
		"\u028C\x07\t\x02\x02\u028C\u0298\x03\x02\x02\x02\u028D\u028E\x05\x98M"+
		"\x02\u028E\u028F\x05`1\x02\u028F\u0298\x03\x02\x02\x02\u0290\u0295\x05"+
		"\x98M\x02\u0291\u0296\x05r:\x02\u0292\u0296\x05l7\x02\u0293\u0296\x05"+
		"n8\x02\u0294\u0296\x05p9\x02\u0295\u0291\x03\x02\x02\x02\u0295\u0292\x03"+
		"\x02\x02\x02\u0295\u0293\x03\x02\x02\x02\u0295\u0294\x03\x02\x02\x02\u0296"+
		"\u0298\x03\x02\x02\x02\u0297\u0289\x03\x02\x02\x02\u0297\u028D\x03\x02"+
		"\x02\x02\u0297\u0290\x03\x02\x02\x02\u0298i\x03\x02\x02\x02\u0299\u029A"+
		"\x07\x17\x02\x02\u029A\u029F\x05\x98M\x02\u029B\u029C\x07\x07\x02\x02"+
		"\u029C\u029E\x05\x98M\x02\u029D\u029B\x03\x02\x02\x02\u029E\u02A1\x03"+
		"\x02\x02\x02\u029F\u029D\x03\x02\x02\x02\u029F\u02A0\x03\x02\x02\x02\u02A0"+
		"\u02A2\x03\x02\x02\x02\u02A1\u029F\x03\x02\x02\x02\u02A2\u02A3\x07\x18"+
		"\x02\x02\u02A3k\x03\x02\x02\x02\u02A4\u02C0\x07\r\x02\x02\u02A5\u02AA"+
		"\x07\x0E\x02\x02\u02A6\u02A7\x07\r\x02\x02\u02A7\u02A9\x07\x0E\x02\x02"+
		"\u02A8\u02A6\x03\x02\x02\x02\u02A9\u02AC\x03\x02\x02\x02\u02AA\u02A8\x03"+
		"\x02\x02\x02\u02AA\u02AB\x03\x02\x02\x02\u02AB\u02AD\x03\x02\x02\x02\u02AC"+
		"\u02AA\x03\x02\x02\x02\u02AD\u02C1\x05v<\x02\u02AE\u02AF\x05\\/\x02\u02AF"+
		"\u02B6\x07\x0E\x02\x02\u02B0\u02B1\x07\r\x02\x02\u02B1\u02B2\x05\\/\x02"+
		"\u02B2\u02B3\x07\x0E\x02\x02\u02B3\u02B5\x03\x02\x02\x02\u02B4\u02B0\x03"+
		"\x02\x02\x02\u02B5\u02B8\x03\x02\x02\x02\u02B6\u02B4\x03\x02\x02\x02\u02B6"+
		"\u02B7\x03\x02\x02\x02\u02B7\u02BD\x03\x02\x02\x02\u02B8\u02B6\x03\x02"+
		"\x02\x02\u02B9\u02BA\x07\r\x02\x02\u02BA\u02BC\x07\x0E\x02\x02\u02BB\u02B9"+
		"\x03\x02\x02\x02\u02BC\u02BF\x03\x02\x02\x02\u02BD\u02BB\x03\x02\x02\x02"+
		"\u02BD\u02BE\x03\x02\x02\x02\u02BE\u02C1\x03\x02\x02\x02\u02BF\u02BD\x03"+
		"\x02\x02\x02\u02C0\u02A5\x03\x02\x02\x02\u02C0\u02AE\x03\x02\x02\x02\u02C1"+
		"m\x03\x02\x02\x02\u02C2\u02DB\x07\x05\x02\x02\u02C3\u02C6\x05\x96L\x02"+
		"\u02C4\u02C6\x05\\/\x02\u02C5\u02C3\x03\x02\x02\x02\u02C5\u02C4\x03\x02"+
		"\x02\x02\u02C6\u02C7\x03\x02\x02\x02\u02C7\u02CA\x07.\x02\x02\u02C8\u02CB"+
		"\x05\x96L\x02\u02C9\u02CB\x05\\/\x02\u02CA\u02C8\x03\x02\x02\x02\u02CA"+
		"\u02C9\x03\x02\x02\x02\u02CB\u02D8\x03\x02\x02\x02\u02CC\u02CF\x07\x07"+
		"\x02\x02\u02CD\u02D0\x05\x96L\x02\u02CE\u02D0\x05\\/\x02\u02CF\u02CD\x03"+
		"\x02\x02\x02\u02CF\u02CE\x03\x02\x02\x02\u02D0\u02D1\x03\x02\x02\x02\u02D1"+
		"\u02D4\x07.\x02\x02\u02D2\u02D5\x05\x96L\x02\u02D3\u02D5\x05\\/\x02\u02D4"+
		"\u02D2\x03\x02\x02\x02\u02D4\u02D3\x03\x02\x02\x02\u02D5\u02D7\x03\x02"+
		"\x02\x02\u02D6\u02CC\x03\x02\x02\x02\u02D7\u02DA\x03\x02\x02\x02\u02D8"+
		"\u02D6\x03\x02\x02\x02\u02D8\u02D9\x03\x02\x02\x02\u02D9\u02DC\x03\x02"+
		"\x02\x02\u02DA\u02D8\x03\x02\x02\x02\u02DB\u02C5\x03\x02\x02\x02\u02DB"+
		"\u02DC\x03\x02\x02\x02\u02DC\u02DD\x03\x02\x02\x02\u02DD\u02DE\x07\x06"+
		"\x02\x02\u02DEo\x03\x02\x02\x02\u02DF\u02E2\x07\x05\x02\x02\u02E0\u02E3"+
		"\x05\x96L\x02\u02E1\u02E3\x05\\/\x02\u02E2\u02E0\x03\x02\x02\x02\u02E2"+
		"\u02E1\x03\x02\x02\x02\u02E3\u02EB\x03\x02\x02\x02\u02E4\u02E7\x07\x07"+
		"\x02\x02\u02E5\u02E8\x05\x96L\x02\u02E6\u02E8\x05\\/\x02\u02E7\u02E5\x03"+
		"\x02\x02\x02\u02E7\u02E6\x03\x02\x02\x02\u02E8\u02EA\x03\x02\x02\x02\u02E9"+
		"\u02E4\x03\x02\x02\x02\u02EA\u02ED\x03\x02\x02\x02\u02EB\u02E9\x03\x02"+
		"\x02\x02\u02EB\u02EC\x03\x02\x02\x02\u02EC\u02EE\x03\x02\x02\x02\u02ED"+
		"\u02EB\x03\x02\x02\x02\u02EE\u02EF\x07\x06\x02\x02\u02EFq\x03\x02\x02"+
		"\x02\u02F0\u02F1\x05x=\x02\u02F1s\x03\x02\x02\x02\u02F2\u02F5\x05v<\x02"+
		"\u02F3\u02F5\x05\\/\x02\u02F4\u02F2\x03\x02\x02\x02\u02F4\u02F3\x03\x02"+
		"\x02\x02\u02F5u\x03\x02\x02\x02\u02F6\u0302\x07\x05\x02\x02\u02F7\u02FC"+
		"\x05t;\x02\u02F8\u02F9\x07\x07\x02\x02\u02F9\u02FB\x05t;\x02\u02FA\u02F8"+
		"\x03\x02\x02\x02\u02FB\u02FE\x03\x02\x02\x02\u02FC\u02FA\x03\x02\x02\x02"+
		"\u02FC\u02FD\x03\x02\x02\x02\u02FD\u0300\x03\x02\x02\x02\u02FE\u02FC\x03"+
		"\x02\x02\x02\u02FF\u0301\x07\x07\x02\x02\u0300\u02FF\x03\x02\x02\x02\u0300"+
		"\u0301\x03\x02\x02\x02\u0301\u0303\x03\x02\x02\x02\u0302\u02F7\x03\x02"+
		"\x02\x02\u0302\u0303\x03\x02\x02\x02\u0303\u0304\x03\x02\x02\x02\u0304"+
		"\u0305\x07\x06\x02\x02\u0305w\x03\x02\x02\x02\u0306\u0308\x07\b\x02\x02"+
		"\u0307\u0309\x05b2\x02\u0308\u0307\x03\x02\x02\x02\u0308\u0309\x03\x02"+
		"\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\u030B\x07\t\x02\x02\u030By"+
		"\x03\x02\x02\x02\u030C\u0310\x07\x05\x02\x02\u030D\u030F\x05\x82B\x02"+
		"\u030E\u030D\x03\x02\x02\x02\u030F\u0312\x03\x02\x02\x02\u0310\u030E\x03"+
		"\x02\x02\x02\u0310\u0311\x03\x02\x02\x02\u0311\u0313\x03\x02\x02\x02\u0312"+
		"\u0310\x03\x02\x02\x02\u0313\u0314\x07\x06\x02\x02\u0314{\x03\x02\x02"+
		"\x02\u0315\u0316\x07B\x02\x02\u0316\u0317\x05z>\x02\u0317}\x03\x02\x02"+
		"\x02\u0318\u031A\x05\x80A\x02\u0319\u0318\x03\x02\x02\x02\u031A\u031D"+
		"\x03\x02\x02\x02\u031B\u0319\x03\x02\x02\x02\u031B\u031C\x03\x02\x02\x02"+
		"\u031C\u031E\x03\x02\x02\x02\u031D\u031B\x03\x02\x02\x02\u031E\u031F\x05"+
		"\x98M\x02\u031F\u0322\x05,\x17\x02\u0320\u0321\x07\n\x02\x02\u0321\u0323"+
		"\x05\\/\x02\u0322\u0320\x03\x02\x02\x02\u0322\u0323\x03\x02\x02\x02\u0323"+
		"\u032C\x03\x02\x02\x02\u0324\u0325\x07\x07\x02\x02\u0325\u0328\x05,\x17"+
		"\x02\u0326\u0327\x07\n\x02\x02\u0327\u0329\x05\\/\x02\u0328\u0326\x03"+
		"\x02\x02\x02\u0328\u0329\x03\x02\x02\x02\u0329\u032B\x03\x02\x02\x02\u032A"+
		"\u0324\x03\x02\x02\x02\u032B\u032E\x03\x02\x02\x02\u032C\u032A\x03\x02"+
		"\x02\x02\u032C\u032D\x03\x02\x02\x02\u032D\x7F\x03\x02\x02\x02\u032E\u032C"+
		"\x03\x02\x02\x02\u032F\u0330\t\v\x02\x02\u0330\x81\x03\x02\x02\x02\u0331"+
		"\u0332\x05~@\x02\u0332\u0333\x07\x04\x02\x02\u0333\u0336\x03\x02\x02\x02"+
		"\u0334\u0336\x05\x94K\x02\u0335\u0331\x03\x02\x02\x02\u0335\u0334\x03"+
		"\x02\x02\x02\u0336\x83\x03\x02\x02\x02\u0337\u033C\x07p\x02\x02\u0338"+
		"\u0339\x07\f\x02\x02\u0339\u033B\x07p\x02\x02\u033A\u0338\x03\x02\x02"+
		"\x02\u033B\u033E\x03\x02\x02\x02\u033C\u033A\x03\x02\x02\x02\u033C\u033D"+
		"\x03\x02\x02\x02\u033D\x85\x03\x02\x02\x02\u033E\u033C\x03\x02\x02\x02"+
		"\u033F\u034C\x05\x8AF\x02\u0340\u0342\x05\x88E\x02\u0341\u0340\x03\x02"+
		"\x02\x02\u0341\u0342\x03\x02\x02\x02\u0342\u0343\x03\x02\x02\x02\u0343"+
		"\u0345\x07\x04\x02\x02\u0344\u0346\x05\\/\x02\u0345\u0344\x03\x02\x02"+
		"\x02\u0345\u0346\x03\x02\x02\x02\u0346\u0347\x03\x02\x02\x02\u0347\u0349"+
		"\x07\x04\x02\x02\u0348\u034A\x05\x8CG\x02\u0349\u0348\x03\x02\x02\x02"+
		"\u0349\u034A\x03\x02\x02\x02\u034A\u034C\x03\x02\x02\x02\u034B\u033F\x03"+
		"\x02\x02\x02\u034B\u0341\x03\x02\x02\x02\u034C\x87\x03\x02\x02\x02\u034D"+
		"\u0350\x05~@\x02\u034E\u0350\x05b2\x02\u034F\u034D\x03\x02\x02\x02\u034F"+
		"\u034E\x03\x02\x02\x02\u0350\x89\x03\x02\x02\x02\u0351\u0352\x05\x98M"+
		"\x02\u0352\u0353\x05,\x17\x02\u0353\u0354\x07#\x02\x02\u0354\u0355\x05"+
		"\\/\x02\u0355\x8B\x03\x02\x02\x02\u0356\u0357\x05b2\x02\u0357\x8D\x03"+
		"\x02\x02\x02\u0358\u0359\x07S\x02\x02\u0359\u035A\x07\b\x02\x02\u035A"+
		"\u035B\x05\x90I\x02\u035B\u035C\x05,\x17\x02\u035C\u035D\x07\t\x02\x02"+
		"\u035D\u035E\x05z>\x02\u035E\x8F\x03\x02\x02\x02\u035F\u0364\x05\x84C"+
		"\x02\u0360\u0361\x07\x1F\x02\x02\u0361\u0363\x05\x84C\x02\u0362\u0360"+
		"\x03\x02\x02\x02\u0363\u0366\x03\x02\x02\x02\u0364\u0362\x03\x02\x02\x02"+
		"\u0364\u0365\x03\x02\x02\x02\u0365\x91\x03\x02\x02\x02\u0366\u0364\x03"+
		"\x02\x02\x02\u0367\u0368\x07T\x02\x02\u0368\u0369\x05z>\x02\u0369\x93"+
		"\x03\x02\x02\x02\u036A\u03A5\x05z>\x02\u036B\u036C\x07J\x02\x02\u036C"+
		"\u03A5\x07\x04\x02\x02\u036D\u036E\x07K\x02\x02\u036E\u03A5\x07\x04\x02"+
		"\x02\u036F\u0370\x07L\x02\x02\u0370\u0371\x05\x94K\x02\u0371\u0372\x07"+
		"U\x02\x02\u0372\u0373\x05`1\x02\u0373\u0374\x07\x04\x02\x02\u0374\u03A5"+
		"\x03\x02\x02\x02\u0375\u0376\x07N\x02\x02\u0376\u0377\x07\b\x02\x02\u0377"+
		"\u0378\x05\x86D\x02\u0378\u0379\x07\t\x02\x02\u0379\u037A\x05\x94K\x02"+
		"\u037A\u03A5\x03\x02\x02\x02\u037B\u037C\x07O\x02\x02\u037C\u037D\x05"+
		"`1\x02\u037D\u0380\x05\x94K\x02\u037E\u037F\x07M\x02\x02\u037F\u0381\x05"+
		"\x94K\x02\u0380\u037E\x03\x02\x02\x02\u0380\u0381\x03\x02\x02\x02\u0381"+
		"\u03A5\x03\x02\x02\x02\u0382\u0384\x07P\x02\x02\u0383\u0385\x05\\/\x02"+
		"\u0384\u0383\x03\x02\x02\x02\u0384\u0385\x03\x02\x02\x02\u0385\u0386\x03"+
		"\x02\x02\x02\u0386\u03A5\x07\x04\x02\x02\u0387\u0388\x07Q\x02\x02\u0388"+
		"\u0389\x05\\/\x02\u0389\u038A\x07\x04\x02\x02\u038A\u03A5\x03\x02\x02"+
		"\x02\u038B\u038C\x07R\x02\x02\u038C\u0396\x05z>\x02\u038D\u038F\x05\x8E"+
		"H\x02\u038E\u038D\x03\x02\x02\x02\u038F\u0390\x03\x02\x02\x02\u0390\u038E"+
		"\x03\x02\x02\x02\u0390\u0391\x03\x02\x02\x02\u0391\u0393\x03\x02\x02\x02"+
		"\u0392\u0394\x05\x92J\x02\u0393\u0392\x03\x02\x02\x02\u0393\u0394\x03"+
		"\x02\x02\x02\u0394\u0397\x03\x02\x02\x02\u0395\u0397\x05\x92J\x02\u0396"+
		"\u038E\x03\x02\x02\x02\u0396\u0395\x03\x02\x02\x02\u0397\u03A5\x03\x02"+
		"\x02\x02\u0398\u0399\x07U\x02\x02\u0399\u039A\x05`1\x02\u039A\u039B\x05"+
		"\x94K\x02\u039B\u03A5\x03\x02\x02\x02\u039C\u03A5\x07\x04\x02\x02\u039D"+
		"\u03A5\x05d3\x02\u039E\u039F\x05f4\x02\u039F\u03A0\x07\x04\x02\x02\u03A0"+
		"\u03A5\x03\x02\x02\x02\u03A1\u03A2\x05\\/\x02\u03A2\u03A3\x07\x04\x02"+
		"\x02\u03A3\u03A5\x03\x02\x02\x02\u03A4\u036A\x03\x02\x02\x02\u03A4\u036B"+
		"\x03\x02\x02\x02\u03A4\u036D\x03\x02\x02\x02\u03A4\u036F\x03\x02\x02\x02"+
		"\u03A4\u0375\x03\x02\x02\x02\u03A4\u037B\x03\x02\x02\x02\u03A4\u0382\x03"+
		"\x02\x02\x02\u03A4\u0387\x03\x02\x02\x02\u03A4\u038B\x03\x02\x02\x02\u03A4"+
		"\u0398\x03\x02\x02\x02\u03A4\u039C\x03\x02\x02\x02\u03A4\u039D\x03\x02"+
		"\x02\x02\u03A4\u039E\x03\x02\x02\x02\u03A4\u03A1\x03\x02\x02\x02\u03A5"+
		"\x95\x03\x02\x02\x02\u03A6\u03AE\x07n\x02\x02\u03A7\u03AE\x07o\x02\x02"+
		"\u03A8\u03AE\x07k\x02\x02\u03A9\u03AE\x073\x02\x02\u03AA\u03AE\x07:\x02"+
		"\x02\u03AB\u03AE\x07m\x02\x02\u03AC\u03AE\x07l\x02\x02\u03AD\u03A6\x03"+
		"\x02\x02\x02\u03AD\u03A7\x03\x02\x02\x02\u03AD\u03A8\x03\x02\x02\x02\u03AD"+
		"\u03A9\x03\x02\x02\x02\u03AD\u03AA\x03\x02\x02\x02\u03AD\u03AB\x03\x02"+
		"\x02\x02\u03AD\u03AC\x03\x02\x02\x02\u03AE\x97\x03\x02\x02\x02\u03AF\u03B9"+
		"\x07H\x02\x02\u03B0\u03B1\x05\x84C\x02\u03B1\u03B2\x07\r\x02\x02\u03B2"+
		"\u03B3\x07\x0E\x02\x02\u03B3\u03B9\x03\x02\x02\x02\u03B4\u03B6\x05\x84"+
		"C\x02\u03B5\u03B7\x05j6\x02\u03B6\u03B5\x03\x02\x02\x02\u03B6\u03B7\x03"+
		"\x02\x02\x02\u03B7\u03B9\x03\x02\x02\x02\u03B8\u03AF\x03\x02\x02\x02\u03B8"+
		"\u03B0\x03\x02\x02\x02\u03B8\u03B4\x03\x02\x02\x02\u03B9\x99\x03\x02\x02"+
		"\x02l\x9F\xA3\xA9\xB0\xB6\xBB\xC4\xC7\xD8\xDE\xE0\xE9\xED\xEF\xF5\xFD"+
		"\u0102\u010F\u011C\u012A\u012C\u0133\u0139\u013D\u0147\u0151\u0158\u015C"+
		"\u0165\u0167\u016E\u0179\u0181\u0183\u018B\u018D\u0195\u019C\u01A4\u01A8"+
		"\u01AD\u01B5\u01B9\u01BD\u01C2\u01C9\u01D4\u01DE\u01E1\u01E9\u01F2\u0208"+
		"\u021B\u0221\u0226\u022B\u024C\u0259\u025B\u0267\u0272\u0278\u0287\u0295"+
		"\u0297\u029F\u02AA\u02B6\u02BD\u02C0\u02C5\u02CA\u02CF\u02D4\u02D8\u02DB"+
		"\u02E2\u02E7\u02EB\u02F4\u02FC\u0300\u0302\u0308\u0310\u031B\u0322\u0328"+
		"\u032C\u0335\u033C\u0341\u0345\u0349\u034B\u034F\u0364\u0380\u0384\u0390"+
		"\u0393\u0396\u03A4\u03AD\u03B6\u03B8";
	public static readonly _serializedATN: string = Utils.join(
		[
			ApexcodeParser._serializedATNSegment0,
			ApexcodeParser._serializedATNSegment1
		],
		""
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ApexcodeParser.__ATN) {
			ApexcodeParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ApexcodeParser._serializedATN));
		}

		return ApexcodeParser.__ATN;
	}

}

export class CompilationUnitContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(ApexcodeParser.EOF, 0); }
	public typeDeclaration(): TypeDeclarationContext[];
	public typeDeclaration(i: number): TypeDeclarationContext;
	public typeDeclaration(i?: number): TypeDeclarationContext | TypeDeclarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypeDeclarationContext);
		} else {
			return this.getRuleContext(i, TypeDeclarationContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_compilationUnit; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterCompilationUnit) listener.enterCompilationUnit(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitCompilationUnit) listener.exitCompilationUnit(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitCompilationUnit) return visitor.visitCompilationUnit(this);
		else return visitor.visitChildren(this);
	}
}


export class TypeDeclarationContext extends ParserRuleContext {
	constructor();
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent?: ParserRuleContext, invokingState?: number) {
		if (parent !== undefined && invokingState !== undefined) {
			super(parent, invokingState);
		} else {
			super();
		}
	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_typeDeclaration; }
 
	public copyFrom(ctx: TypeDeclarationContext): void {
		super.copyFrom(ctx);
	}
}
export class TriggerDefContext extends TypeDeclarationContext {
	public triggerDeclaration(): TriggerDeclarationContext {
		return this.getRuleContext(0, TriggerDeclarationContext);
	}
	constructor(ctx: TypeDeclarationContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTriggerDef) listener.enterTriggerDef(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTriggerDef) listener.exitTriggerDef(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTriggerDef) return visitor.visitTriggerDef(this);
		else return visitor.visitChildren(this);
	}
}
export class ClassDefContext extends TypeDeclarationContext {
	public classDeclaration(): ClassDeclarationContext {
		return this.getRuleContext(0, ClassDeclarationContext);
	}
	public classOrInterfaceModifier(): ClassOrInterfaceModifierContext[];
	public classOrInterfaceModifier(i: number): ClassOrInterfaceModifierContext;
	public classOrInterfaceModifier(i?: number): ClassOrInterfaceModifierContext | ClassOrInterfaceModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassOrInterfaceModifierContext);
		} else {
			return this.getRuleContext(i, ClassOrInterfaceModifierContext);
		}
	}
	constructor(ctx: TypeDeclarationContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassDef) listener.enterClassDef(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassDef) listener.exitClassDef(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassDef) return visitor.visitClassDef(this);
		else return visitor.visitChildren(this);
	}
}
export class EnumDefContext extends TypeDeclarationContext {
	public enumDeclaration(): EnumDeclarationContext {
		return this.getRuleContext(0, EnumDeclarationContext);
	}
	constructor(ctx: TypeDeclarationContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterEnumDef) listener.enterEnumDef(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitEnumDef) listener.exitEnumDef(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitEnumDef) return visitor.visitEnumDef(this);
		else return visitor.visitChildren(this);
	}
}
export class InterfaceDefContext extends TypeDeclarationContext {
	public interfaceDeclaration(): InterfaceDeclarationContext {
		return this.getRuleContext(0, InterfaceDeclarationContext);
	}
	public classOrInterfaceModifier(): ClassOrInterfaceModifierContext[];
	public classOrInterfaceModifier(i: number): ClassOrInterfaceModifierContext;
	public classOrInterfaceModifier(i?: number): ClassOrInterfaceModifierContext | ClassOrInterfaceModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassOrInterfaceModifierContext);
		} else {
			return this.getRuleContext(i, ClassOrInterfaceModifierContext);
		}
	}
	constructor(ctx: TypeDeclarationContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInterfaceDef) listener.enterInterfaceDef(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInterfaceDef) listener.exitInterfaceDef(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInterfaceDef) return visitor.visitInterfaceDef(this);
		else return visitor.visitChildren(this);
	}
}
export class EmptyDefContext extends TypeDeclarationContext {
	constructor(ctx: TypeDeclarationContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterEmptyDef) listener.enterEmptyDef(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitEmptyDef) listener.exitEmptyDef(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitEmptyDef) return visitor.visitEmptyDef(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassOrInterfaceModifierContext extends ParserRuleContext {
	public annotation(): AnnotationContext | undefined {
		return this.tryGetRuleContext(0, AnnotationContext);
	}
	public classOrInterfaceVisibilityModifier(): ClassOrInterfaceVisibilityModifierContext | undefined {
		return this.tryGetRuleContext(0, ClassOrInterfaceVisibilityModifierContext);
	}
	public classSharingModifier(): ClassSharingModifierContext | undefined {
		return this.tryGetRuleContext(0, ClassSharingModifierContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classOrInterfaceModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassOrInterfaceModifier) listener.enterClassOrInterfaceModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassOrInterfaceModifier) listener.exitClassOrInterfaceModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassOrInterfaceModifier) return visitor.visitClassOrInterfaceModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassOrInterfaceVisibilityModifierContext extends ParserRuleContext {
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
	public ABSTRACT(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.ABSTRACT, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.VIRTUAL, 0); }
	public WEBSERVICE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.WEBSERVICE, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classOrInterfaceVisibilityModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassOrInterfaceVisibilityModifier) listener.enterClassOrInterfaceVisibilityModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassOrInterfaceVisibilityModifier) listener.exitClassOrInterfaceVisibilityModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassOrInterfaceVisibilityModifier) return visitor.visitClassOrInterfaceVisibilityModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassSharingModifierContext extends ParserRuleContext {
	public WITHOUT_SHARING(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.WITHOUT_SHARING, 0); }
	public WITH_SHARING(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.WITH_SHARING, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classSharingModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassSharingModifier) listener.enterClassSharingModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassSharingModifier) listener.exitClassSharingModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassSharingModifier) return visitor.visitClassSharingModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassDeclarationContext extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(ApexcodeParser.CLASS, 0); }
	public className(): ClassNameContext {
		return this.getRuleContext(0, ClassNameContext);
	}
	public classBody(): ClassBodyContext {
		return this.getRuleContext(0, ClassBodyContext);
	}
	public extendsDeclaration(): ExtendsDeclarationContext | undefined {
		return this.tryGetRuleContext(0, ExtendsDeclarationContext);
	}
	public implementsDeclaration(): ImplementsDeclarationContext | undefined {
		return this.tryGetRuleContext(0, ImplementsDeclarationContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classDeclaration; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassDeclaration) listener.enterClassDeclaration(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassDeclaration) listener.exitClassDeclaration(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassDeclaration) return visitor.visitClassDeclaration(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_className; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassName) listener.enterClassName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassName) listener.exitClassName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassName) return visitor.visitClassName(this);
		else return visitor.visitChildren(this);
	}
}


export class ExtendsDeclarationContext extends ParserRuleContext {
	public EXTENDS(): TerminalNode { return this.getToken(ApexcodeParser.EXTENDS, 0); }
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_extendsDeclaration; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterExtendsDeclaration) listener.enterExtendsDeclaration(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitExtendsDeclaration) listener.exitExtendsDeclaration(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitExtendsDeclaration) return visitor.visitExtendsDeclaration(this);
		else return visitor.visitChildren(this);
	}
}


export class ImplementsDeclarationContext extends ParserRuleContext {
	public IMPLEMENTS(): TerminalNode { return this.getToken(ApexcodeParser.IMPLEMENTS, 0); }
	public dataType(): DataTypeContext[];
	public dataType(i: number): DataTypeContext;
	public dataType(i?: number): DataTypeContext | DataTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataTypeContext);
		} else {
			return this.getRuleContext(i, DataTypeContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_implementsDeclaration; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterImplementsDeclaration) listener.enterImplementsDeclaration(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitImplementsDeclaration) listener.exitImplementsDeclaration(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitImplementsDeclaration) return visitor.visitImplementsDeclaration(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassBodyContext extends ParserRuleContext {
	public staticCodeBlock(): StaticCodeBlockContext[];
	public staticCodeBlock(i: number): StaticCodeBlockContext;
	public staticCodeBlock(i?: number): StaticCodeBlockContext | StaticCodeBlockContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StaticCodeBlockContext);
		} else {
			return this.getRuleContext(i, StaticCodeBlockContext);
		}
	}
	public classBodyMember(): ClassBodyMemberContext[];
	public classBodyMember(i: number): ClassBodyMemberContext;
	public classBodyMember(i?: number): ClassBodyMemberContext | ClassBodyMemberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassBodyMemberContext);
		} else {
			return this.getRuleContext(i, ClassBodyMemberContext);
		}
	}
	public blockStatement(): BlockStatementContext[];
	public blockStatement(i: number): BlockStatementContext;
	public blockStatement(i?: number): BlockStatementContext | BlockStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BlockStatementContext);
		} else {
			return this.getRuleContext(i, BlockStatementContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classBody; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassBody) listener.enterClassBody(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassBody) listener.exitClassBody(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassBody) return visitor.visitClassBody(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassBodyMemberContext extends ParserRuleContext {
	public enumDeclaration(): EnumDeclarationContext | undefined {
		return this.tryGetRuleContext(0, EnumDeclarationContext);
	}
	public classConstructor(): ClassConstructorContext | undefined {
		return this.tryGetRuleContext(0, ClassConstructorContext);
	}
	public classMethod(): ClassMethodContext | undefined {
		return this.tryGetRuleContext(0, ClassMethodContext);
	}
	public classVariable(): ClassVariableContext | undefined {
		return this.tryGetRuleContext(0, ClassVariableContext);
	}
	public classProperty(): ClassPropertyContext | undefined {
		return this.tryGetRuleContext(0, ClassPropertyContext);
	}
	public typeDeclaration(): TypeDeclarationContext | undefined {
		return this.tryGetRuleContext(0, TypeDeclarationContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classBodyMember; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassBodyMember) listener.enterClassBodyMember(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassBodyMember) listener.exitClassBodyMember(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassBodyMember) return visitor.visitClassBodyMember(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassConstructorContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public methodBody(): MethodBodyContext {
		return this.getRuleContext(0, MethodBodyContext);
	}
	public annotation(): AnnotationContext[];
	public annotation(i: number): AnnotationContext;
	public annotation(i?: number): AnnotationContext | AnnotationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnnotationContext);
		} else {
			return this.getRuleContext(i, AnnotationContext);
		}
	}
	public classConstructorModifier(): ClassConstructorModifierContext[];
	public classConstructorModifier(i: number): ClassConstructorModifierContext;
	public classConstructorModifier(i?: number): ClassConstructorModifierContext | ClassConstructorModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassConstructorModifierContext);
		} else {
			return this.getRuleContext(i, ClassConstructorModifierContext);
		}
	}
	public methodParameters(): MethodParametersContext | undefined {
		return this.tryGetRuleContext(0, MethodParametersContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classConstructor; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassConstructor) listener.enterClassConstructor(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassConstructor) listener.exitClassConstructor(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassConstructor) return visitor.visitClassConstructor(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassConstructorModifierContext extends ParserRuleContext {
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
	public OVERRIDE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.OVERRIDE, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.VIRTUAL, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classConstructorModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassConstructorModifier) listener.enterClassConstructorModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassConstructorModifier) listener.exitClassConstructorModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassConstructorModifier) return visitor.visitClassConstructorModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class InterfaceDeclarationContext extends ParserRuleContext {
	public INTERFACE(): TerminalNode { return this.getToken(ApexcodeParser.INTERFACE, 0); }
	public interfaceName(): InterfaceNameContext {
		return this.getRuleContext(0, InterfaceNameContext);
	}
	public interfaceBody(): InterfaceBodyContext {
		return this.getRuleContext(0, InterfaceBodyContext);
	}
	public extendsDeclaration(): ExtendsDeclarationContext | undefined {
		return this.tryGetRuleContext(0, ExtendsDeclarationContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_interfaceDeclaration; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInterfaceDeclaration) listener.enterInterfaceDeclaration(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInterfaceDeclaration) listener.exitInterfaceDeclaration(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInterfaceDeclaration) return visitor.visitInterfaceDeclaration(this);
		else return visitor.visitChildren(this);
	}
}


export class InterfaceNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_interfaceName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInterfaceName) listener.enterInterfaceName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInterfaceName) listener.exitInterfaceName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInterfaceName) return visitor.visitInterfaceName(this);
		else return visitor.visitChildren(this);
	}
}


export class InterfaceBodyContext extends ParserRuleContext {
	public methodHeader(): MethodHeaderContext[];
	public methodHeader(i: number): MethodHeaderContext;
	public methodHeader(i?: number): MethodHeaderContext | MethodHeaderContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MethodHeaderContext);
		} else {
			return this.getRuleContext(i, MethodHeaderContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_interfaceBody; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInterfaceBody) listener.enterInterfaceBody(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInterfaceBody) listener.exitInterfaceBody(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInterfaceBody) return visitor.visitInterfaceBody(this);
		else return visitor.visitChildren(this);
	}
}


export class TriggerDeclarationContext extends ParserRuleContext {
	public TRIGGER_KEYWORD(): TerminalNode { return this.getToken(ApexcodeParser.TRIGGER_KEYWORD, 0); }
	public triggerName(): TriggerNameContext {
		return this.getRuleContext(0, TriggerNameContext);
	}
	public TRIGGER_ON_KEYWORD(): TerminalNode { return this.getToken(ApexcodeParser.TRIGGER_ON_KEYWORD, 0); }
	public triggerSObjectType(): TriggerSObjectTypeContext {
		return this.getRuleContext(0, TriggerSObjectTypeContext);
	}
	public TRIGGER_EVENT(): TerminalNode[];
	public TRIGGER_EVENT(i: number): TerminalNode;
	public TRIGGER_EVENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(ApexcodeParser.TRIGGER_EVENT);
		} else {
			return this.getToken(ApexcodeParser.TRIGGER_EVENT, i);
		}
	}
	public classBody(): ClassBodyContext {
		return this.getRuleContext(0, ClassBodyContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_triggerDeclaration; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTriggerDeclaration) listener.enterTriggerDeclaration(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTriggerDeclaration) listener.exitTriggerDeclaration(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTriggerDeclaration) return visitor.visitTriggerDeclaration(this);
		else return visitor.visitChildren(this);
	}
}


export class TriggerNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_triggerName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTriggerName) listener.enterTriggerName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTriggerName) listener.exitTriggerName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTriggerName) return visitor.visitTriggerName(this);
		else return visitor.visitChildren(this);
	}
}


export class TriggerSObjectTypeContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_triggerSObjectType; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTriggerSObjectType) listener.enterTriggerSObjectType(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTriggerSObjectType) listener.exitTriggerSObjectType(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTriggerSObjectType) return visitor.visitTriggerSObjectType(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassVariableContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public variableName(): VariableNameContext[];
	public variableName(i: number): VariableNameContext;
	public variableName(i?: number): VariableNameContext | VariableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableNameContext);
		} else {
			return this.getRuleContext(i, VariableNameContext);
		}
	}
	public annotation(): AnnotationContext[];
	public annotation(i: number): AnnotationContext;
	public annotation(i?: number): AnnotationContext | AnnotationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnnotationContext);
		} else {
			return this.getRuleContext(i, AnnotationContext);
		}
	}
	public classVariableModifier(): ClassVariableModifierContext[];
	public classVariableModifier(i: number): ClassVariableModifierContext;
	public classVariableModifier(i?: number): ClassVariableModifierContext | ClassVariableModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassVariableModifierContext);
		} else {
			return this.getRuleContext(i, ClassVariableModifierContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classVariable; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassVariable) listener.enterClassVariable(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassVariable) listener.exitClassVariable(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassVariable) return visitor.visitClassVariable(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassVariableModifierContext extends ParserRuleContext {
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.FINAL, 0); }
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.STATIC, 0); }
	public TRANSIENT(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.TRANSIENT, 0); }
	public WEBSERVICE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.WEBSERVICE, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classVariableModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassVariableModifier) listener.enterClassVariableModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassVariableModifier) listener.exitClassVariableModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassVariableModifier) return visitor.visitClassVariableModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class VariableNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_variableName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterVariableName) listener.enterVariableName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitVariableName) listener.exitVariableName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitVariableName) return visitor.visitVariableName(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassMethodContext extends ParserRuleContext {
	public methodHeader(): MethodHeaderContext {
		return this.getRuleContext(0, MethodHeaderContext);
	}
	public methodBody(): MethodBodyContext | undefined {
		return this.tryGetRuleContext(0, MethodBodyContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classMethod; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassMethod) listener.enterClassMethod(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassMethod) listener.exitClassMethod(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassMethod) return visitor.visitClassMethod(this);
		else return visitor.visitChildren(this);
	}
}


export class MethodParametersContext extends ParserRuleContext {
	public methodParameter(): MethodParameterContext[];
	public methodParameter(i: number): MethodParameterContext;
	public methodParameter(i?: number): MethodParameterContext | MethodParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MethodParameterContext);
		} else {
			return this.getRuleContext(i, MethodParameterContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_methodParameters; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMethodParameters) listener.enterMethodParameters(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMethodParameters) listener.exitMethodParameters(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMethodParameters) return visitor.visitMethodParameters(this);
		else return visitor.visitChildren(this);
	}
}


export class MethodParameterContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public methodParameterName(): MethodParameterNameContext {
		return this.getRuleContext(0, MethodParameterNameContext);
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.FINAL, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_methodParameter; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMethodParameter) listener.enterMethodParameter(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMethodParameter) listener.exitMethodParameter(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMethodParameter) return visitor.visitMethodParameter(this);
		else return visitor.visitChildren(this);
	}
}


export class MethodParameterNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_methodParameterName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMethodParameterName) listener.enterMethodParameterName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMethodParameterName) listener.exitMethodParameterName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMethodParameterName) return visitor.visitMethodParameterName(this);
		else return visitor.visitChildren(this);
	}
}


export class MethodHeaderContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public methodName(): MethodNameContext {
		return this.getRuleContext(0, MethodNameContext);
	}
	public annotation(): AnnotationContext[];
	public annotation(i: number): AnnotationContext;
	public annotation(i?: number): AnnotationContext | AnnotationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnnotationContext);
		} else {
			return this.getRuleContext(i, AnnotationContext);
		}
	}
	public methodHeaderModifier(): MethodHeaderModifierContext[];
	public methodHeaderModifier(i: number): MethodHeaderModifierContext;
	public methodHeaderModifier(i?: number): MethodHeaderModifierContext | MethodHeaderModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MethodHeaderModifierContext);
		} else {
			return this.getRuleContext(i, MethodHeaderModifierContext);
		}
	}
	public methodParameters(): MethodParametersContext | undefined {
		return this.tryGetRuleContext(0, MethodParametersContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_methodHeader; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMethodHeader) listener.enterMethodHeader(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMethodHeader) listener.exitMethodHeader(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMethodHeader) return visitor.visitMethodHeader(this);
		else return visitor.visitChildren(this);
	}
}


export class MethodHeaderModifierContext extends ParserRuleContext {
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
	public OVERRIDE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.OVERRIDE, 0); }
	public ABSTRACT(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.ABSTRACT, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.VIRTUAL, 0); }
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.STATIC, 0); }
	public TESTMETHOD(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.TESTMETHOD, 0); }
	public WEBSERVICE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.WEBSERVICE, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_methodHeaderModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMethodHeaderModifier) listener.enterMethodHeaderModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMethodHeaderModifier) listener.exitMethodHeaderModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMethodHeaderModifier) return visitor.visitMethodHeaderModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class MethodNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_methodName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMethodName) listener.enterMethodName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMethodName) listener.exitMethodName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMethodName) return visitor.visitMethodName(this);
		else return visitor.visitChildren(this);
	}
}


export class MethodBodyContext extends ParserRuleContext {
	public codeBlock(): CodeBlockContext {
		return this.getRuleContext(0, CodeBlockContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_methodBody; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMethodBody) listener.enterMethodBody(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMethodBody) listener.exitMethodBody(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMethodBody) return visitor.visitMethodBody(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassPropertyContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public propertyName(): PropertyNameContext {
		return this.getRuleContext(0, PropertyNameContext);
	}
	public annotation(): AnnotationContext[];
	public annotation(i: number): AnnotationContext;
	public annotation(i?: number): AnnotationContext | AnnotationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnnotationContext);
		} else {
			return this.getRuleContext(i, AnnotationContext);
		}
	}
	public propertyModifier(): PropertyModifierContext[];
	public propertyModifier(i: number): PropertyModifierContext;
	public propertyModifier(i?: number): PropertyModifierContext | PropertyModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyModifierContext);
		} else {
			return this.getRuleContext(i, PropertyModifierContext);
		}
	}
	public propertyGet(): PropertyGetContext[];
	public propertyGet(i: number): PropertyGetContext;
	public propertyGet(i?: number): PropertyGetContext | PropertyGetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyGetContext);
		} else {
			return this.getRuleContext(i, PropertyGetContext);
		}
	}
	public propertySet(): PropertySetContext[];
	public propertySet(i: number): PropertySetContext;
	public propertySet(i?: number): PropertySetContext | PropertySetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertySetContext);
		} else {
			return this.getRuleContext(i, PropertySetContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classProperty; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassProperty) listener.enterClassProperty(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassProperty) listener.exitClassProperty(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassProperty) return visitor.visitClassProperty(this);
		else return visitor.visitChildren(this);
	}
}


export class PropertyModifierContext extends ParserRuleContext {
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.FINAL, 0); }
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.STATIC, 0); }
	public TRANSIENT(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.TRANSIENT, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_propertyModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPropertyModifier) listener.enterPropertyModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPropertyModifier) listener.exitPropertyModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPropertyModifier) return visitor.visitPropertyModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class PropertyNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_propertyName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPropertyName) listener.enterPropertyName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPropertyName) listener.exitPropertyName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPropertyName) return visitor.visitPropertyName(this);
		else return visitor.visitChildren(this);
	}
}


export class PropertyGetContext extends ParserRuleContext {
	public GET_EMPTY(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.GET_EMPTY, 0); }
	public GET_OPEN_CURLY(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.GET_OPEN_CURLY, 0); }
	public propertyGetSetModifier(): PropertyGetSetModifierContext[];
	public propertyGetSetModifier(i: number): PropertyGetSetModifierContext;
	public propertyGetSetModifier(i?: number): PropertyGetSetModifierContext | PropertyGetSetModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyGetSetModifierContext);
		} else {
			return this.getRuleContext(i, PropertyGetSetModifierContext);
		}
	}
	public blockStatement(): BlockStatementContext[];
	public blockStatement(i: number): BlockStatementContext;
	public blockStatement(i?: number): BlockStatementContext | BlockStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BlockStatementContext);
		} else {
			return this.getRuleContext(i, BlockStatementContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_propertyGet; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPropertyGet) listener.enterPropertyGet(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPropertyGet) listener.exitPropertyGet(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPropertyGet) return visitor.visitPropertyGet(this);
		else return visitor.visitChildren(this);
	}
}


export class PropertySetContext extends ParserRuleContext {
	public SET_EMPTY(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.SET_EMPTY, 0); }
	public SET_OPEN_CURLY(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.SET_OPEN_CURLY, 0); }
	public propertyGetSetModifier(): PropertyGetSetModifierContext[];
	public propertyGetSetModifier(i: number): PropertyGetSetModifierContext;
	public propertyGetSetModifier(i?: number): PropertyGetSetModifierContext | PropertyGetSetModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyGetSetModifierContext);
		} else {
			return this.getRuleContext(i, PropertyGetSetModifierContext);
		}
	}
	public blockStatement(): BlockStatementContext[];
	public blockStatement(i: number): BlockStatementContext;
	public blockStatement(i?: number): BlockStatementContext | BlockStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BlockStatementContext);
		} else {
			return this.getRuleContext(i, BlockStatementContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_propertySet; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPropertySet) listener.enterPropertySet(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPropertySet) listener.exitPropertySet(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPropertySet) return visitor.visitPropertySet(this);
		else return visitor.visitChildren(this);
	}
}


export class PropertyGetSetModifierContext extends ParserRuleContext {
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PUBLIC, 0); }
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PROTECTED, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.PRIVATE, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.GLOBAL, 0); }
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.STATIC, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_propertyGetSetModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPropertyGetSetModifier) listener.enterPropertyGetSetModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPropertyGetSetModifier) listener.exitPropertyGetSetModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPropertyGetSetModifier) return visitor.visitPropertyGetSetModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class EnumDeclarationContext extends ParserRuleContext {
	public ENUM(): TerminalNode { return this.getToken(ApexcodeParser.ENUM, 0); }
	public enumName(): EnumNameContext {
		return this.getRuleContext(0, EnumNameContext);
	}
	public classOrInterfaceModifier(): ClassOrInterfaceModifierContext[];
	public classOrInterfaceModifier(i: number): ClassOrInterfaceModifierContext;
	public classOrInterfaceModifier(i?: number): ClassOrInterfaceModifierContext | ClassOrInterfaceModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassOrInterfaceModifierContext);
		} else {
			return this.getRuleContext(i, ClassOrInterfaceModifierContext);
		}
	}
	public enumConstants(): EnumConstantsContext | undefined {
		return this.tryGetRuleContext(0, EnumConstantsContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_enumDeclaration; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterEnumDeclaration) listener.enterEnumDeclaration(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitEnumDeclaration) listener.exitEnumDeclaration(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitEnumDeclaration) return visitor.visitEnumDeclaration(this);
		else return visitor.visitChildren(this);
	}
}


export class EnumNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_enumName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterEnumName) listener.enterEnumName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitEnumName) listener.exitEnumName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitEnumName) return visitor.visitEnumName(this);
		else return visitor.visitChildren(this);
	}
}


export class EnumConstantsContext extends ParserRuleContext {
	public enumConstant(): EnumConstantContext[];
	public enumConstant(i: number): EnumConstantContext;
	public enumConstant(i?: number): EnumConstantContext | EnumConstantContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EnumConstantContext);
		} else {
			return this.getRuleContext(i, EnumConstantContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_enumConstants; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterEnumConstants) listener.enterEnumConstants(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitEnumConstants) listener.exitEnumConstants(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitEnumConstants) return visitor.visitEnumConstants(this);
		else return visitor.visitChildren(this);
	}
}


export class EnumConstantContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_enumConstant; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterEnumConstant) listener.enterEnumConstant(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitEnumConstant) listener.exitEnumConstant(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitEnumConstant) return visitor.visitEnumConstant(this);
		else return visitor.visitChildren(this);
	}
}


export class AnnotationContext extends ParserRuleContext {
	public annotationName(): AnnotationNameContext {
		return this.getRuleContext(0, AnnotationNameContext);
	}
	public annotationElementValuePairs(): AnnotationElementValuePairsContext | undefined {
		return this.tryGetRuleContext(0, AnnotationElementValuePairsContext);
	}
	public annotationElementValue(): AnnotationElementValueContext | undefined {
		return this.tryGetRuleContext(0, AnnotationElementValueContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_annotation; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterAnnotation) listener.enterAnnotation(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitAnnotation) listener.exitAnnotation(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitAnnotation) return visitor.visitAnnotation(this);
		else return visitor.visitChildren(this);
	}
}


export class AnnotationNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_annotationName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterAnnotationName) listener.enterAnnotationName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitAnnotationName) listener.exitAnnotationName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitAnnotationName) return visitor.visitAnnotationName(this);
		else return visitor.visitChildren(this);
	}
}


export class AnnotationElementValuePairsContext extends ParserRuleContext {
	public annotationElementValuePair(): AnnotationElementValuePairContext[];
	public annotationElementValuePair(i: number): AnnotationElementValuePairContext;
	public annotationElementValuePair(i?: number): AnnotationElementValuePairContext | AnnotationElementValuePairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AnnotationElementValuePairContext);
		} else {
			return this.getRuleContext(i, AnnotationElementValuePairContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_annotationElementValuePairs; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterAnnotationElementValuePairs) listener.enterAnnotationElementValuePairs(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitAnnotationElementValuePairs) listener.exitAnnotationElementValuePairs(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitAnnotationElementValuePairs) return visitor.visitAnnotationElementValuePairs(this);
		else return visitor.visitChildren(this);
	}
}


export class AnnotationElementValuePairContext extends ParserRuleContext {
	public Identifier(): TerminalNode { return this.getToken(ApexcodeParser.Identifier, 0); }
	public annotationElementValue(): AnnotationElementValueContext {
		return this.getRuleContext(0, AnnotationElementValueContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_annotationElementValuePair; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterAnnotationElementValuePair) listener.enterAnnotationElementValuePair(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitAnnotationElementValuePair) listener.exitAnnotationElementValuePair(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitAnnotationElementValuePair) return visitor.visitAnnotationElementValuePair(this);
		else return visitor.visitChildren(this);
	}
}


export class AnnotationElementValueContext extends ParserRuleContext {
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public annotation(): AnnotationContext | undefined {
		return this.tryGetRuleContext(0, AnnotationContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_annotationElementValue; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterAnnotationElementValue) listener.enterAnnotationElementValue(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitAnnotationElementValue) listener.exitAnnotationElementValue(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitAnnotationElementValue) return visitor.visitAnnotationElementValue(this);
		else return visitor.visitChildren(this);
	}
}


export class ExpressionContext extends ParserRuleContext {
	constructor();
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent?: ParserRuleContext, invokingState?: number) {
		if (parent !== undefined && invokingState !== undefined) {
			super(parent, invokingState);
		} else {
			super();
		}
	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_expression; }
 
	public copyFrom(ctx: ExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class AssignmentExprContext extends ExpressionContext {
	public _left: ExpressionContext;
	public _op: Token;
	public _right: ExpressionContext;
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterAssignmentExpr) listener.enterAssignmentExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitAssignmentExpr) listener.exitAssignmentExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitAssignmentExpr) return visitor.visitAssignmentExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class PostIncrementExprContext extends ExpressionContext {
	public _op: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPostIncrementExpr) listener.enterPostIncrementExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPostIncrementExpr) listener.exitPostIncrementExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPostIncrementExpr) return visitor.visitPostIncrementExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class BitwiseXorExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterBitwiseXorExpr) listener.enterBitwiseXorExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitBitwiseXorExpr) listener.exitBitwiseXorExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitBitwiseXorExpr) return visitor.visitBitwiseXorExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class InstanceOfExprContext extends ExpressionContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public INSTANCE_OF(): TerminalNode { return this.getToken(ApexcodeParser.INSTANCE_OF, 0); }
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInstanceOfExpr) listener.enterInstanceOfExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInstanceOfExpr) listener.exitInstanceOfExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInstanceOfExpr) return visitor.visitInstanceOfExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class ExprDotExpressionContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterExprDotExpression) listener.enterExprDotExpression(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitExprDotExpression) listener.exitExprDotExpression(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitExprDotExpression) return visitor.visitExprDotExpression(this);
		else return visitor.visitChildren(this);
	}
}
export class BitwiseOrExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterBitwiseOrExpr) listener.enterBitwiseOrExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitBitwiseOrExpr) listener.exitBitwiseOrExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitBitwiseOrExpr) return visitor.visitBitwiseOrExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class BitwiseAndExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterBitwiseAndExpr) listener.enterBitwiseAndExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitBitwiseAndExpr) listener.exitBitwiseAndExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitBitwiseAndExpr) return visitor.visitBitwiseAndExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class ComparisonExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public WS(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.WS, 0); }
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterComparisonExpr) listener.enterComparisonExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitComparisonExpr) listener.exitComparisonExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitComparisonExpr) return visitor.visitComparisonExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class ArrayIndexExprContext extends ExpressionContext {
	public _arr: ExpressionContext;
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterArrayIndexExpr) listener.enterArrayIndexExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitArrayIndexExpr) listener.exitArrayIndexExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitArrayIndexExpr) return visitor.visitArrayIndexExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class TypeCastComplexExprContext extends ExpressionContext {
	public typeArguments(): TypeArgumentsContext {
		return this.getRuleContext(0, TypeArgumentsContext);
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTypeCastComplexExpr) listener.enterTypeCastComplexExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTypeCastComplexExpr) listener.exitTypeCastComplexExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTypeCastComplexExpr) return visitor.visitTypeCastComplexExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class PreIncrementExprContext extends ExpressionContext {
	public _op: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPreIncrementExpr) listener.enterPreIncrementExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPreIncrementExpr) listener.exitPreIncrementExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPreIncrementExpr) return visitor.visitPreIncrementExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class CreatorExpressionContext extends ExpressionContext {
	public NEW(): TerminalNode { return this.getToken(ApexcodeParser.NEW, 0); }
	public creator(): CreatorContext {
		return this.getRuleContext(0, CreatorContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterCreatorExpression) listener.enterCreatorExpression(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitCreatorExpression) listener.exitCreatorExpression(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitCreatorExpression) return visitor.visitCreatorExpression(this);
		else return visitor.visitChildren(this);
	}
}
export class MethodCallExprContext extends ExpressionContext {
	public _func: ExpressionContext;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public expressionList(): ExpressionListContext | undefined {
		return this.tryGetRuleContext(0, ExpressionListContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMethodCallExpr) listener.enterMethodCallExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMethodCallExpr) listener.exitMethodCallExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMethodCallExpr) return visitor.visitMethodCallExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class UnaryInequalityExprContext extends ExpressionContext {
	public _op: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterUnaryInequalityExpr) listener.enterUnaryInequalityExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitUnaryInequalityExpr) listener.exitUnaryInequalityExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitUnaryInequalityExpr) return visitor.visitUnaryInequalityExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class UnaryExprContext extends ExpressionContext {
	public _op: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterUnaryExpr) listener.enterUnaryExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitUnaryExpr) listener.exitUnaryExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitUnaryExpr) return visitor.visitUnaryExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class InfixAndExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInfixAndExpr) listener.enterInfixAndExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInfixAndExpr) listener.exitInfixAndExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInfixAndExpr) return visitor.visitInfixAndExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class PrimaryExprContext extends ExpressionContext {
	public primary(): PrimaryContext {
		return this.getRuleContext(0, PrimaryContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPrimaryExpr) listener.enterPrimaryExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPrimaryExpr) listener.exitPrimaryExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPrimaryExpr) return visitor.visitPrimaryExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class InfixMulExprContext extends ExpressionContext {
	public _op: Token;
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInfixMulExpr) listener.enterInfixMulExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInfixMulExpr) listener.exitInfixMulExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInfixMulExpr) return visitor.visitInfixMulExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class TernaryExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTernaryExpr) listener.enterTernaryExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTernaryExpr) listener.exitTernaryExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTernaryExpr) return visitor.visitTernaryExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class InfixOrExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInfixOrExpr) listener.enterInfixOrExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInfixOrExpr) listener.exitInfixOrExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInfixOrExpr) return visitor.visitInfixOrExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class InfixShiftExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInfixShiftExpr) listener.enterInfixShiftExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInfixShiftExpr) listener.exitInfixShiftExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInfixShiftExpr) return visitor.visitInfixShiftExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class InfixAddExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInfixAddExpr) listener.enterInfixAddExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInfixAddExpr) listener.exitInfixAddExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInfixAddExpr) return visitor.visitInfixAddExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class InfixEqualityExprContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterInfixEqualityExpr) listener.enterInfixEqualityExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitInfixEqualityExpr) listener.exitInfixEqualityExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitInfixEqualityExpr) return visitor.visitInfixEqualityExpr(this);
		else return visitor.visitChildren(this);
	}
}
export class TypeCastSimpleExprContext extends ExpressionContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ExpressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTypeCastSimpleExpr) listener.enterTypeCastSimpleExpr(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTypeCastSimpleExpr) listener.exitTypeCastSimpleExpr(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTypeCastSimpleExpr) return visitor.visitTypeCastSimpleExpr(this);
		else return visitor.visitChildren(this);
	}
}


export class PrimaryContext extends ParserRuleContext {
	public parExpression(): ParExpressionContext | undefined {
		return this.tryGetRuleContext(0, ParExpressionContext);
	}
	public THIS(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.THIS, 0); }
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.SUPER, 0); }
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public Identifier(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.Identifier, 0); }
	public dataType(): DataTypeContext | undefined {
		return this.tryGetRuleContext(0, DataTypeContext);
	}
	public CLASS(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.CLASS, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_primary; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterPrimary) listener.enterPrimary(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitPrimary) listener.exitPrimary(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitPrimary) return visitor.visitPrimary(this);
		else return visitor.visitChildren(this);
	}
}


export class ParExpressionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_parExpression; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterParExpression) listener.enterParExpression(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitParExpression) listener.exitParExpression(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitParExpression) return visitor.visitParExpression(this);
		else return visitor.visitChildren(this);
	}
}


export class ExpressionListContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_expressionList; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterExpressionList) listener.enterExpressionList(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitExpressionList) listener.exitExpressionList(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitExpressionList) return visitor.visitExpressionList(this);
		else return visitor.visitChildren(this);
	}
}


export class Runas_expressionContext extends ParserRuleContext {
	public SYSTEM_RUNAS(): TerminalNode { return this.getToken(ApexcodeParser.SYSTEM_RUNAS, 0); }
	public codeBlock(): CodeBlockContext {
		return this.getRuleContext(0, CodeBlockContext);
	}
	public expressionList(): ExpressionListContext | undefined {
		return this.tryGetRuleContext(0, ExpressionListContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_runas_expression; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterRunas_expression) listener.enterRunas_expression(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitRunas_expression) listener.exitRunas_expression(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitRunas_expression) return visitor.visitRunas_expression(this);
		else return visitor.visitChildren(this);
	}
}


export class Db_shortcut_expressionContext extends ParserRuleContext {
	constructor();
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent?: ParserRuleContext, invokingState?: number) {
		if (parent !== undefined && invokingState !== undefined) {
			super(parent, invokingState);
		} else {
			super();
		}
	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_db_shortcut_expression; }
 
	public copyFrom(ctx: Db_shortcut_expressionContext): void {
		super.copyFrom(ctx);
	}
}
export class DbShortcutTwoOpContext extends Db_shortcut_expressionContext {
	public DB_UPSERT(): TerminalNode { return this.getToken(ApexcodeParser.DB_UPSERT, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: Db_shortcut_expressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterDbShortcutTwoOp) listener.enterDbShortcutTwoOp(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitDbShortcutTwoOp) listener.exitDbShortcutTwoOp(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitDbShortcutTwoOp) return visitor.visitDbShortcutTwoOp(this);
		else return visitor.visitChildren(this);
	}
}
export class DbShortcutMergeContext extends Db_shortcut_expressionContext {
	public DB_MERGE(): TerminalNode { return this.getToken(ApexcodeParser.DB_MERGE, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: Db_shortcut_expressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterDbShortcutMerge) listener.enterDbShortcutMerge(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitDbShortcutMerge) listener.exitDbShortcutMerge(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitDbShortcutMerge) return visitor.visitDbShortcutMerge(this);
		else return visitor.visitChildren(this);
	}
}
export class DbShortcutOneOpContext extends Db_shortcut_expressionContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public DB_UPDATE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.DB_UPDATE, 0); }
	public DB_DELETE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.DB_DELETE, 0); }
	public DB_INSERT(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.DB_INSERT, 0); }
	public DB_UNDELETE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.DB_UNDELETE, 0); }
	public DB_UPSERT(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.DB_UPSERT, 0); }
	constructor(ctx: Db_shortcut_expressionContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterDbShortcutOneOp) listener.enterDbShortcutOneOp(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitDbShortcutOneOp) listener.exitDbShortcutOneOp(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitDbShortcutOneOp) return visitor.visitDbShortcutOneOp(this);
		else return visitor.visitChildren(this);
	}
}


export class CreatorContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public parExpression(): ParExpressionContext | undefined {
		return this.tryGetRuleContext(0, ParExpressionContext);
	}
	public classCreatorRest(): ClassCreatorRestContext | undefined {
		return this.tryGetRuleContext(0, ClassCreatorRestContext);
	}
	public arrayCreatorRest(): ArrayCreatorRestContext | undefined {
		return this.tryGetRuleContext(0, ArrayCreatorRestContext);
	}
	public mapCreatorRest(): MapCreatorRestContext | undefined {
		return this.tryGetRuleContext(0, MapCreatorRestContext);
	}
	public setCreatorRest(): SetCreatorRestContext | undefined {
		return this.tryGetRuleContext(0, SetCreatorRestContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_creator; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterCreator) listener.enterCreator(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitCreator) listener.exitCreator(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitCreator) return visitor.visitCreator(this);
		else return visitor.visitChildren(this);
	}
}


export class TypeArgumentsContext extends ParserRuleContext {
	public dataType(): DataTypeContext[];
	public dataType(i: number): DataTypeContext;
	public dataType(i?: number): DataTypeContext | DataTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataTypeContext);
		} else {
			return this.getRuleContext(i, DataTypeContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_typeArguments; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTypeArguments) listener.enterTypeArguments(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTypeArguments) listener.exitTypeArguments(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTypeArguments) return visitor.visitTypeArguments(this);
		else return visitor.visitChildren(this);
	}
}


export class ArrayCreatorRestContext extends ParserRuleContext {
	public arrayInitializer(): ArrayInitializerContext | undefined {
		return this.tryGetRuleContext(0, ArrayInitializerContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_arrayCreatorRest; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterArrayCreatorRest) listener.enterArrayCreatorRest(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitArrayCreatorRest) listener.exitArrayCreatorRest(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitArrayCreatorRest) return visitor.visitArrayCreatorRest(this);
		else return visitor.visitChildren(this);
	}
}


export class MapCreatorRestContext extends ParserRuleContext {
	public literal(): LiteralContext[];
	public literal(i: number): LiteralContext;
	public literal(i?: number): LiteralContext | LiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LiteralContext);
		} else {
			return this.getRuleContext(i, LiteralContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_mapCreatorRest; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterMapCreatorRest) listener.enterMapCreatorRest(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitMapCreatorRest) listener.exitMapCreatorRest(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitMapCreatorRest) return visitor.visitMapCreatorRest(this);
		else return visitor.visitChildren(this);
	}
}


export class SetCreatorRestContext extends ParserRuleContext {
	public literal(): LiteralContext[];
	public literal(i: number): LiteralContext;
	public literal(i?: number): LiteralContext | LiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LiteralContext);
		} else {
			return this.getRuleContext(i, LiteralContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_setCreatorRest; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterSetCreatorRest) listener.enterSetCreatorRest(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitSetCreatorRest) listener.exitSetCreatorRest(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitSetCreatorRest) return visitor.visitSetCreatorRest(this);
		else return visitor.visitChildren(this);
	}
}


export class ClassCreatorRestContext extends ParserRuleContext {
	public arguments(): ArgumentsContext {
		return this.getRuleContext(0, ArgumentsContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_classCreatorRest; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterClassCreatorRest) listener.enterClassCreatorRest(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitClassCreatorRest) listener.exitClassCreatorRest(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitClassCreatorRest) return visitor.visitClassCreatorRest(this);
		else return visitor.visitChildren(this);
	}
}


export class VariableInitializerContext extends ParserRuleContext {
	public arrayInitializer(): ArrayInitializerContext | undefined {
		return this.tryGetRuleContext(0, ArrayInitializerContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_variableInitializer; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterVariableInitializer) listener.enterVariableInitializer(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitVariableInitializer) listener.exitVariableInitializer(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitVariableInitializer) return visitor.visitVariableInitializer(this);
		else return visitor.visitChildren(this);
	}
}


export class ArrayInitializerContext extends ParserRuleContext {
	public variableInitializer(): VariableInitializerContext[];
	public variableInitializer(i: number): VariableInitializerContext;
	public variableInitializer(i?: number): VariableInitializerContext | VariableInitializerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableInitializerContext);
		} else {
			return this.getRuleContext(i, VariableInitializerContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_arrayInitializer; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterArrayInitializer) listener.enterArrayInitializer(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitArrayInitializer) listener.exitArrayInitializer(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitArrayInitializer) return visitor.visitArrayInitializer(this);
		else return visitor.visitChildren(this);
	}
}


export class ArgumentsContext extends ParserRuleContext {
	public expressionList(): ExpressionListContext | undefined {
		return this.tryGetRuleContext(0, ExpressionListContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_arguments; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterArguments) listener.enterArguments(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitArguments) listener.exitArguments(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitArguments) return visitor.visitArguments(this);
		else return visitor.visitChildren(this);
	}
}


export class CodeBlockContext extends ParserRuleContext {
	public blockStatement(): BlockStatementContext[];
	public blockStatement(i: number): BlockStatementContext;
	public blockStatement(i?: number): BlockStatementContext | BlockStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BlockStatementContext);
		} else {
			return this.getRuleContext(i, BlockStatementContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_codeBlock; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterCodeBlock) listener.enterCodeBlock(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitCodeBlock) listener.exitCodeBlock(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitCodeBlock) return visitor.visitCodeBlock(this);
		else return visitor.visitChildren(this);
	}
}


export class StaticCodeBlockContext extends ParserRuleContext {
	public STATIC(): TerminalNode { return this.getToken(ApexcodeParser.STATIC, 0); }
	public codeBlock(): CodeBlockContext {
		return this.getRuleContext(0, CodeBlockContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_staticCodeBlock; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterStaticCodeBlock) listener.enterStaticCodeBlock(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitStaticCodeBlock) listener.exitStaticCodeBlock(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitStaticCodeBlock) return visitor.visitStaticCodeBlock(this);
		else return visitor.visitChildren(this);
	}
}


export class LocalVariableDeclarationContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public variableName(): VariableNameContext[];
	public variableName(i: number): VariableNameContext;
	public variableName(i?: number): VariableNameContext | VariableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableNameContext);
		} else {
			return this.getRuleContext(i, VariableNameContext);
		}
	}
	public localVariableModifier(): LocalVariableModifierContext[];
	public localVariableModifier(i: number): LocalVariableModifierContext;
	public localVariableModifier(i?: number): LocalVariableModifierContext | LocalVariableModifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LocalVariableModifierContext);
		} else {
			return this.getRuleContext(i, LocalVariableModifierContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_localVariableDeclaration; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterLocalVariableDeclaration) listener.enterLocalVariableDeclaration(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitLocalVariableDeclaration) listener.exitLocalVariableDeclaration(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitLocalVariableDeclaration) return visitor.visitLocalVariableDeclaration(this);
		else return visitor.visitChildren(this);
	}
}


export class LocalVariableModifierContext extends ParserRuleContext {
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.FINAL, 0); }
	public TRANSIENT(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.TRANSIENT, 0); }
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_localVariableModifier; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterLocalVariableModifier) listener.enterLocalVariableModifier(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitLocalVariableModifier) listener.exitLocalVariableModifier(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitLocalVariableModifier) return visitor.visitLocalVariableModifier(this);
		else return visitor.visitChildren(this);
	}
}


export class BlockStatementContext extends ParserRuleContext {
	public localVariableDeclaration(): LocalVariableDeclarationContext | undefined {
		return this.tryGetRuleContext(0, LocalVariableDeclarationContext);
	}
	public statement(): StatementContext | undefined {
		return this.tryGetRuleContext(0, StatementContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_blockStatement; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterBlockStatement) listener.enterBlockStatement(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitBlockStatement) listener.exitBlockStatement(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitBlockStatement) return visitor.visitBlockStatement(this);
		else return visitor.visitChildren(this);
	}
}


export class QualifiedNameContext extends ParserRuleContext {
	public Identifier(): TerminalNode[];
	public Identifier(i: number): TerminalNode;
	public Identifier(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(ApexcodeParser.Identifier);
		} else {
			return this.getToken(ApexcodeParser.Identifier, i);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_qualifiedName; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterQualifiedName) listener.enterQualifiedName(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitQualifiedName) listener.exitQualifiedName(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitQualifiedName) return visitor.visitQualifiedName(this);
		else return visitor.visitChildren(this);
	}
}


export class ForControlContext extends ParserRuleContext {
	public enhancedForControl(): EnhancedForControlContext | undefined {
		return this.tryGetRuleContext(0, EnhancedForControlContext);
	}
	public forInit(): ForInitContext | undefined {
		return this.tryGetRuleContext(0, ForInitContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public forUpdate(): ForUpdateContext | undefined {
		return this.tryGetRuleContext(0, ForUpdateContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_forControl; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterForControl) listener.enterForControl(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitForControl) listener.exitForControl(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitForControl) return visitor.visitForControl(this);
		else return visitor.visitChildren(this);
	}
}


export class ForInitContext extends ParserRuleContext {
	public localVariableDeclaration(): LocalVariableDeclarationContext | undefined {
		return this.tryGetRuleContext(0, LocalVariableDeclarationContext);
	}
	public expressionList(): ExpressionListContext | undefined {
		return this.tryGetRuleContext(0, ExpressionListContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_forInit; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterForInit) listener.enterForInit(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitForInit) listener.exitForInit(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitForInit) return visitor.visitForInit(this);
		else return visitor.visitChildren(this);
	}
}


export class EnhancedForControlContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public variableName(): VariableNameContext {
		return this.getRuleContext(0, VariableNameContext);
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_enhancedForControl; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterEnhancedForControl) listener.enterEnhancedForControl(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitEnhancedForControl) listener.exitEnhancedForControl(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitEnhancedForControl) return visitor.visitEnhancedForControl(this);
		else return visitor.visitChildren(this);
	}
}


export class ForUpdateContext extends ParserRuleContext {
	public expressionList(): ExpressionListContext {
		return this.getRuleContext(0, ExpressionListContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_forUpdate; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterForUpdate) listener.enterForUpdate(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitForUpdate) listener.exitForUpdate(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitForUpdate) return visitor.visitForUpdate(this);
		else return visitor.visitChildren(this);
	}
}


export class CatchClauseContext extends ParserRuleContext {
	public CATCH(): TerminalNode { return this.getToken(ApexcodeParser.CATCH, 0); }
	public catchType(): CatchTypeContext {
		return this.getRuleContext(0, CatchTypeContext);
	}
	public variableName(): VariableNameContext {
		return this.getRuleContext(0, VariableNameContext);
	}
	public codeBlock(): CodeBlockContext {
		return this.getRuleContext(0, CodeBlockContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_catchClause; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterCatchClause) listener.enterCatchClause(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitCatchClause) listener.exitCatchClause(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitCatchClause) return visitor.visitCatchClause(this);
		else return visitor.visitChildren(this);
	}
}


export class CatchTypeContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_catchType; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterCatchType) listener.enterCatchType(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitCatchType) listener.exitCatchType(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitCatchType) return visitor.visitCatchType(this);
		else return visitor.visitChildren(this);
	}
}


export class FinallyBlockContext extends ParserRuleContext {
	public FINALLY(): TerminalNode { return this.getToken(ApexcodeParser.FINALLY, 0); }
	public codeBlock(): CodeBlockContext {
		return this.getRuleContext(0, CodeBlockContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_finallyBlock; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterFinallyBlock) listener.enterFinallyBlock(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitFinallyBlock) listener.exitFinallyBlock(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitFinallyBlock) return visitor.visitFinallyBlock(this);
		else return visitor.visitChildren(this);
	}
}


export class StatementContext extends ParserRuleContext {
	constructor();
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent?: ParserRuleContext, invokingState?: number) {
		if (parent !== undefined && invokingState !== undefined) {
			super(parent, invokingState);
		} else {
			super();
		}
	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_statement; }
 
	public copyFrom(ctx: StatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ForStmtContext extends StatementContext {
	public FOR(): TerminalNode { return this.getToken(ApexcodeParser.FOR, 0); }
	public forControl(): ForControlContext {
		return this.getRuleContext(0, ForControlContext);
	}
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterForStmt) listener.enterForStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitForStmt) listener.exitForStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitForStmt) return visitor.visitForStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class WhileStmtContext extends StatementContext {
	public WHILE(): TerminalNode { return this.getToken(ApexcodeParser.WHILE, 0); }
	public parExpression(): ParExpressionContext {
		return this.getRuleContext(0, ParExpressionContext);
	}
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterWhileStmt) listener.enterWhileStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitWhileStmt) listener.exitWhileStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitWhileStmt) return visitor.visitWhileStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class ExpressionStmtContext extends StatementContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterExpressionStmt) listener.enterExpressionStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitExpressionStmt) listener.exitExpressionStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitExpressionStmt) return visitor.visitExpressionStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class EmptyStmtContext extends StatementContext {
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterEmptyStmt) listener.enterEmptyStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitEmptyStmt) listener.exitEmptyStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitEmptyStmt) return visitor.visitEmptyStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class ReturnStmtContext extends StatementContext {
	public RETURN(): TerminalNode { return this.getToken(ApexcodeParser.RETURN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterReturnStmt) listener.enterReturnStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitReturnStmt) listener.exitReturnStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitReturnStmt) return visitor.visitReturnStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class DbShortcutStmtContext extends StatementContext {
	public db_shortcut_expression(): Db_shortcut_expressionContext {
		return this.getRuleContext(0, Db_shortcut_expressionContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterDbShortcutStmt) listener.enterDbShortcutStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitDbShortcutStmt) listener.exitDbShortcutStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitDbShortcutStmt) return visitor.visitDbShortcutStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class ThrowStmtContext extends StatementContext {
	public THROW(): TerminalNode { return this.getToken(ApexcodeParser.THROW, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterThrowStmt) listener.enterThrowStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitThrowStmt) listener.exitThrowStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitThrowStmt) return visitor.visitThrowStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class TryCatchFinallyStmtContext extends StatementContext {
	public TRY(): TerminalNode { return this.getToken(ApexcodeParser.TRY, 0); }
	public codeBlock(): CodeBlockContext {
		return this.getRuleContext(0, CodeBlockContext);
	}
	public finallyBlock(): FinallyBlockContext | undefined {
		return this.tryGetRuleContext(0, FinallyBlockContext);
	}
	public catchClause(): CatchClauseContext[];
	public catchClause(i: number): CatchClauseContext;
	public catchClause(i?: number): CatchClauseContext | CatchClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CatchClauseContext);
		} else {
			return this.getRuleContext(i, CatchClauseContext);
		}
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterTryCatchFinallyStmt) listener.enterTryCatchFinallyStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitTryCatchFinallyStmt) listener.exitTryCatchFinallyStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitTryCatchFinallyStmt) return visitor.visitTryCatchFinallyStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class RunAsStmtContext extends StatementContext {
	public runas_expression(): Runas_expressionContext {
		return this.getRuleContext(0, Runas_expressionContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterRunAsStmt) listener.enterRunAsStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitRunAsStmt) listener.exitRunAsStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitRunAsStmt) return visitor.visitRunAsStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class DoWhileStmtContext extends StatementContext {
	public DO(): TerminalNode { return this.getToken(ApexcodeParser.DO, 0); }
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public WHILE(): TerminalNode { return this.getToken(ApexcodeParser.WHILE, 0); }
	public parExpression(): ParExpressionContext {
		return this.getRuleContext(0, ParExpressionContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterDoWhileStmt) listener.enterDoWhileStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitDoWhileStmt) listener.exitDoWhileStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitDoWhileStmt) return visitor.visitDoWhileStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class BlockStmtContext extends StatementContext {
	public codeBlock(): CodeBlockContext {
		return this.getRuleContext(0, CodeBlockContext);
	}
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterBlockStmt) listener.enterBlockStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitBlockStmt) listener.exitBlockStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitBlockStmt) return visitor.visitBlockStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class IfElseStmtContext extends StatementContext {
	public IF(): TerminalNode { return this.getToken(ApexcodeParser.IF, 0); }
	public parExpression(): ParExpressionContext {
		return this.getRuleContext(0, ParExpressionContext);
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.ELSE, 0); }
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterIfElseStmt) listener.enterIfElseStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitIfElseStmt) listener.exitIfElseStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitIfElseStmt) return visitor.visitIfElseStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class BreakStmtContext extends StatementContext {
	public BREAK(): TerminalNode { return this.getToken(ApexcodeParser.BREAK, 0); }
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterBreakStmt) listener.enterBreakStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitBreakStmt) listener.exitBreakStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitBreakStmt) return visitor.visitBreakStmt(this);
		else return visitor.visitChildren(this);
	}
}
export class ContinueStmtContext extends StatementContext {
	public CONTINUE(): TerminalNode { return this.getToken(ApexcodeParser.CONTINUE, 0); }
	constructor(ctx: StatementContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterContinueStmt) listener.enterContinueStmt(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitContinueStmt) listener.exitContinueStmt(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitContinueStmt) return visitor.visitContinueStmt(this);
		else return visitor.visitChildren(this);
	}
}


export class LiteralContext extends ParserRuleContext {
	constructor();
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent?: ParserRuleContext, invokingState?: number) {
		if (parent !== undefined && invokingState !== undefined) {
			super(parent, invokingState);
		} else {
			super();
		}
	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_literal; }
 
	public copyFrom(ctx: LiteralContext): void {
		super.copyFrom(ctx);
	}
}
export class StrLiteralContext extends LiteralContext {
	public StringLiteral(): TerminalNode { return this.getToken(ApexcodeParser.StringLiteral, 0); }
	constructor(ctx: LiteralContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterStrLiteral) listener.enterStrLiteral(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitStrLiteral) listener.exitStrLiteral(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitStrLiteral) return visitor.visitStrLiteral(this);
		else return visitor.visitChildren(this);
	}
}
export class NullLiteralContext extends LiteralContext {
	public NULL(): TerminalNode { return this.getToken(ApexcodeParser.NULL, 0); }
	constructor(ctx: LiteralContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterNullLiteral) listener.enterNullLiteral(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitNullLiteral) listener.exitNullLiteral(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitNullLiteral) return visitor.visitNullLiteral(this);
		else return visitor.visitChildren(this);
	}
}
export class SoslLiteralContext extends LiteralContext {
	public SoslLiteral(): TerminalNode { return this.getToken(ApexcodeParser.SoslLiteral, 0); }
	constructor(ctx: LiteralContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterSoslLiteral) listener.enterSoslLiteral(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitSoslLiteral) listener.exitSoslLiteral(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitSoslLiteral) return visitor.visitSoslLiteral(this);
		else return visitor.visitChildren(this);
	}
}
export class FpLiteralContext extends LiteralContext {
	public FloatingPointLiteral(): TerminalNode { return this.getToken(ApexcodeParser.FloatingPointLiteral, 0); }
	constructor(ctx: LiteralContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterFpLiteral) listener.enterFpLiteral(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitFpLiteral) listener.exitFpLiteral(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitFpLiteral) return visitor.visitFpLiteral(this);
		else return visitor.visitChildren(this);
	}
}
export class IntLiteralContext extends LiteralContext {
	public IntegerLiteral(): TerminalNode { return this.getToken(ApexcodeParser.IntegerLiteral, 0); }
	constructor(ctx: LiteralContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterIntLiteral) listener.enterIntLiteral(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitIntLiteral) listener.exitIntLiteral(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitIntLiteral) return visitor.visitIntLiteral(this);
		else return visitor.visitChildren(this);
	}
}
export class SoqlLiteralContext extends LiteralContext {
	public SoqlLiteral(): TerminalNode { return this.getToken(ApexcodeParser.SoqlLiteral, 0); }
	constructor(ctx: LiteralContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterSoqlLiteral) listener.enterSoqlLiteral(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitSoqlLiteral) listener.exitSoqlLiteral(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitSoqlLiteral) return visitor.visitSoqlLiteral(this);
		else return visitor.visitChildren(this);
	}
}
export class BoolLiteralContext extends LiteralContext {
	public BooleanLiteral(): TerminalNode { return this.getToken(ApexcodeParser.BooleanLiteral, 0); }
	constructor(ctx: LiteralContext) { super(); this.copyFrom(ctx); }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterBoolLiteral) listener.enterBoolLiteral(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitBoolLiteral) listener.exitBoolLiteral(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitBoolLiteral) return visitor.visitBoolLiteral(this);
		else return visitor.visitChildren(this);
	}
}


export class DataTypeContext extends ParserRuleContext {
	public _arrayType: QualifiedNameContext;
	public VOID(): TerminalNode | undefined { return this.tryGetToken(ApexcodeParser.VOID, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public typeArguments(): TypeArgumentsContext | undefined {
		return this.tryGetRuleContext(0, TypeArgumentsContext);
	}
	constructor(parent: ParserRuleContext, invokingState: number);
	constructor(parent: ParserRuleContext, invokingState: number) {
		super(parent, invokingState);

	}
	@Override public get ruleIndex(): number { return ApexcodeParser.RULE_dataType; }
	@Override
	public enterRule(listener: ApexcodeListener): void {
		if (listener.enterDataType) listener.enterDataType(this);
	}
	@Override
	public exitRule(listener: ApexcodeListener): void {
		if (listener.exitDataType) listener.exitDataType(this);
	}
	@Override
	public accept<Result>(visitor: ApexcodeVisitor<Result>): Result {
		if (visitor.visitDataType) return visitor.visitDataType(this);
		else return visitor.visitChildren(this);
	}
}


