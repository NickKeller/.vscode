// Generated from /Users/jonas/Documents/code/apex-parser-ts/src/grammar/Apexcode.g4 by ANTLR 4.6-SNAPSHOT


import { ParseTreeListener } from 'antlr4ts/tree/ParseTreeListener';

import { TriggerDefContext } from './ApexcodeParser';
import { ClassDefContext } from './ApexcodeParser';
import { EnumDefContext } from './ApexcodeParser';
import { InterfaceDefContext } from './ApexcodeParser';
import { EmptyDefContext } from './ApexcodeParser';
import { StrLiteralContext } from './ApexcodeParser';
import { NullLiteralContext } from './ApexcodeParser';
import { SoslLiteralContext } from './ApexcodeParser';
import { FpLiteralContext } from './ApexcodeParser';
import { IntLiteralContext } from './ApexcodeParser';
import { SoqlLiteralContext } from './ApexcodeParser';
import { BoolLiteralContext } from './ApexcodeParser';
import { ForStmtContext } from './ApexcodeParser';
import { WhileStmtContext } from './ApexcodeParser';
import { ExpressionStmtContext } from './ApexcodeParser';
import { EmptyStmtContext } from './ApexcodeParser';
import { ReturnStmtContext } from './ApexcodeParser';
import { DbShortcutStmtContext } from './ApexcodeParser';
import { ThrowStmtContext } from './ApexcodeParser';
import { TryCatchFinallyStmtContext } from './ApexcodeParser';
import { RunAsStmtContext } from './ApexcodeParser';
import { DoWhileStmtContext } from './ApexcodeParser';
import { BlockStmtContext } from './ApexcodeParser';
import { IfElseStmtContext } from './ApexcodeParser';
import { BreakStmtContext } from './ApexcodeParser';
import { ContinueStmtContext } from './ApexcodeParser';
import { DbShortcutTwoOpContext } from './ApexcodeParser';
import { DbShortcutMergeContext } from './ApexcodeParser';
import { DbShortcutOneOpContext } from './ApexcodeParser';
import { AssignmentExprContext } from './ApexcodeParser';
import { PostIncrementExprContext } from './ApexcodeParser';
import { BitwiseXorExprContext } from './ApexcodeParser';
import { InstanceOfExprContext } from './ApexcodeParser';
import { ExprDotExpressionContext } from './ApexcodeParser';
import { BitwiseOrExprContext } from './ApexcodeParser';
import { BitwiseAndExprContext } from './ApexcodeParser';
import { ComparisonExprContext } from './ApexcodeParser';
import { ArrayIndexExprContext } from './ApexcodeParser';
import { TypeCastComplexExprContext } from './ApexcodeParser';
import { PreIncrementExprContext } from './ApexcodeParser';
import { CreatorExpressionContext } from './ApexcodeParser';
import { MethodCallExprContext } from './ApexcodeParser';
import { UnaryInequalityExprContext } from './ApexcodeParser';
import { UnaryExprContext } from './ApexcodeParser';
import { InfixAndExprContext } from './ApexcodeParser';
import { PrimaryExprContext } from './ApexcodeParser';
import { InfixMulExprContext } from './ApexcodeParser';
import { TernaryExprContext } from './ApexcodeParser';
import { InfixOrExprContext } from './ApexcodeParser';
import { InfixShiftExprContext } from './ApexcodeParser';
import { InfixAddExprContext } from './ApexcodeParser';
import { InfixEqualityExprContext } from './ApexcodeParser';
import { TypeCastSimpleExprContext } from './ApexcodeParser';
import { CompilationUnitContext } from './ApexcodeParser';
import { TypeDeclarationContext } from './ApexcodeParser';
import { ClassOrInterfaceModifierContext } from './ApexcodeParser';
import { ClassOrInterfaceVisibilityModifierContext } from './ApexcodeParser';
import { ClassSharingModifierContext } from './ApexcodeParser';
import { ClassDeclarationContext } from './ApexcodeParser';
import { ClassNameContext } from './ApexcodeParser';
import { ExtendsDeclarationContext } from './ApexcodeParser';
import { ImplementsDeclarationContext } from './ApexcodeParser';
import { ClassBodyContext } from './ApexcodeParser';
import { ClassBodyMemberContext } from './ApexcodeParser';
import { ClassConstructorContext } from './ApexcodeParser';
import { ClassConstructorModifierContext } from './ApexcodeParser';
import { InterfaceDeclarationContext } from './ApexcodeParser';
import { InterfaceNameContext } from './ApexcodeParser';
import { InterfaceBodyContext } from './ApexcodeParser';
import { TriggerDeclarationContext } from './ApexcodeParser';
import { TriggerNameContext } from './ApexcodeParser';
import { TriggerSObjectTypeContext } from './ApexcodeParser';
import { ClassVariableContext } from './ApexcodeParser';
import { ClassVariableModifierContext } from './ApexcodeParser';
import { VariableNameContext } from './ApexcodeParser';
import { ClassMethodContext } from './ApexcodeParser';
import { MethodParametersContext } from './ApexcodeParser';
import { MethodParameterContext } from './ApexcodeParser';
import { MethodParameterNameContext } from './ApexcodeParser';
import { MethodHeaderContext } from './ApexcodeParser';
import { MethodHeaderModifierContext } from './ApexcodeParser';
import { MethodNameContext } from './ApexcodeParser';
import { MethodBodyContext } from './ApexcodeParser';
import { ClassPropertyContext } from './ApexcodeParser';
import { PropertyModifierContext } from './ApexcodeParser';
import { PropertyNameContext } from './ApexcodeParser';
import { PropertyGetContext } from './ApexcodeParser';
import { PropertySetContext } from './ApexcodeParser';
import { PropertyGetSetModifierContext } from './ApexcodeParser';
import { EnumDeclarationContext } from './ApexcodeParser';
import { EnumNameContext } from './ApexcodeParser';
import { EnumConstantsContext } from './ApexcodeParser';
import { EnumConstantContext } from './ApexcodeParser';
import { AnnotationContext } from './ApexcodeParser';
import { AnnotationNameContext } from './ApexcodeParser';
import { AnnotationElementValuePairsContext } from './ApexcodeParser';
import { AnnotationElementValuePairContext } from './ApexcodeParser';
import { AnnotationElementValueContext } from './ApexcodeParser';
import { ExpressionContext } from './ApexcodeParser';
import { PrimaryContext } from './ApexcodeParser';
import { ParExpressionContext } from './ApexcodeParser';
import { ExpressionListContext } from './ApexcodeParser';
import { Runas_expressionContext } from './ApexcodeParser';
import { Db_shortcut_expressionContext } from './ApexcodeParser';
import { CreatorContext } from './ApexcodeParser';
import { TypeArgumentsContext } from './ApexcodeParser';
import { ArrayCreatorRestContext } from './ApexcodeParser';
import { MapCreatorRestContext } from './ApexcodeParser';
import { SetCreatorRestContext } from './ApexcodeParser';
import { ClassCreatorRestContext } from './ApexcodeParser';
import { VariableInitializerContext } from './ApexcodeParser';
import { ArrayInitializerContext } from './ApexcodeParser';
import { ArgumentsContext } from './ApexcodeParser';
import { CodeBlockContext } from './ApexcodeParser';
import { StaticCodeBlockContext } from './ApexcodeParser';
import { LocalVariableDeclarationContext } from './ApexcodeParser';
import { LocalVariableModifierContext } from './ApexcodeParser';
import { BlockStatementContext } from './ApexcodeParser';
import { QualifiedNameContext } from './ApexcodeParser';
import { ForControlContext } from './ApexcodeParser';
import { ForInitContext } from './ApexcodeParser';
import { EnhancedForControlContext } from './ApexcodeParser';
import { ForUpdateContext } from './ApexcodeParser';
import { CatchClauseContext } from './ApexcodeParser';
import { CatchTypeContext } from './ApexcodeParser';
import { FinallyBlockContext } from './ApexcodeParser';
import { StatementContext } from './ApexcodeParser';
import { LiteralContext } from './ApexcodeParser';
import { DataTypeContext } from './ApexcodeParser';


/**
 * This interface defines a complete listener for a parse tree produced by
 * `ApexcodeParser`.
 */
export interface ApexcodeListener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by the `triggerDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	enterTriggerDef?: (ctx: TriggerDefContext) => void;
	/**
	 * Exit a parse tree produced by the `triggerDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	exitTriggerDef?: (ctx: TriggerDefContext) => void;

	/**
	 * Enter a parse tree produced by the `classDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	enterClassDef?: (ctx: ClassDefContext) => void;
	/**
	 * Exit a parse tree produced by the `classDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	exitClassDef?: (ctx: ClassDefContext) => void;

	/**
	 * Enter a parse tree produced by the `enumDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	enterEnumDef?: (ctx: EnumDefContext) => void;
	/**
	 * Exit a parse tree produced by the `enumDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	exitEnumDef?: (ctx: EnumDefContext) => void;

	/**
	 * Enter a parse tree produced by the `interfaceDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	enterInterfaceDef?: (ctx: InterfaceDefContext) => void;
	/**
	 * Exit a parse tree produced by the `interfaceDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	exitInterfaceDef?: (ctx: InterfaceDefContext) => void;

	/**
	 * Enter a parse tree produced by the `emptyDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	enterEmptyDef?: (ctx: EmptyDefContext) => void;
	/**
	 * Exit a parse tree produced by the `emptyDef`
	 * labeled alternative in `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	exitEmptyDef?: (ctx: EmptyDefContext) => void;

	/**
	 * Enter a parse tree produced by the `strLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	enterStrLiteral?: (ctx: StrLiteralContext) => void;
	/**
	 * Exit a parse tree produced by the `strLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	exitStrLiteral?: (ctx: StrLiteralContext) => void;

	/**
	 * Enter a parse tree produced by the `nullLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	enterNullLiteral?: (ctx: NullLiteralContext) => void;
	/**
	 * Exit a parse tree produced by the `nullLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	exitNullLiteral?: (ctx: NullLiteralContext) => void;

	/**
	 * Enter a parse tree produced by the `soslLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	enterSoslLiteral?: (ctx: SoslLiteralContext) => void;
	/**
	 * Exit a parse tree produced by the `soslLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	exitSoslLiteral?: (ctx: SoslLiteralContext) => void;

	/**
	 * Enter a parse tree produced by the `fpLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	enterFpLiteral?: (ctx: FpLiteralContext) => void;
	/**
	 * Exit a parse tree produced by the `fpLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	exitFpLiteral?: (ctx: FpLiteralContext) => void;

	/**
	 * Enter a parse tree produced by the `intLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	enterIntLiteral?: (ctx: IntLiteralContext) => void;
	/**
	 * Exit a parse tree produced by the `intLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	exitIntLiteral?: (ctx: IntLiteralContext) => void;

	/**
	 * Enter a parse tree produced by the `soqlLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	enterSoqlLiteral?: (ctx: SoqlLiteralContext) => void;
	/**
	 * Exit a parse tree produced by the `soqlLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	exitSoqlLiteral?: (ctx: SoqlLiteralContext) => void;

	/**
	 * Enter a parse tree produced by the `boolLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	enterBoolLiteral?: (ctx: BoolLiteralContext) => void;
	/**
	 * Exit a parse tree produced by the `boolLiteral`
	 * labeled alternative in `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	exitBoolLiteral?: (ctx: BoolLiteralContext) => void;

	/**
	 * Enter a parse tree produced by the `forStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterForStmt?: (ctx: ForStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `forStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitForStmt?: (ctx: ForStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `whileStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterWhileStmt?: (ctx: WhileStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `whileStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitWhileStmt?: (ctx: WhileStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `expressionStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterExpressionStmt?: (ctx: ExpressionStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `expressionStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitExpressionStmt?: (ctx: ExpressionStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `emptyStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterEmptyStmt?: (ctx: EmptyStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `emptyStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitEmptyStmt?: (ctx: EmptyStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `returnStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterReturnStmt?: (ctx: ReturnStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `returnStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitReturnStmt?: (ctx: ReturnStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `dbShortcutStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterDbShortcutStmt?: (ctx: DbShortcutStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `dbShortcutStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitDbShortcutStmt?: (ctx: DbShortcutStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `throwStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterThrowStmt?: (ctx: ThrowStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `throwStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitThrowStmt?: (ctx: ThrowStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `tryCatchFinallyStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterTryCatchFinallyStmt?: (ctx: TryCatchFinallyStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `tryCatchFinallyStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitTryCatchFinallyStmt?: (ctx: TryCatchFinallyStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `runAsStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterRunAsStmt?: (ctx: RunAsStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `runAsStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitRunAsStmt?: (ctx: RunAsStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `doWhileStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterDoWhileStmt?: (ctx: DoWhileStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `doWhileStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitDoWhileStmt?: (ctx: DoWhileStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `blockStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterBlockStmt?: (ctx: BlockStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `blockStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitBlockStmt?: (ctx: BlockStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `ifElseStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterIfElseStmt?: (ctx: IfElseStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `ifElseStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitIfElseStmt?: (ctx: IfElseStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `breakStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterBreakStmt?: (ctx: BreakStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `breakStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitBreakStmt?: (ctx: BreakStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `continueStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterContinueStmt?: (ctx: ContinueStmtContext) => void;
	/**
	 * Exit a parse tree produced by the `continueStmt`
	 * labeled alternative in `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitContinueStmt?: (ctx: ContinueStmtContext) => void;

	/**
	 * Enter a parse tree produced by the `dbShortcutTwoOp`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 */
	enterDbShortcutTwoOp?: (ctx: DbShortcutTwoOpContext) => void;
	/**
	 * Exit a parse tree produced by the `dbShortcutTwoOp`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 */
	exitDbShortcutTwoOp?: (ctx: DbShortcutTwoOpContext) => void;

	/**
	 * Enter a parse tree produced by the `dbShortcutMerge`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 */
	enterDbShortcutMerge?: (ctx: DbShortcutMergeContext) => void;
	/**
	 * Exit a parse tree produced by the `dbShortcutMerge`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 */
	exitDbShortcutMerge?: (ctx: DbShortcutMergeContext) => void;

	/**
	 * Enter a parse tree produced by the `dbShortcutOneOp`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 */
	enterDbShortcutOneOp?: (ctx: DbShortcutOneOpContext) => void;
	/**
	 * Exit a parse tree produced by the `dbShortcutOneOp`
	 * labeled alternative in `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 */
	exitDbShortcutOneOp?: (ctx: DbShortcutOneOpContext) => void;

	/**
	 * Enter a parse tree produced by the `assignmentExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterAssignmentExpr?: (ctx: AssignmentExprContext) => void;
	/**
	 * Exit a parse tree produced by the `assignmentExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitAssignmentExpr?: (ctx: AssignmentExprContext) => void;

	/**
	 * Enter a parse tree produced by the `postIncrementExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterPostIncrementExpr?: (ctx: PostIncrementExprContext) => void;
	/**
	 * Exit a parse tree produced by the `postIncrementExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitPostIncrementExpr?: (ctx: PostIncrementExprContext) => void;

	/**
	 * Enter a parse tree produced by the `bitwiseXorExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterBitwiseXorExpr?: (ctx: BitwiseXorExprContext) => void;
	/**
	 * Exit a parse tree produced by the `bitwiseXorExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitBitwiseXorExpr?: (ctx: BitwiseXorExprContext) => void;

	/**
	 * Enter a parse tree produced by the `instanceOfExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterInstanceOfExpr?: (ctx: InstanceOfExprContext) => void;
	/**
	 * Exit a parse tree produced by the `instanceOfExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitInstanceOfExpr?: (ctx: InstanceOfExprContext) => void;

	/**
	 * Enter a parse tree produced by the `exprDotExpression`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterExprDotExpression?: (ctx: ExprDotExpressionContext) => void;
	/**
	 * Exit a parse tree produced by the `exprDotExpression`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitExprDotExpression?: (ctx: ExprDotExpressionContext) => void;

	/**
	 * Enter a parse tree produced by the `bitwiseOrExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterBitwiseOrExpr?: (ctx: BitwiseOrExprContext) => void;
	/**
	 * Exit a parse tree produced by the `bitwiseOrExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitBitwiseOrExpr?: (ctx: BitwiseOrExprContext) => void;

	/**
	 * Enter a parse tree produced by the `bitwiseAndExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterBitwiseAndExpr?: (ctx: BitwiseAndExprContext) => void;
	/**
	 * Exit a parse tree produced by the `bitwiseAndExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitBitwiseAndExpr?: (ctx: BitwiseAndExprContext) => void;

	/**
	 * Enter a parse tree produced by the `comparisonExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterComparisonExpr?: (ctx: ComparisonExprContext) => void;
	/**
	 * Exit a parse tree produced by the `comparisonExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitComparisonExpr?: (ctx: ComparisonExprContext) => void;

	/**
	 * Enter a parse tree produced by the `arrayIndexExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterArrayIndexExpr?: (ctx: ArrayIndexExprContext) => void;
	/**
	 * Exit a parse tree produced by the `arrayIndexExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitArrayIndexExpr?: (ctx: ArrayIndexExprContext) => void;

	/**
	 * Enter a parse tree produced by the `typeCastComplexExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterTypeCastComplexExpr?: (ctx: TypeCastComplexExprContext) => void;
	/**
	 * Exit a parse tree produced by the `typeCastComplexExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitTypeCastComplexExpr?: (ctx: TypeCastComplexExprContext) => void;

	/**
	 * Enter a parse tree produced by the `preIncrementExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterPreIncrementExpr?: (ctx: PreIncrementExprContext) => void;
	/**
	 * Exit a parse tree produced by the `preIncrementExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitPreIncrementExpr?: (ctx: PreIncrementExprContext) => void;

	/**
	 * Enter a parse tree produced by the `creatorExpression`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterCreatorExpression?: (ctx: CreatorExpressionContext) => void;
	/**
	 * Exit a parse tree produced by the `creatorExpression`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitCreatorExpression?: (ctx: CreatorExpressionContext) => void;

	/**
	 * Enter a parse tree produced by the `methodCallExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterMethodCallExpr?: (ctx: MethodCallExprContext) => void;
	/**
	 * Exit a parse tree produced by the `methodCallExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitMethodCallExpr?: (ctx: MethodCallExprContext) => void;

	/**
	 * Enter a parse tree produced by the `unaryInequalityExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterUnaryInequalityExpr?: (ctx: UnaryInequalityExprContext) => void;
	/**
	 * Exit a parse tree produced by the `unaryInequalityExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitUnaryInequalityExpr?: (ctx: UnaryInequalityExprContext) => void;

	/**
	 * Enter a parse tree produced by the `unaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterUnaryExpr?: (ctx: UnaryExprContext) => void;
	/**
	 * Exit a parse tree produced by the `unaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitUnaryExpr?: (ctx: UnaryExprContext) => void;

	/**
	 * Enter a parse tree produced by the `infixAndExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterInfixAndExpr?: (ctx: InfixAndExprContext) => void;
	/**
	 * Exit a parse tree produced by the `infixAndExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitInfixAndExpr?: (ctx: InfixAndExprContext) => void;

	/**
	 * Enter a parse tree produced by the `primaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterPrimaryExpr?: (ctx: PrimaryExprContext) => void;
	/**
	 * Exit a parse tree produced by the `primaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitPrimaryExpr?: (ctx: PrimaryExprContext) => void;

	/**
	 * Enter a parse tree produced by the `infixMulExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterInfixMulExpr?: (ctx: InfixMulExprContext) => void;
	/**
	 * Exit a parse tree produced by the `infixMulExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitInfixMulExpr?: (ctx: InfixMulExprContext) => void;

	/**
	 * Enter a parse tree produced by the `ternaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterTernaryExpr?: (ctx: TernaryExprContext) => void;
	/**
	 * Exit a parse tree produced by the `ternaryExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitTernaryExpr?: (ctx: TernaryExprContext) => void;

	/**
	 * Enter a parse tree produced by the `infixOrExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterInfixOrExpr?: (ctx: InfixOrExprContext) => void;
	/**
	 * Exit a parse tree produced by the `infixOrExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitInfixOrExpr?: (ctx: InfixOrExprContext) => void;

	/**
	 * Enter a parse tree produced by the `infixShiftExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterInfixShiftExpr?: (ctx: InfixShiftExprContext) => void;
	/**
	 * Exit a parse tree produced by the `infixShiftExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitInfixShiftExpr?: (ctx: InfixShiftExprContext) => void;

	/**
	 * Enter a parse tree produced by the `infixAddExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterInfixAddExpr?: (ctx: InfixAddExprContext) => void;
	/**
	 * Exit a parse tree produced by the `infixAddExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitInfixAddExpr?: (ctx: InfixAddExprContext) => void;

	/**
	 * Enter a parse tree produced by the `infixEqualityExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterInfixEqualityExpr?: (ctx: InfixEqualityExprContext) => void;
	/**
	 * Exit a parse tree produced by the `infixEqualityExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitInfixEqualityExpr?: (ctx: InfixEqualityExprContext) => void;

	/**
	 * Enter a parse tree produced by the `typeCastSimpleExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterTypeCastSimpleExpr?: (ctx: TypeCastSimpleExprContext) => void;
	/**
	 * Exit a parse tree produced by the `typeCastSimpleExpr`
	 * labeled alternative in `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitTypeCastSimpleExpr?: (ctx: TypeCastSimpleExprContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.compilationUnit`.
	 * @param ctx the parse tree
	 */
	enterCompilationUnit?: (ctx: CompilationUnitContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.compilationUnit`.
	 * @param ctx the parse tree
	 */
	exitCompilationUnit?: (ctx: CompilationUnitContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	enterTypeDeclaration?: (ctx: TypeDeclarationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.typeDeclaration`.
	 * @param ctx the parse tree
	 */
	exitTypeDeclaration?: (ctx: TypeDeclarationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classOrInterfaceModifier`.
	 * @param ctx the parse tree
	 */
	enterClassOrInterfaceModifier?: (ctx: ClassOrInterfaceModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classOrInterfaceModifier`.
	 * @param ctx the parse tree
	 */
	exitClassOrInterfaceModifier?: (ctx: ClassOrInterfaceModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classOrInterfaceVisibilityModifier`.
	 * @param ctx the parse tree
	 */
	enterClassOrInterfaceVisibilityModifier?: (ctx: ClassOrInterfaceVisibilityModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classOrInterfaceVisibilityModifier`.
	 * @param ctx the parse tree
	 */
	exitClassOrInterfaceVisibilityModifier?: (ctx: ClassOrInterfaceVisibilityModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classSharingModifier`.
	 * @param ctx the parse tree
	 */
	enterClassSharingModifier?: (ctx: ClassSharingModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classSharingModifier`.
	 * @param ctx the parse tree
	 */
	exitClassSharingModifier?: (ctx: ClassSharingModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classDeclaration`.
	 * @param ctx the parse tree
	 */
	enterClassDeclaration?: (ctx: ClassDeclarationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classDeclaration`.
	 * @param ctx the parse tree
	 */
	exitClassDeclaration?: (ctx: ClassDeclarationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.className`.
	 * @param ctx the parse tree
	 */
	enterClassName?: (ctx: ClassNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.className`.
	 * @param ctx the parse tree
	 */
	exitClassName?: (ctx: ClassNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.extendsDeclaration`.
	 * @param ctx the parse tree
	 */
	enterExtendsDeclaration?: (ctx: ExtendsDeclarationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.extendsDeclaration`.
	 * @param ctx the parse tree
	 */
	exitExtendsDeclaration?: (ctx: ExtendsDeclarationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.implementsDeclaration`.
	 * @param ctx the parse tree
	 */
	enterImplementsDeclaration?: (ctx: ImplementsDeclarationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.implementsDeclaration`.
	 * @param ctx the parse tree
	 */
	exitImplementsDeclaration?: (ctx: ImplementsDeclarationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classBody`.
	 * @param ctx the parse tree
	 */
	enterClassBody?: (ctx: ClassBodyContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classBody`.
	 * @param ctx the parse tree
	 */
	exitClassBody?: (ctx: ClassBodyContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classBodyMember`.
	 * @param ctx the parse tree
	 */
	enterClassBodyMember?: (ctx: ClassBodyMemberContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classBodyMember`.
	 * @param ctx the parse tree
	 */
	exitClassBodyMember?: (ctx: ClassBodyMemberContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classConstructor`.
	 * @param ctx the parse tree
	 */
	enterClassConstructor?: (ctx: ClassConstructorContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classConstructor`.
	 * @param ctx the parse tree
	 */
	exitClassConstructor?: (ctx: ClassConstructorContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classConstructorModifier`.
	 * @param ctx the parse tree
	 */
	enterClassConstructorModifier?: (ctx: ClassConstructorModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classConstructorModifier`.
	 * @param ctx the parse tree
	 */
	exitClassConstructorModifier?: (ctx: ClassConstructorModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.interfaceDeclaration`.
	 * @param ctx the parse tree
	 */
	enterInterfaceDeclaration?: (ctx: InterfaceDeclarationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.interfaceDeclaration`.
	 * @param ctx the parse tree
	 */
	exitInterfaceDeclaration?: (ctx: InterfaceDeclarationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.interfaceName`.
	 * @param ctx the parse tree
	 */
	enterInterfaceName?: (ctx: InterfaceNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.interfaceName`.
	 * @param ctx the parse tree
	 */
	exitInterfaceName?: (ctx: InterfaceNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.interfaceBody`.
	 * @param ctx the parse tree
	 */
	enterInterfaceBody?: (ctx: InterfaceBodyContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.interfaceBody`.
	 * @param ctx the parse tree
	 */
	exitInterfaceBody?: (ctx: InterfaceBodyContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.triggerDeclaration`.
	 * @param ctx the parse tree
	 */
	enterTriggerDeclaration?: (ctx: TriggerDeclarationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.triggerDeclaration`.
	 * @param ctx the parse tree
	 */
	exitTriggerDeclaration?: (ctx: TriggerDeclarationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.triggerName`.
	 * @param ctx the parse tree
	 */
	enterTriggerName?: (ctx: TriggerNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.triggerName`.
	 * @param ctx the parse tree
	 */
	exitTriggerName?: (ctx: TriggerNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.triggerSObjectType`.
	 * @param ctx the parse tree
	 */
	enterTriggerSObjectType?: (ctx: TriggerSObjectTypeContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.triggerSObjectType`.
	 * @param ctx the parse tree
	 */
	exitTriggerSObjectType?: (ctx: TriggerSObjectTypeContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classVariable`.
	 * @param ctx the parse tree
	 */
	enterClassVariable?: (ctx: ClassVariableContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classVariable`.
	 * @param ctx the parse tree
	 */
	exitClassVariable?: (ctx: ClassVariableContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classVariableModifier`.
	 * @param ctx the parse tree
	 */
	enterClassVariableModifier?: (ctx: ClassVariableModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classVariableModifier`.
	 * @param ctx the parse tree
	 */
	exitClassVariableModifier?: (ctx: ClassVariableModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.variableName`.
	 * @param ctx the parse tree
	 */
	enterVariableName?: (ctx: VariableNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.variableName`.
	 * @param ctx the parse tree
	 */
	exitVariableName?: (ctx: VariableNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classMethod`.
	 * @param ctx the parse tree
	 */
	enterClassMethod?: (ctx: ClassMethodContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classMethod`.
	 * @param ctx the parse tree
	 */
	exitClassMethod?: (ctx: ClassMethodContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.methodParameters`.
	 * @param ctx the parse tree
	 */
	enterMethodParameters?: (ctx: MethodParametersContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.methodParameters`.
	 * @param ctx the parse tree
	 */
	exitMethodParameters?: (ctx: MethodParametersContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.methodParameter`.
	 * @param ctx the parse tree
	 */
	enterMethodParameter?: (ctx: MethodParameterContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.methodParameter`.
	 * @param ctx the parse tree
	 */
	exitMethodParameter?: (ctx: MethodParameterContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.methodParameterName`.
	 * @param ctx the parse tree
	 */
	enterMethodParameterName?: (ctx: MethodParameterNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.methodParameterName`.
	 * @param ctx the parse tree
	 */
	exitMethodParameterName?: (ctx: MethodParameterNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.methodHeader`.
	 * @param ctx the parse tree
	 */
	enterMethodHeader?: (ctx: MethodHeaderContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.methodHeader`.
	 * @param ctx the parse tree
	 */
	exitMethodHeader?: (ctx: MethodHeaderContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.methodHeaderModifier`.
	 * @param ctx the parse tree
	 */
	enterMethodHeaderModifier?: (ctx: MethodHeaderModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.methodHeaderModifier`.
	 * @param ctx the parse tree
	 */
	exitMethodHeaderModifier?: (ctx: MethodHeaderModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.methodName`.
	 * @param ctx the parse tree
	 */
	enterMethodName?: (ctx: MethodNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.methodName`.
	 * @param ctx the parse tree
	 */
	exitMethodName?: (ctx: MethodNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.methodBody`.
	 * @param ctx the parse tree
	 */
	enterMethodBody?: (ctx: MethodBodyContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.methodBody`.
	 * @param ctx the parse tree
	 */
	exitMethodBody?: (ctx: MethodBodyContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classProperty`.
	 * @param ctx the parse tree
	 */
	enterClassProperty?: (ctx: ClassPropertyContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classProperty`.
	 * @param ctx the parse tree
	 */
	exitClassProperty?: (ctx: ClassPropertyContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.propertyModifier`.
	 * @param ctx the parse tree
	 */
	enterPropertyModifier?: (ctx: PropertyModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.propertyModifier`.
	 * @param ctx the parse tree
	 */
	exitPropertyModifier?: (ctx: PropertyModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.propertyName`.
	 * @param ctx the parse tree
	 */
	enterPropertyName?: (ctx: PropertyNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.propertyName`.
	 * @param ctx the parse tree
	 */
	exitPropertyName?: (ctx: PropertyNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.propertyGet`.
	 * @param ctx the parse tree
	 */
	enterPropertyGet?: (ctx: PropertyGetContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.propertyGet`.
	 * @param ctx the parse tree
	 */
	exitPropertyGet?: (ctx: PropertyGetContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.propertySet`.
	 * @param ctx the parse tree
	 */
	enterPropertySet?: (ctx: PropertySetContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.propertySet`.
	 * @param ctx the parse tree
	 */
	exitPropertySet?: (ctx: PropertySetContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.propertyGetSetModifier`.
	 * @param ctx the parse tree
	 */
	enterPropertyGetSetModifier?: (ctx: PropertyGetSetModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.propertyGetSetModifier`.
	 * @param ctx the parse tree
	 */
	exitPropertyGetSetModifier?: (ctx: PropertyGetSetModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.enumDeclaration`.
	 * @param ctx the parse tree
	 */
	enterEnumDeclaration?: (ctx: EnumDeclarationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.enumDeclaration`.
	 * @param ctx the parse tree
	 */
	exitEnumDeclaration?: (ctx: EnumDeclarationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.enumName`.
	 * @param ctx the parse tree
	 */
	enterEnumName?: (ctx: EnumNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.enumName`.
	 * @param ctx the parse tree
	 */
	exitEnumName?: (ctx: EnumNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.enumConstants`.
	 * @param ctx the parse tree
	 */
	enterEnumConstants?: (ctx: EnumConstantsContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.enumConstants`.
	 * @param ctx the parse tree
	 */
	exitEnumConstants?: (ctx: EnumConstantsContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.enumConstant`.
	 * @param ctx the parse tree
	 */
	enterEnumConstant?: (ctx: EnumConstantContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.enumConstant`.
	 * @param ctx the parse tree
	 */
	exitEnumConstant?: (ctx: EnumConstantContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.annotation`.
	 * @param ctx the parse tree
	 */
	enterAnnotation?: (ctx: AnnotationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.annotation`.
	 * @param ctx the parse tree
	 */
	exitAnnotation?: (ctx: AnnotationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.annotationName`.
	 * @param ctx the parse tree
	 */
	enterAnnotationName?: (ctx: AnnotationNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.annotationName`.
	 * @param ctx the parse tree
	 */
	exitAnnotationName?: (ctx: AnnotationNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.annotationElementValuePairs`.
	 * @param ctx the parse tree
	 */
	enterAnnotationElementValuePairs?: (ctx: AnnotationElementValuePairsContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.annotationElementValuePairs`.
	 * @param ctx the parse tree
	 */
	exitAnnotationElementValuePairs?: (ctx: AnnotationElementValuePairsContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.annotationElementValuePair`.
	 * @param ctx the parse tree
	 */
	enterAnnotationElementValuePair?: (ctx: AnnotationElementValuePairContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.annotationElementValuePair`.
	 * @param ctx the parse tree
	 */
	exitAnnotationElementValuePair?: (ctx: AnnotationElementValuePairContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.annotationElementValue`.
	 * @param ctx the parse tree
	 */
	enterAnnotationElementValue?: (ctx: AnnotationElementValueContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.annotationElementValue`.
	 * @param ctx the parse tree
	 */
	exitAnnotationElementValue?: (ctx: AnnotationElementValueContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	enterExpression?: (ctx: ExpressionContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.expression`.
	 * @param ctx the parse tree
	 */
	exitExpression?: (ctx: ExpressionContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.primary`.
	 * @param ctx the parse tree
	 */
	enterPrimary?: (ctx: PrimaryContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.primary`.
	 * @param ctx the parse tree
	 */
	exitPrimary?: (ctx: PrimaryContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.parExpression`.
	 * @param ctx the parse tree
	 */
	enterParExpression?: (ctx: ParExpressionContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.parExpression`.
	 * @param ctx the parse tree
	 */
	exitParExpression?: (ctx: ParExpressionContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.expressionList`.
	 * @param ctx the parse tree
	 */
	enterExpressionList?: (ctx: ExpressionListContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.expressionList`.
	 * @param ctx the parse tree
	 */
	exitExpressionList?: (ctx: ExpressionListContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.runas_expression`.
	 * @param ctx the parse tree
	 */
	enterRunas_expression?: (ctx: Runas_expressionContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.runas_expression`.
	 * @param ctx the parse tree
	 */
	exitRunas_expression?: (ctx: Runas_expressionContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 */
	enterDb_shortcut_expression?: (ctx: Db_shortcut_expressionContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.db_shortcut_expression`.
	 * @param ctx the parse tree
	 */
	exitDb_shortcut_expression?: (ctx: Db_shortcut_expressionContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.creator`.
	 * @param ctx the parse tree
	 */
	enterCreator?: (ctx: CreatorContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.creator`.
	 * @param ctx the parse tree
	 */
	exitCreator?: (ctx: CreatorContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.typeArguments`.
	 * @param ctx the parse tree
	 */
	enterTypeArguments?: (ctx: TypeArgumentsContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.typeArguments`.
	 * @param ctx the parse tree
	 */
	exitTypeArguments?: (ctx: TypeArgumentsContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.arrayCreatorRest`.
	 * @param ctx the parse tree
	 */
	enterArrayCreatorRest?: (ctx: ArrayCreatorRestContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.arrayCreatorRest`.
	 * @param ctx the parse tree
	 */
	exitArrayCreatorRest?: (ctx: ArrayCreatorRestContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.mapCreatorRest`.
	 * @param ctx the parse tree
	 */
	enterMapCreatorRest?: (ctx: MapCreatorRestContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.mapCreatorRest`.
	 * @param ctx the parse tree
	 */
	exitMapCreatorRest?: (ctx: MapCreatorRestContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.setCreatorRest`.
	 * @param ctx the parse tree
	 */
	enterSetCreatorRest?: (ctx: SetCreatorRestContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.setCreatorRest`.
	 * @param ctx the parse tree
	 */
	exitSetCreatorRest?: (ctx: SetCreatorRestContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.classCreatorRest`.
	 * @param ctx the parse tree
	 */
	enterClassCreatorRest?: (ctx: ClassCreatorRestContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.classCreatorRest`.
	 * @param ctx the parse tree
	 */
	exitClassCreatorRest?: (ctx: ClassCreatorRestContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.variableInitializer`.
	 * @param ctx the parse tree
	 */
	enterVariableInitializer?: (ctx: VariableInitializerContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.variableInitializer`.
	 * @param ctx the parse tree
	 */
	exitVariableInitializer?: (ctx: VariableInitializerContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.arrayInitializer`.
	 * @param ctx the parse tree
	 */
	enterArrayInitializer?: (ctx: ArrayInitializerContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.arrayInitializer`.
	 * @param ctx the parse tree
	 */
	exitArrayInitializer?: (ctx: ArrayInitializerContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.arguments`.
	 * @param ctx the parse tree
	 */
	enterArguments?: (ctx: ArgumentsContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.arguments`.
	 * @param ctx the parse tree
	 */
	exitArguments?: (ctx: ArgumentsContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.codeBlock`.
	 * @param ctx the parse tree
	 */
	enterCodeBlock?: (ctx: CodeBlockContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.codeBlock`.
	 * @param ctx the parse tree
	 */
	exitCodeBlock?: (ctx: CodeBlockContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.staticCodeBlock`.
	 * @param ctx the parse tree
	 */
	enterStaticCodeBlock?: (ctx: StaticCodeBlockContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.staticCodeBlock`.
	 * @param ctx the parse tree
	 */
	exitStaticCodeBlock?: (ctx: StaticCodeBlockContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.localVariableDeclaration`.
	 * @param ctx the parse tree
	 */
	enterLocalVariableDeclaration?: (ctx: LocalVariableDeclarationContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.localVariableDeclaration`.
	 * @param ctx the parse tree
	 */
	exitLocalVariableDeclaration?: (ctx: LocalVariableDeclarationContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.localVariableModifier`.
	 * @param ctx the parse tree
	 */
	enterLocalVariableModifier?: (ctx: LocalVariableModifierContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.localVariableModifier`.
	 * @param ctx the parse tree
	 */
	exitLocalVariableModifier?: (ctx: LocalVariableModifierContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.blockStatement`.
	 * @param ctx the parse tree
	 */
	enterBlockStatement?: (ctx: BlockStatementContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.blockStatement`.
	 * @param ctx the parse tree
	 */
	exitBlockStatement?: (ctx: BlockStatementContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.qualifiedName`.
	 * @param ctx the parse tree
	 */
	enterQualifiedName?: (ctx: QualifiedNameContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.qualifiedName`.
	 * @param ctx the parse tree
	 */
	exitQualifiedName?: (ctx: QualifiedNameContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.forControl`.
	 * @param ctx the parse tree
	 */
	enterForControl?: (ctx: ForControlContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.forControl`.
	 * @param ctx the parse tree
	 */
	exitForControl?: (ctx: ForControlContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.forInit`.
	 * @param ctx the parse tree
	 */
	enterForInit?: (ctx: ForInitContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.forInit`.
	 * @param ctx the parse tree
	 */
	exitForInit?: (ctx: ForInitContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.enhancedForControl`.
	 * @param ctx the parse tree
	 */
	enterEnhancedForControl?: (ctx: EnhancedForControlContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.enhancedForControl`.
	 * @param ctx the parse tree
	 */
	exitEnhancedForControl?: (ctx: EnhancedForControlContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.forUpdate`.
	 * @param ctx the parse tree
	 */
	enterForUpdate?: (ctx: ForUpdateContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.forUpdate`.
	 * @param ctx the parse tree
	 */
	exitForUpdate?: (ctx: ForUpdateContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.catchClause`.
	 * @param ctx the parse tree
	 */
	enterCatchClause?: (ctx: CatchClauseContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.catchClause`.
	 * @param ctx the parse tree
	 */
	exitCatchClause?: (ctx: CatchClauseContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.catchType`.
	 * @param ctx the parse tree
	 */
	enterCatchType?: (ctx: CatchTypeContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.catchType`.
	 * @param ctx the parse tree
	 */
	exitCatchType?: (ctx: CatchTypeContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.finallyBlock`.
	 * @param ctx the parse tree
	 */
	enterFinallyBlock?: (ctx: FinallyBlockContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.finallyBlock`.
	 * @param ctx the parse tree
	 */
	exitFinallyBlock?: (ctx: FinallyBlockContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	enterStatement?: (ctx: StatementContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.statement`.
	 * @param ctx the parse tree
	 */
	exitStatement?: (ctx: StatementContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	enterLiteral?: (ctx: LiteralContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.literal`.
	 * @param ctx the parse tree
	 */
	exitLiteral?: (ctx: LiteralContext) => void;

	/**
	 * Enter a parse tree produced by `ApexcodeParser.dataType`.
	 * @param ctx the parse tree
	 */
	enterDataType?: (ctx: DataTypeContext) => void;
	/**
	 * Exit a parse tree produced by `ApexcodeParser.dataType`.
	 * @param ctx the parse tree
	 */
	exitDataType?: (ctx: DataTypeContext) => void;
}

